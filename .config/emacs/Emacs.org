#+TITLE Emacs.org config
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes
#+STARTUP: fold
* General Changes
** Set variables

#+begin_src emacs-lisp
  (setq user-full-name    "Riley Beckett"
        user-mail-address "rbeckettvt@gmail.com"
        make-backup-files nil
        create-lockfiles  nil
        erc-join-buffer 'window
        confirm-kill-processes nil
        gc-cons-threshold (* 50 1000 1000))

  (setq-default indent-tabs-mode nil
                tab-width 4)
#+end_src

** UI Changes

#+begin_src emacs-lisp
  (setq inhibit-startup-message t
        backup-inhibited t)


  (scroll-bar-mode -1) ; Disable visible scrollbar
  (tool-bar-mode -1) ; Disable the toolbar
  (tooltip-mode -1) ; Disable tooltips

  (menu-bar-mode -1) ; Disable the menu bar

  (setq scroll-up-aggressively nil
        scroll-down-aggressively nil
        scroll-conservatively 101
        display-line-numbers-type 'relative)

  (column-number-mode)
  (global-display-line-numbers-mode t)
  (setq-default fill-column 80)

  (electric-pair-mode +1)

  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  vterm-mode-hook
                  shell-mode-hook
                  eshell-mode-hook
                  mu4e-main-mode-hook
                  mu4e-headers-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (set-frame-parameter (selected-frame) 'alpha '(90 . 90))
  (add-to-list 'default-frame-alist '(alpha . (90 . 90)))
#+end_src

** Scrolling

#+begin_src emacs-lisp
  (setq scroll-up-aggressively nil)
  (setq scroll-down-aggressively nil)
  (setq scroll-conservatively 101)

  (setq scroll-step 1)
  (setq scroll-margin 8)
#+end_src

** Fonts

#+begin_src emacs-lisp
  (set-face-attribute 'default nil
                      :font "DejaVu Sans Mono"
                      :family "Monospace"
                      :height 97)
  (set-face-attribute 'variable-pitch nil
                      :font "DejaVu Sans"
                      :height 97)
  (set-face-attribute 'fixed-pitch nil
                      :font "DejaVu Sans Mono"
                      :family "Monospace"
                      :height 97)
#+end_src
** Background tranparency

#+begin_src emacs-lisp
  (setq background-transparancy '(90 . 90))
  (set-frame-parameter (selected-frame) 'alpha background-transparancy)
  (add-to-list 'default-frame-alist `(alpha . ,background-transparancy))
#+end_src

* Random Functions

some helper functions that i found and edited

#+begin_src emacs-lisp
  (defun move-region (start end n)
    "Move the current region up or down by N lines."
    (interactive "r\np")
    (let ((line-text (delete-and-extract-region start end)))
      (forward-line n)
      (let ((start (point)))
        (insert line-text)
        (setq deactivate-mark nil)
        (set-mark start))))

  (defun move-region-up (start end n)
    "Move the current line up by N lines."
    (interactive "r\np")
    (move-region start end (if (null n) -1 (- n))))

  (defun move-region-down (start end n)
    "Move the current line down by N lines."
    (interactive "r\np")
    (move-region start end (if (null n) 1 n)))

  (defun lookup-password (&rest keys)
    "search authinfo.gpg file for passwords"
    (let ((result (apply #'auth-source-search keys)))
      (if result
          (funcall (plist-get (car result) :secret))
        nil)))

  (defun erc-tls-oftc ()
    (interactive)
    (erc-tls :server "irc.oftc.net"
             :port "6697"))

  (defun astyle-buffer (&optional justify)
    (interactive)
    (let ((saved-line-number (line-number-at-pos)))
      (shell-command-on-region
       (point-min)
       (point-max)
       "astyle --style=kr"
       nil
       t)
      (goto-line saved-line-number)))

  (defun open-mpv (&optional link)
    (interactive "sEnter Link:")
    (async-shell-command (format "mpv %s" link) nil))
#+end_src

* Use-package and elpaca.el setup

Use elpaca.el as package manager and use-package for configuring packages.

#+begin_src emacs-lisp
  (defvar elpaca-installer-version 0.7)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                                :ref nil :depth 1
                                :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                                :build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
         (build (expand-file-name "elpaca/" elpaca-builds-directory))
         (order (cdr elpaca-order))
         (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
          (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                   ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                   ,@(when-let ((depth (plist-get order :depth)))
                                                       (list (format "--depth=%d" depth) "--no-single-branch"))
                                                   ,(plist-get order :repo) ,repo))))
                   ((zerop (call-process "git" nil buffer t "checkout"
                                         (or (plist-get order :ref) "--"))))
                   (emacs (concat invocation-directory invocation-name))
                   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                         "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                   ((require 'elpaca))
                   ((elpaca-generate-autoloads "elpaca" repo)))
              (progn (message "%s" (buffer-string)) (kill-buffer buffer))
            (error "%s" (with-current-buffer buffer (buffer-string))))
        ((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))

  (elpaca elpaca-use-package
    ;; Enable :elpaca use-package keyword.
    (elpaca-use-package-mode)
    ;; Assume :elpaca t unless otherwise specified.
    (setq elpaca-use-package-by-default t))

  ;; Block until current queue processed.
  (elpaca-wait)
#+end_src

** diminish

#+begin_src emacs-lisp
  (use-package diminish)
  (elpaca-wait)

  (diminish 'abbrev-mode)
  (auto-revert-mode 1)
  (diminish 'auto-revert-mode)
  (diminish 'eldoc-mode)
  (diminish 'isearch-mode)
  (diminish 'abbrev-mode)
#+end_src

* Efficiency
** recentf-mode

#+begin_src emacs-lisp
  (recentf-mode 1)
#+end_src

** No-littering

no-littering is used to get rid of annoying temp files.

#+begin_src emacs-lisp
  (use-package no-littering
    :config
    (add-to-list 'recentf-exclude
                 (recentf-expand-file-name no-littering-var-directory))
    (add-to-list 'recentf-exclude
                 (recentf-expand-file-name no-littering-etc-directory))
    (setq custom-file (no-littering-expand-etc-file-name "custom.el")))
#+end_src

** Gcmh

Garbage collector magic hack to stop lots of garbage collection.

#+begin_src emacs-lisp
  (use-package gcmh
    :diminish gcmh-mode
    :init
    (gcmh-mode 1))
#+end_src

* Completion
** which-key

which-key for descriptions when entering keybinds

#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 3))
#+end_src

** Vertico

Vertico used for completion for minibuffers.

#+begin_src emacs-lisp
  (use-package vertico
    :elpaca (vertico :files (:defaults "extensions/*"))
    :diminish vertico-mode
    :bind (:map vertico-map
                ("C-n" . vertico-next)
                ("C-p" . vertico-previous))
    :init
    (vertico-mode 1)
    ;; (vertico-flat-mode 1)
    (setq vertico-count 15))

  ;; Configure directory extension.
  (use-package vertico-directory
    :after vertico
    :elpaca nil
    ;; More convenient directory navigation commands
    :bind (:map vertico-map
                ("RET" . vertico-directory-enter)
                ("DEL" . vertico-directory-delete-char)
                ("M-DEL" . vertico-directory-delete-word))
    ;; Tidy shadowed file names
    :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))

  (use-package vertico-multiform
    :after vertico
    :elpaca nil
    :config
    (setq vertico-multiform-commands
          '((switch-to-buffer flat)
            (find-file flat)
            (dired flat)
            (man flat)
            (cd flat)
            (kill-buffer flat)
            (execute-extended-command flat)))
    (vertico-multiform-mode 1))
#+end_src

** Saving history

use save-hist-mode to get history saved for completion

#+begin_src emacs-lisp
  (use-package savehist
    :elpaca nil
    :diminish savehist-mode
    :init
    (savehist-mode 1))
#+end_src

** Marginalia

better results in minibuffers with marginalia

#+begin_src emacs-lisp
  (use-package marginalia
    :diminish marginalia-mode
    :after vertico
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :config
    (marginalia-mode))
#+end_src

** Consult

vertico enriched functions

#+begin_src emacs-lisp
  (use-package consult
    :config
    (setq completion-in-region-function
          (lambda (&rest args)
            (apply (if vertico-mode
                       #'consult-completion-in-region
                     #'completion--in-region)
                   args)))
    (consult-customize consult-buffer :preview-key "M-."))
#+end_src

** Orderless

better searching

#+begin_src emacs-lisp
  (use-package orderless
    :config
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides '((file (styles . (partial-completion))))))
#+end_src

** Embark

#+begin_src emacs-lisp
  (use-package embark
    :bind
    (("C-." . embark-act)
     ("C-;" . embark-dwim))
    :init
    (setq prefix-help-command #'embark-prefix-help-command)
    :config
    (setq embark--minimal-indicator-overlay nil)
    (setq embark-indicators (delq 'embark-mixed-indicator embark-indicators))
    (add-to-list 'embark-indicators #'embark-minimal-indicator))

  (use-package embark-consult
    :config
    (define-key embark-file-map (kbd "S") 'sudo-find-file))
#+end_src

** Spell Checking
*** flyspell

#+begin_src emacs-lisp
  (use-package flyspell
    :elpaca nil
    ;; :diminish flyspell-mode
    )
#+end_src

*** flyspell-correct

#+begin_src emacs-lisp
  (use-package flyspell-correct
    :after flyspell)
#+end_src

*** Consult-flyspell

#+begin_src emacs-lisp
  (use-package consult-flyspell
    :elpaca (consult-flyspell :host gitlab :repo "OlMon/consult-flyspell" :branch "master")
    :config
    ;; default settings
    (setq consult-flyspell-select-function (lambda () (flyspell-correct-at-point) (consult-flyspell))
          consult-flyspell-set-point-after-word t
          consult-flyspell-always-check-buffer nil))
#+end_src

* UI packages
** icons

#+begin_src emacs-lisp
  (use-package nerd-icons)
  (use-package all-the-icons)
#+end_src

** themes

#+begin_src emacs-lisp
  (use-package doom-themes
    :config
    (setq doom-themes-enable-bold t
          doom-themes-enable-italic t)
    (load-theme 'doom-vibrant t)
    (doom-themes-org-config))

  (use-package gruber-darker-theme
    :config
    (load-theme 'gruber-darker t))
#+end_src

** rainbow-delimiters

rainbow-delimiters for parens coloring

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :diminish rainbow-delimiters-mode
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Emojify-mode

#+begin_src emacs-lisp
  (use-package emojify
    :hook (after-init . global-emojify-mode)
    :config
    (add-hook 'prog-mode-hook #'(lambda () (emojify-mode -1))))
#+end_src

** Helpful

More descriptive describe functions from helpful.

#+begin_src emacs-lisp
  (use-package helpful
    :bind
    ([remap describe-command] . helpful-command)
    ([remap describe-function] . helpful-callable)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-key] . helpful-key))
#+end_src

** writeroom-mode
#+begin_src emacs-lisp
  (use-package writeroom-mode
    :diminish)
#+end_src

* Undo-tree

undo-tree for good undoing

#+begin_src emacs-lisp
  (use-package undo-tree
    :diminish undo-tree-mode
    :config
    (global-undo-tree-mode)
    (add-hook 'authinfo-mode-hook #'(lambda () (setq-local undo-tree-auto-save-history nil)))
    (defvar --undo-history-directory (concat user-emacs-directory "undotreefiles/")
      "Directory to save undo history files.")
    (unless (file-exists-p --undo-history-directory)
      (make-directory --undo-history-directory t))
    ;; stop littering with *.~undo-tree~ files everywhere
    (setq undo-tree-history-directory-alist `(("." . ,--undo-history-directory))))
#+end_src

* Other
** Avy

#+begin_src emacs-lisp
  (use-package avy)
#+end_src

** Ace Window

#+begin_src emacs-lisp
  (use-package ace-window
    :config
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)
          aw-scope 'frame))
#+end_src

** pdf-tools

#+begin_src emacs-lisp
  (use-package pdf-tools
    :elpaca nil
    :config
    (pdf-tools-install)
    (add-hook 'pdf-view-mode-hook #'pdf-view-fit-height-to-window))
#+end_src
** whitespace

#+begin_src emacs-lisp
  (use-package whitespace
    :elpaca nil
    :diminish whitespace-mode global-whitespace-mode
    :config
    (setq whitespace-style
          '(face tabs spaces trailing
                 space-before-tab newline indentation
                 space-after-tab space-mark tab-mark))
    (add-hook 'before-save-hook 'delete-trailing-whitespace)
    (add-hook 'prog-mode-hook (lambda () (whitespace-mode 1))))
#+end_src

* Evil

vim keybinds in emacs

#+begin_src emacs-lisp
  (use-package evil
    :diminish evil-mode
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    (setq evil-undo-system 'undo-tree)
    :config
    ;; (evil-mode 1)
    (define-key evil-normal-state-map (kbd "j") 'evil-next-visual-line)
    (define-key evil-normal-state-map (kbd "k") 'evil-previous-visual-line)
    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal)
    (define-key evil-window-map (kbd "d") '("close buffer & window" . close-window-and-buffer)))

  (use-package evil-collection
    :diminish evil-collection-unimpaired-mode
    :after evil
    :config
    (evil-collection-init))
#+end_src

* AucTeX

#+begin_src emacs-lisp
  (use-package tex
    :elpaca auctex)
#+end_src

* markdown

#+begin_src emacs-lisp
  (setq markdown-command "pandoc")
#+end_src

* Org mode
** general

general configuration of org-mode

#+begin_src emacs-lisp
  (use-package org
    :diminish org-mode
    :custom
    ((org-agenda-files (list "~/org/homework.org")))
    :config
    (setq org-ellipsis " ▾")
    (add-hook 'org-mode-hook '(lambda () (whitespace-mode -1)))

    (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.5))
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("cpp" . "src c++"))
    (setq org-capture-templates
          '(("h" "Homework" entry (file "~/org/homework.org")
             "* TODO %? \nDEADLINE: %^t" :refile-targets (("~/org/homework.org" :level 1)))))
    (setq org-agenda-prefix-format '((agenda . " %i %-12:c%?-12t% s%:T ")
                                    (todo . " %i %-12:c")
                                    (tags . " %i %-12:c%:T ")
                                    (search . " %i %-12:c%:T ")))
    (setq org-agenda-hide-tags-regexp ".*")

    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python . t))))

  (use-package org-superstar
    :diminish org-superstar-mode
    :after org
    :config
    (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
    (setq org-hide-leading-stars t)
    (require 'org-tempo))

  (elpaca-wait)
#+end_src

** Org Roam

#+begin_src emacs-lisp
  (use-package org-roam
    :elpaca t
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory "~/org/RoamNotes")
    (org-roam-completion-everywhere t)
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           :map org-mode-map
           ("C-M-i"    . completion-at-point))
    :config
    (org-roam-setup))
#+end_src

** Automatic tangle

Automatically tangle org config files into .el files.

#+begin_src emacs-lisp
  (defun org-babel-tangle-config ()
    (when (string-equal (buffer-file-name) (expand-file-name "~/.dotfiles/.config/emacs/Emacs.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'org-babel-tangle-config)))
#+end_src

* Dired

#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :elpaca nil
    :commands (dired dired-jump)
    :bind (:map dired-mode-map ("SPC" . dired-single-buffer))
    :config
    (setq dired-dwim-target t)
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-single-up-directory
      "l" 'dired-single-buffer))

  (use-package dired-single
    :commands (dired dired-jump))
#+end_src

* Mail
** mu4e

setup mu4e as email client.

#+begin_src emacs-lisp
  (use-package mu4e
    :elpaca nil
    :custom
    (mu4e-completing-read-function #'completing-read)
    :config
    (add-hook 'after-init-hook #'(lambda () (mu4e t)))
    ;; This is set to 't' to avoid mail syncing issues when using mbsync
    (setq mu4e-change-filenames-when-moving t)

    (setq mu4e-last-update-buffer " *mu4e-last-update*")

    (add-hook 'mu4e-compose-mode-hook #'(lambda () (setq-local undo-tree-auto-save-history nil)))
    (add-hook 'mu4e-compose-mode-hook #'(lambda () (flyspell-mode)))
    ;; Refresh mail using isync every 10 minutes
    (setq mu4e-update-interval (* 10 60)
          mu4e-get-mail-command "mbsync -a"
          mu4e-maildir "~/Maildir"

          message-send-mail-function 'smtpmail-send-it
          mu4e-compose-format-flowed t
          mu4e-context-policy 'pick-first
          mu4e-compose-context-policy 'ask-if-none
          mu4e-contexts
          (list
           (make-mu4e-context
            :name "gmail"
            :match-func
            (lambda (msg) (when msg (string-prefix-p "/gmail" (mu4e-message-field msg :maildir))))
            :vars '((user-mail-address . "rbeckettvt@gmail.com")
                    (user-full-name    . "Riley Beckett")
                    (smtpmail-smtp-server  . "smtp.gmail.com")
                    (smtpmail-smtp-service . 465)
                    (smtpmail-stream-type  . ssl)
                    (mu4e-drafts-folder  . "/gmail/Drafts")
                    (mu4e-sent-folder  . "/gmail/Sent Mail")
                    ;; (mu4e-refile-folder  . "/gmail/All Mail")
                    (mu4e-trash-folder  . "/gmail/Trash")
                    (message-signature . "Riley Beckett\nrbeckettvt@gmail.com")
                    (mu4e-maildir-shortcuts . ((:maildir "/gmail/INBOX"     :key ?i)
                                               (:maildir "/gmail/Sent Mail" :key ?s)
                                               (:maildir "/gmail/Trash"     :key ?t)
                                               (:maildir "/gmail/Drafts"    :key ?d)))))
                                               ;; (:maildir "/gmail/All Mail"  :key ?a)))))
           (make-mu4e-context
            :name "rpi"
            :match-func
            (lambda (msg) (when msg (string-prefix-p "/rpi" (mu4e-message-field msg :maildir))))
            :vars '((user-mail-address . "becker3@rpi.edu")
                    (user-full-name    . "Riley Beckett")
                    (smtpmail-smtp-server  . "smtp.office365.com")
                    (smtpmail-smtp-service . 587)
                    (smtpmail-stream-type  . starttls)
                    (mu4e-drafts-folder  . "/rpi/Drafts")
                    (mu4e-sent-folder  .   "/rpi/Send Items")
                    (mu4e-refile-folder  . "/rpi/Archive")
                    (mu4e-trash-folder  .  "/rpi/Deleted Items")
                    (message-signature . "Riley Beckett\nbecker3@rpi.edu")
                    (mu4e-maildir-shortcuts . ((:maildir "/rpi/Inbox"         :key ?i)
                                               (:maildir "/rpi/Sent Items"    :key ?s)
                                               (:maildir "/rpi/Deleted Items" :key ?t)
                                               (:maildir "/rpi/Drafts"        :key ?d)
                                               (:maildir "/rpi/Archive"       :key ?a))))))))

  (use-package mu4e-alert
    :config
    (mu4e-alert-set-default-style 'libnotify)
    (add-hook 'after-init-hook #'mu4e-alert-enable-notifications))
  (elpaca-wait)
#+end_src

** pinentry

#+begin_src emacs-lisp
  (use-package pinentry)
#+end_src
* Elfeed

#+begin_src emacs-lisp
  (defun elfeed-video (&optional use-generic-p)
    "watch video link"
    (interactive "P")
    (let ((entries (elfeed-search-selected)))
      (dolist (e entries)
        (and (elfeed-tagged-p 'video e) (elfeed-entry-link e)
         (progn (elfeed-untag e 'unread)
                (open-mpv (elfeed-entry-link e)))))
      (mapc #'elfeed-search-update-entry entries)
      (unless (use-region-p) (forward-line))))

  (defun elfeed-podcast (&optional use-generic-p)
    "run podcast"
    (interactive "P")
    (let ((entries (elfeed-search-selected)))
      (dolist (e entries)
        (and (elfeed-tagged-p 'podcast e) (elfeed-entry-enclosures e)
         (progn (elfeed-untag e 'unread)
                (open-mpv (caar (elfeed-entry-enclosures e))))))
      (mapc #'elfeed-search-update-entry entries)
      (unless (use-region-p) (forward-line))))

  (use-package elfeed
    :bind (:map elfeed-search-mode-map
                ("v" . #'elfeed-video)
                ("P" . #'elfeed-podcast))
    :config
    (setq elfeed-log-buffer-name " *elfeed-log*")
    (add-hook 'elfeed-new-entry-hook
              (elfeed-make-tagger :feed-url "youtube\\.com" :add '(video youtube)))
    (add-hook 'elfeed-new-entry-hook
              (lambda (entry) (when (elfeed-entry-enclosures entry) (elfeed-tag entry 'podcast))))
    (setq elfeed-feeds
          '(("https://www.youtube.com/feeds/videos.xml?channel_id=UCld68syR8Wi-GY_n4CaoJGA" linux)
            ("https://www.youtube.com/feeds/videos.xml?channel_id=UCUyeluBRhGPCW4rPe_UvBZQ" programming)
            ("https://www.reddit.com/r/emacs/.rss" reddit emacs)
            ("https://anchor.fm/s/149fd51c/podcast/rss" linux)
            ("https://www.reddit.com/r/unixporn/.rss" reddit))))
#+end_src

* Programming
** multiple cursors

#+begin_src emacs-lisp
  (use-package multiple-cursors
    :bind (:map global-map
                ("C->" . 'mc/mark-next-like-this)
                ("C-<" . 'mc/mark-previous-like-this)
                ("C-c C->" . 'mc/mark-all-like-this)
                :map mc/keymap
                ("<return>" . nil)))
#+end_src

** Magit

best git frontend ever

#+begin_src emacs-lisp
  (use-package transient)
  (use-package magit
    :bind (("C-x g" . magit-status))
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src

** flycheck

give good errors when programming

#+begin_src emacs-lisp
  (use-package flycheck
    :diminish flycheck-mode
    :config
    (setq flycheck-error-message-buffer " *Flycheck error messages*")
    (setq-default flycheck-emacs-lisp-load-path 'inherit)
    (global-flycheck-mode 1)
    (add-hook 'c-mode-hook '(lambda () (flycheck-mode -1))))
#+end_src

** Lsp-mode

Language Server Protocol Modes also describe keybinds

#+begin_src emacs-lisp
  (use-package lsp-mode
    :init
    (setq lsp-keymap-prefix "C-c l"
          lsp-headerline-breadcrumb-enable nil
          lsp-headerline-breadcrumb-icons-enable nil
          lsp-keep-workspace-alive nil
          lsp-completion-provider :none
          lsp-enable-snippet nil
          lsp-lens-enable nil)
    :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
           ;; (c-mode . lsp)
           (python-mode . lsp-deferred)
           ;; if you want which-key integration
           (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

  (use-package lsp-ui
    :after lsp
    :diminish lsp-lens-mode
    :config
    (setq lsp-ui-sideline-update-mode 'point)
    (setq lsp-ui-sideline-show-diagnostics t)
    (setq lsp-ui-sideline-ignore-duplicate t))

  (use-package lsp-java
    :hook
    (java-mode . lsp))

  (use-package consult-lsp
    :after lsp)

  (defun lsp-bind ()
    (interactive)
    (define-key myemacs-leader-map (kbd "l") lsp-command-map)
    (map! "l" :desc "lsp")
    (map! "l=" :desc "formatting")
    (map! "lF" :desc "folders")
    (map! "lG" :desc "peek")
    (map! "lT" :desc "toggle")
    (map! "la" :desc "code actions")
    (map! "lg" :desc "goto")
    (map! "lh" :desc "help")
    (map! "lr" :desc "refactor")
    (map! "lu" :desc "ui")
    (map! "lw" :desc "workspaces")
    (define-key myemacs-leader-map (kbd "lug") '("ui doc glance" . lsp-ui-doc-glance)))
  (add-hook 'lsp-mode-hook 'lsp-bind)
#+end_src

** corfu-mode

use corfu for completion coming from lsp

#+begin_src emacs-lisp
  (use-package corfu
    :custom
    (corfu-auto t)
    (corfu-auto-delay 1)
    (corfu-auto-prefix 1)
    (corfu-separator ?\s)
    (corfu-preview-current nil)
    :config
    (global-corfu-mode)
    (bind-key (kbd "s-SPC") 'corfu-insert-separator 'corfu-map))

  (use-package corfu-terminal
    :diminish corfu-terminal-mode
    :elpaca (corfu-terminal :repo "https://codeberg.org/akib/emacs-corfu-terminal.git")
    :config
    (unless (display-graphic-p)
      (corfu-terminal-mode +1)))

  (use-package cape
    ;; Bind dedicated completion commands
    ;; Alternative prefix keys: C-c p, M-p, M-+, ...
    :init
    ;; Add to the global default value of `completion-at-point-functions' which is
    ;; used by `completion-at-point'.  The order of the functions matters, the
    ;; first function returning a result wins.  Note that the list of buffer-local
    ;; completion functions takes precedence over the global list.
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-elisp-block)
    (add-to-list 'completion-at-point-functions #'cape-elisp-symbol)
    (add-to-list 'completion-at-point-functions #'cape-history)
    (add-to-list 'completion-at-point-functions #'cape-keyword)
    ;; (add-to-list 'completion-at-point-functions #'cape-tex)
    ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
    ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
    ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
    ;;(add-to-list 'completion-at-point-functions #'cape-dict)
    ;;(add-to-list 'completion-at-point-functions #'cape-line)
    )
#+end_src

** lsp-latex

#+begin_src emacs-lisp
  (use-package lsp-latex
    :elpaca (lsp-latex.el :host github :repo "ROCKTAKEY/lsp-latex"))
#+end_src

** Formatting

#+begin_src emacs-lisp
  (use-package clang-format)
  (use-package clang-format+)
#+end_src

** Highlighing
*** Tree-sitter

tree-sitter used for very detailed syntax highlighting

#+begin_src emacs-lisp
  (use-package tree-sitter
    :diminish tree-sitter-mode
    :config
    (global-tree-sitter-mode 1))
  (use-package tree-sitter-langs)
#+end_src

*** Higlight-quoted

elisp ' highlighting

#+begin_src emacs-lisp
  (use-package highlight-quoted
    :diminish highlight-quoted-mode
    :hook (emacs-lisp-mode . highlight-quoted-mode))
#+end_src

*** hl-todo
** glsl-mode.el

#+begin_src emacs-lisp
  (use-package glsl-mode
    :diminish
    :elpaca (glsl-mode :host github :repo "jimhourihan/glsl-mode"))
#+end_src

** haskell

#+begin_src emacs-lisp
  (use-package lsp-haskell
    :hook
    (haskell-mode . lsp))
#+end_src

** kotlin

#+begin_src emacs-lisp
  (use-package kotlin-mode)
#+end_src

** gradle-mode

#+begin_src emacs-lisp
  (use-package gradle-mode
    :diminish)
#+end_src

** nasm-mode

#+begin_src emacs-lisp
  (use-package nasm-mode
    :hook
    (asm-mode . nasm-mode))
#+end_src

** rust

#+begin_src emacs-lisp
  (use-package rust-mode
    :diminish
    :hook (rust-mode . lsp))

  (use-package cargo
    :diminish cargo-mode cargo-minor-mode
    :hook (rust-mode . cargo-minor-mode))

  (use-package flycheck-rust
    :config (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))
#+end_src

** asm

#+begin_src emacs-lisp
  (defun my-asm-mode-hook ()
    (defun asm-calculate-indentation ()
      (or
       ;; Flush labels to the left margin.
                                          ;   (and (looking-at "\\(\\.\\|\\sw\\|\\s_\\)+:") 0)
       (and (looking-at "[.@_[:word:]]+:") 0)
       ;; Same thing for `;;;' comments.
       (and (looking-at "\\s<\\s<\\s<") 0)
       ;; %if nasm macro stuff goes to the left margin
       (and (looking-at "%") 0)
       (and (looking-at "c?global\\|section\\|default\\|align\\|INIT_..X") 0)
       ;; Simple `;' comments go to the comment-column
                                          ;(and (looking-at "\\s<\\(\\S<\\|\\'\\)") comment-column)
       ;; The rest goes at column 4
       (or 4))))

  (add-hook 'asm-mode-hook #'my-asm-mode-hook)
#+end_src

** Other Programming modes

#+begin_src emacs-lisp
  (use-package yaml-mode)

#+end_src

** Simple C mode

#+begin_src emacs-lisp
  (use-package simpc-mode
    :elpaca (simpc-mode.el :host github :repo "rexim/simpc-mode")
    :config
    (add-hook 'simpc-mode-hook (lambda () (interactive) (setq-local fill-paragraph-function 'astyle-buffer)))
    (add-hook 'c-mode-hook 'simpc-mode))
#+end_src

** Terminals

configuration for terminals

*** vterm

vterm is a terminal emulator in emacs

#+begin_src emacs-lisp
  (use-package vterm
    :diminish vterm-mode
    :commands vterm
    :config
    (setq vterm-max-scrollback 10000)
    (setq vterm-kill-buffer-on-exit t))
#+end_src

*** eshell

shell written in elisp also can run elisp

#+begin_src emacs-lisp
  (defun configure-eshell ()
    ;; Save command history when commands are entered
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

    ;; Truncate buffer for performance
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

    (setq eshell-prompt-function
          (lambda ()
            (let* ((start "[")
                   (center (concat
                            (getenv "USER")
                            "@"
                            (string-trim
                             (with-temp-buffer
                               (insert-file "/etc/hostname")
                               (buffer-string)))))
                   (dir (let* ((lst (split-string (eshell/pwd) "/" t))
                               (i (1- (length lst)))
                               (str (nth i lst)))
                          str))
                   (end (concat "]" (if (= (user-uid) 0) "# " "$ ")))
                   (full (concat start center " " dir end)))
              (add-face-text-property 0 (length start) 'default t full)
              (add-face-text-property (length start) (+ (length start) (length center)) 'nerd-icons-green t full)
              (add-face-text-property
               (length (concat start " " center)) (+ (length dir) (length (concat start center " ")))
               'nerd-icons-blue t full)
              (add-face-text-property
               (length (concat start center " " dir)) (+ (length end) (length (concat start center " " dir)))
               'default t full)
              full)))

    (setq eshell-history-size         10000
          eshell-buffer-maximum-lines 10000
          eshell-hist-ignoredups t
          eshell-scroll-to-bottom-on-input t))

  (use-package eshell
    :elpaca nil
    :diminish eshell-mode
    :hook (eshell-first-time-mode . configure-eshell)
    :config
    (with-eval-after-load 'esh-opt
      (setq eshell-destroy-buffer-when-process-dies t)
      (setq eshell-visual-commands '("htop"))
      (setq eshell-prompt-regexp "^.*\]$ ")))
#+end_src

* Calendar

#+begin_src emacs-lisp
  (use-package calendar
    :elpaca nil
    :config
    (defun calendar-insert-date ()
      "Capture the date at point, exit the Calendar, insert the date."
      (interactive)
      (seq-let (month day year) (save-match-data (calendar-cursor-to-date))
        (calendar-exit)
        (insert (format "%02d/%02d/%d" month day year))))

    (define-key calendar-mode-map (kbd "M-I") 'calendar-insert-date))

  (elpaca-wait)
#+end_src

* Keybinds

#+begin_src emacs-lisp
  (global-unset-key (kbd "C-z"))
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (global-set-key (kbd "C-/") #'undo-tree-undo)
  (global-set-key (kbd "M-/") #'undo-tree-redo)
  (global-set-key (kbd "M-p") #'move-region-up)
  (global-set-key (kbd "M-n") #'move-region-down)
  (global-set-key (kbd "C-c v") #'avy-goto-char-timer)
  (global-set-key (kbd "C-c s") #'consult-flyspell)
  (global-set-key (kbd "C-c r") #'recompile)
  (global-set-key (kbd "C-c m") #'mu4e)
  (global-set-key (kbd "C-c f") #'elfeed)
  (global-set-key (kbd "C-c c d") #'cape-dabbrev)
  (global-set-key (kbd "C-c c f") #'cape-file)
  (global-set-key (kbd "C-c c b") #'cape-elisp-block)
  (global-set-key (kbd "C-c c s") #'cape-elisp-symbol)
  (global-set-key (kbd "C-c c h") #'cape-history)
  (global-set-key (kbd "C-c c k") #'cape-keyword)
  (global-set-key (kbd "C-c o a") #'org-agenda)
  (global-set-key (kbd "C-c o d") #'org-deadline)
  (global-set-key (kbd "C-c o s") #'org-schedule)
  (global-set-key (kbd "C-c o c") #'org-capture)
#+end_src
