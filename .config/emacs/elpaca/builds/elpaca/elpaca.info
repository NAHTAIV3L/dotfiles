This is elpaca.info, produced by makeinfo version 7.0.3 from
elpaca.texi.

INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Elpaca: (elpaca).     Elisp Package Manager.
END-INFO-DIR-ENTRY


File: elpaca.info,  Node: Top,  Next: Installation,  Up: (dir)

Elpaca User Manual
******************

Elpaca is an elisp package manager.  It allows users to find, install,
update, and remove third-party packages for Emacs.  It is a replacement
for the built-in Emacs package manager, package.el.

     Copyright (C) 2022-2023 Nicholas Vollmer

     You can redistribute this document and/or modify it under the terms
     of the GNU General Public License as published by the Free Software
     Foundation, either version 3 of the License, or (at your option)
     any later version.

     This document is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     General Public License for more details.

* Menu:

* Installation::                 Installing Elpaca.
* Usage::                        Using Elpaca.
* UI::                           Elpaca’s package management UI.

— The Detailed Node Listing —

Installation

* Requirements::                 The required software environment for Elpaca.
* Installer::                    A script responsible for installing Elpaca.

Usage

* Quick Start::
* Basic concepts::
* use-package Integration::

Basic concepts

* Recipes::                      The recipe format description.
* Menus::                        Where recipes come from.
* Orders::                       Incomplete, or custom recipes.
* Queues::                       Order processing groups.
* Installing Packages::

Recipes

* host |fetcher: host | fetcher.
* repo::
* branch::
* tag::
* ref::
* pin::
* depth::
* files::
* protocol::
* remotes::
* main::
* build::
* inherit::
* pre-build::
* post-build::
* autoloads::
* Inheritance precedence::
* elpaca-recipe-functions::

Menus

* elpaca-menu-functions::

Orders

* elpaca-order-functions::

UI

* Searching::                    How to search within the Elpaca UI.
* Search tags::



File: elpaca.info,  Node: Installation,  Next: Usage,  Prev: Top,  Up: Top

1 Installation
**************

* Menu:

* Requirements::                 The required software environment for Elpaca.
* Installer::                    A script responsible for installing Elpaca.


File: elpaca.info,  Node: Requirements,  Next: Installer,  Up: Installation

1.1 Requirements
================

Elpaca requires:
   • Emacs >= 27.1
   • git (minimum version TBD)


File: elpaca.info,  Node: Installer,  Prev: Requirements,  Up: Installation

1.2 Installer
=============

To install Elpaca, add the following elisp to your init.el.  It must
come before any calls to other Elpaca functions/macros.  This will clone
Elpaca into your ‘user-emacs-directory’ under the ‘elpaca’ subdirectory.
It then builds and activates Elpaca.

     (defvar elpaca-installer-version 0.5)
     (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
     (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
     (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
     (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                                   :ref nil
                                   :files (:defaults (:exclude "extensions"))
                                   :build (:not elpaca--activate-package)))
     (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
            (build (expand-file-name "elpaca/" elpaca-builds-directory))
            (order (cdr elpaca-order))
            (default-directory repo))
       (add-to-list 'load-path (if (file-exists-p build) build repo))
       (unless (file-exists-p repo)
         (make-directory repo t)
         (when (< emacs-major-version 28) (require 'subr-x))
         (condition-case-unless-debug err
             (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                      ((zerop (call-process "git" nil buffer t "clone"
                                            (plist-get order :repo) repo)))
                      ((zerop (call-process "git" nil buffer t "checkout"
                                            (or (plist-get order :ref) "--"))))
                      (emacs (concat invocation-directory invocation-name))
                      ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                            "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                      ((require 'elpaca))
                      ((elpaca-generate-autoloads "elpaca" repo)))
                 (progn (message "%s" (buffer-string)) (kill-buffer buffer))
               (error "%s" (with-current-buffer buffer (buffer-string))))
           ((error) (warn "%s" err) (delete-directory repo 'recursive))))
       (unless (require 'elpaca-autoloads nil t)
         (require 'elpaca)
         (elpaca-generate-autoloads "elpaca" repo)
         (load "./elpaca-autoloads")))
     (add-hook 'after-init-hook #'elpaca-process-queues)
     (elpaca `(,@elpaca-order))

   • Windows users must be able to create symlinks(1), or enable
     ‘elpaca-no-symlink-mode’

     ;; Uncomment for systems which cannot create symlinks:
     ;; (elpaca-no-symlink-mode)

   You’ll also want to disable package.el in your early-init file(2):

     (setq package-enable-at-startup nil)

   And remove anything related to package.el in your init file.  e.g.
calls to ‘(package-activate-all)’.

   ---------- Footnotes ----------

   (1) windows symlink guide
(https://www.howtogeek.com/16226/complete-guide-to-symbolic-links-symlinks-on-windows-or-linux/)

   (2) early-init file
(https://www.gnu.org/software/emacs/manual/html_node/emacs/Early-Init-File.html)


File: elpaca.info,  Node: Usage,  Next: UI,  Prev: Installation,  Up: Top

2 Usage
*******

* Menu:

* Quick Start::
* Basic concepts::
* use-package Integration::


File: elpaca.info,  Node: Quick Start,  Next: Basic concepts,  Up: Usage

2.1 Quick Start
===============

Operation                               UI (keys apply in elpaca-ui-mode)    completing-read interface commands
----------------------------------------------------------------------------------------------------------------------------
Finding Packages                        ‘M-x elpaca-manager’                 ‘elpaca-try’
Trying Packages (for current session)   ‘i’ ‘x’                              ‘elpaca-try’
Updating Packages                       ‘u’ ‘x’                              ‘elpaca-update’ or ‘M-x’ ‘elpaca-update-all’
Rebuilding Packages                     ‘r’ ‘x’                              ‘elpaca-rebuild’
Deleting Packages                       ‘d’ ‘x’                              ‘elpaca-delete’
View Package Logs                       ‘l’ filters log to current package   ‘elpaca-log’
View Package Statuses                   ‘t’ show most recent log entries     ‘elpaca-status’
Visit Package Repository Directory      ‘v’                                  ‘elpaca-visit’
Visit Package Build Directory           ‘C-u’ ‘v’                            ‘C-u’ ‘elpaca-visit’
Browse Package Website                  ‘b’                                  ‘elpaca-browse’

   Packages installed via the above commands are not loaded on
subsequent Emacs sessions (after restarting).  To install and load
packages persistently (across Emacs restarts), use the ‘elpaca’ macro in
your init file after the installer.  (*note installer: Installer.)

   For example:

     ;; Install use-package support
     (elpaca elpaca-use-package
       ;; Enable :elpaca use-package keyword.
       (elpaca-use-package-mode)
       ;; Assume :elpaca t unless otherwise specified.
       (setq elpaca-use-package-by-default t))

     ;; Block until current queue processed.
     (elpaca-wait)

     ;;When installing a package which modifies a form used at the top-level
     ;;(e.g. a package which adds a use-package key word),
     ;;use `elpaca-wait' to block until that package has been installed/configured.
     ;;For example:
     ;;(use-package general :demand t)
     ;;(elpaca-wait)

     ;; Expands to: (elpaca evil (use-package evil :demand t))
     (use-package evil :demand t)

     ;;Turns off elpaca-use-package-mode current declartion
     ;;Note this will cause the declaration to be interpreted immediately (not deferred).
     ;;Useful for configuring built-in emacs features.
     (use-package emacs :elpaca nil :config (setq ring-bell-function #'ignore))

     ;; Don't install anything. Defer execution of BODY
     (elpaca nil (message "deferred"))

   *IMPORTANT*:

   Elpaca installs and activates packages asynchronously.  Elpaca
processes its package queues _after_ Emacs reads the init file.(1)
Consider the following example:

     (elpaca nil (message "First")) ; Queue First
     (message "Second") ; Second messaged
     (elpaca nil (message "Third")) ; Queue Third
     (elpaca-process-queues) ; Process queue: First messaged, Third messaged.

   “Second” will be message _before_ “First” and “Third”.  Defer forms
which are dependent on deferred forms.  Wrapping the “Second” message in
an ‘elpaca’ declaration will fix the above example:

     (elpaca nil (message "First"))  ; Queue First
     (elpaca nil (message "Second")) ; Queue Second
     (elpaca nil (message "Third"))  ; Queue Third
     (elpaca-process-queues) ; Process queue: First, Second, Third messaged.

   Add any configuration which relies on ‘after-init-hook’,
‘emacs-startup-hook’, etc to ‘elpaca-after-init-hook’ so it runs after
Elpaca has activated all queued packages.  This includes loading of
saved customizations.  e.g.

     (setq custom-file (expand-file-name "customs.el" user-emacs-directory))
     (add-hook 'elpaca-after-init-hook (lambda () (load custom-file 'noerror)))

   ---------- Footnotes ----------

   (1) This is so Elpaca can build a proper dependency tree.  It ensures
packages the user explicitly requests are not preempted by dependencies
of other packages.


File: elpaca.info,  Node: Basic concepts,  Next: use-package Integration,  Prev: Quick Start,  Up: Usage

2.2 Basic concepts
==================

The ‘elpaca-example’ macro in the following examples reduces verbosity.
It is not part of Elpaca.

     (defun elpaca-example-sort-plist (plist)
       "Return copy of PLIST with :package followed by lexically sorted key/val pairs."
       `(:package ,(plist-get plist :package)
                  ,@(cl-loop for k in (cl-sort (cl-loop for key in plist by #'cddr
                                                        unless (eq key :package) collect key)
                                               #'string< :key #'symbol-name)
                             append (list k (plist-get plist k)))))

     (defmacro elpaca-example (&rest body)
       "Execute BODY with a clean elpaca environment."
       `(let (elpaca-cache-menu-items
              elpaca-order-functions
              elpaca-recipe-functions
              elpaca--menu-items-cache
              (elpaca-menu-functions '(elpaca-example-menu)))
          ;; Prevent cache corruption
          (cl-letf (((symbol-function 'elpaca--write-menu-cache) #'ignore))
            (elpaca-example-sort-plist ,@body))))

   Examples will use the following recipe menu.  (*note recipe menu:
Menus.) It offers a “burger” package recipe:

     (defun elpaca-example-menu (_)
       '((burger . (:recipe ( :buns 2
                              :lettuce t
                              :tomato t
                              :beef t
                              :cheese t
                              :cook well-done
                              :from elpaca-example-menu)))))

* Menu:

* Recipes::                      The recipe format description.
* Menus::                        Where recipes come from.
* Orders::                       Incomplete, or custom recipes.
* Queues::                       Order processing groups.
* Installing Packages::


File: elpaca.info,  Node: Recipes,  Next: Menus,  Up: Basic concepts

2.2.1 Recipes
-------------

A recipe provides Elpaca with the metadata necessary to build and
install a package.  It is a list of the form:

     (ITEM . PROPS)

   _ITEM_ is a symbol uniquely identifying the package.  _PROPS_ is a
plist with any of the following recipe keywords:

* Menu:

* host |fetcher: host | fetcher.
* repo::
* branch::
* tag::
* ref::
* pin::
* depth::
* files::
* protocol::
* remotes::
* main::
* build::
* inherit::
* pre-build::
* post-build::
* autoloads::
* Inheritance precedence::
* elpaca-recipe-functions::


File: elpaca.info,  Node: host | fetcher,  Next: repo,  Up: Recipes

2.2.1.1 :host | :fetcher
........................

A symbol or string representing the hosting service of the repository.

     (example :host github)
     (example :fetcher gitlab)
     (example :host "www.example.com")


File: elpaca.info,  Node: repo,  Next: branch,  Prev: host | fetcher,  Up: Recipes

2.2.1.2 :repo
.............

A string of the form ‘USER/REPO’ when used with the ‘:host’ keyword; a
local file path or remote URL when ‘:host’ is not used.

     (example :host github :repo "user/example") ;;downloaded from github

     (local :repo "~/repos/local/") ;;cloned from local filesystem

     (remote :repo "https://foo.example/example.git") ;;remote clone


File: elpaca.info,  Node: branch,  Next: tag,  Prev: repo,  Up: Recipes

2.2.1.3 :branch
...............

The repository branch to check out when installing the package.

     (example :host github :repo "user/example" :branch "main")


File: elpaca.info,  Node: tag,  Next: ref,  Prev: branch,  Up: Recipes

2.2.1.4 :tag
............

The tag to check out when installing the package.

     (example :host github :repo "user/example" :tag "v1.0")


File: elpaca.info,  Node: ref,  Next: pin,  Prev: tag,  Up: Recipes

2.2.1.5 :ref
............

The git ref(1) to check out when installing the package.

     (example :host github :repo "user/example" :ref "a76ca0a") ;; Check out a specific commit.

   ---------- Footnotes ----------

   (1) git ref
(https://git-scm.com/book/en/v2/Git-Internals-Git-References)


File: elpaca.info,  Node: pin,  Next: depth,  Prev: ref,  Up: Recipes

2.2.1.6 :pin
............

When non-nil, ignore the package during update commands.

     (example :pin t)


File: elpaca.info,  Node: depth,  Next: files,  Prev: pin,  Up: Recipes

2.2.1.7 :depth
..............

The package repository’s history depth.

     (example :depth 1) ;; Shallow clone with history truncated to 1 commit.
     (example :depth nil) ;; Full repository clone.


File: elpaca.info,  Node: files,  Next: protocol,  Prev: depth,  Up: Recipes

2.2.1.8 :files
..............

The files linked from the package’s repository to its build directory.

   Each element of the list is either:
   • The symbol ‘:defaults’, which expands to
     ‘elpaca-default-files-directive’.
   • A string naming files or folders.  Shell glob patterns may be used
     to match multiple files.
   • A list starting with the ‘:exclude’ keyword.  The remaining
     elements are not linked.

     (example :files (:defaults "extensions/*")) ;; Link everything in the extensions folder.
     (example :files (:defaults (:exclude "*.c"))) ;; Exclude all files with the "c" file extension.


File: elpaca.info,  Node: protocol,  Next: remotes,  Prev: files,  Up: Recipes

2.2.1.9 :protocol
.................

The protocol to use when cloning repositories.

   The value must be a symbol, either ‘https’ or ‘ssh’.

     (example :protocol https) ; Use the https protocol.
     (example :protocol ssh) ; Use the ssh protocol.


File: elpaca.info,  Node: remotes,  Next: main,  Prev: protocol,  Up: Recipes

2.2.1.10 :remotes
.................

Configures the repository remotes(1).

   The value must be a single remote spec or a list of remote specs.
The first remote given will have its ref checked out when cloning the
repository.  A spec may be a string to rename the default remote.  The
following will rename the cloned remote (usually “origin” by git
convention) to “upstream”:

     (example :remotes "upstream")

   In order to add a another remote, a spec may be a list of the form:

     ("NAME" [PROPS])

   _NAME_ is a string indicating the name of the remote.  _PROPS_ is an
optional plist used to override inherited recipe keywords.

   For example:

     (example :host github :repo "upstream/example"
              :remotes ("fork" :repo "fork/zenburn-emacs"))

   Will add a remote named fork which points to a repository hosted on
the same forge as the upstream remote.  The following does the same
above, additionally adding a third remote at a different forge.

     (example :host github :repo "upstream/example"
              :remotes (("fork" :repo "fork/zenburn-emacs") ; :host github inherited from above
                        ("other" :host gitlab :repo "other/zenburn-emacs")))

   ---------- Footnotes ----------

   (1) remotes
(https://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes)


File: elpaca.info,  Node: main,  Next: build,  Prev: remotes,  Up: Recipes

2.2.1.11 :main
..............

The name of the main elisp file.  When provided this can speed up the
process of cloning and loading a package’s dependencies.  When declared
‘nil’, skip dependency check.

     (example :main "example.el")

     (example :main nil)


File: elpaca.info,  Node: build,  Next: inherit,  Prev: main,  Up: Recipes

2.2.1.12 :build
...............

A list of build steps, nil or t.  To remove steps from
‘elpaca-default-build-steps’ by starting the list with the ‘:not’
keyword.

     (example :build (:not elpaca--byte-compile))


File: elpaca.info,  Node: inherit,  Next: pre-build,  Prev: build,  Up: Recipes

2.2.1.13 :inherit
.................

When non-nil, inherit _PROPS_ from ‘elpaca-order-functions’ and possibly
‘elpaca-menu-functions’.  For example, without inheritance:

     (elpaca-example (elpaca-recipe '(burger :inherit nil)))

   returns the recipe as declared:

     (:package "burger" :inherit nil)

   With inheritance enabled:

     (elpaca-example (elpaca-recipe '(burger :inherit t)))

     (:package "burger" :beef t :buns 2 :cheese t :cook well-done :from
               elpaca-example-menu :inherit t :lettuce t :tomato t)

   the elpaca-example-menu provides the rest of the “burger” recipe.

   The value may also be a menu symbol or list of menu symbols.  This is
a per-recipe way of setting ‘elpaca-menu-functions’.

     (elpaca-example (elpaca-recipe '(burger :inherit elpaca-example-menu)))

     (:package "burger" :beef t :buns 2 :cheese t :cook well-done :from
               elpaca-example-menu :inherit elpaca-example-menu :lettuce t :tomato t)


File: elpaca.info,  Node: pre-build,  Next: post-build,  Prev: inherit,  Up: Recipes

2.2.1.14 :pre-build
...................

Commands and/or elisp evaluated prior to ‘:build’ steps.  Each command
is either an elisp form or a list of strings executed in a shell context
of the form:

     ("executable" "argument"...)

   For example:

     (elpaca (example :pre-build (("configure") ("make" "install"))))


File: elpaca.info,  Node: post-build,  Next: autoloads,  Prev: pre-build,  Up: Recipes

2.2.1.15 :post-build
....................

The same as ‘:pre-build’, but run just before activating a package.

     (elpaca (example :post-build (message "activate next")))


File: elpaca.info,  Node: autoloads,  Next: Inheritance precedence,  Prev: post-build,  Up: Recipes

2.2.1.16 :autoloads
...................

The name of the file the package’s autoload file.  When ‘nil’, autoload
loading and generation are disabled for the package.  When ‘t’, the
default autoload file is generated/loaded (‘PACKAGE-NAME-autoloads.el’).
The value may also be a string which is expanded relative to the
package’s build directory.  e.g.  ‘"org-loaddefs.el"’.


File: elpaca.info,  Node: Inheritance precedence,  Next: elpaca-recipe-functions,  Prev: autoloads,  Up: Recipes

2.2.1.17 Inheritance precedence
...............................

The following list shows the order of precedence for inheritance.  Each
item takes precedence over the items which follow it.

   • elpaca-recipe-functions
   • declared recipe
   • elpaca-order-functions
   • elpaca-menu-functions

     (elpaca-example
      (let ((elpaca-recipe-functions (lambda (recipe) '(:from recipe-functions :cheese extra)))
            (elpaca-order-functions (lambda (order) '(:from order-functions :tomato nil))))
        (elpaca-recipe '(burger))))

     (:package "burger" :beef t :buns 2 :cheese extra :cook well-done :from
               recipe-functions :lettuce t :tomato nil)


File: elpaca.info,  Node: elpaca-recipe-functions,  Prev: Inheritance precedence,  Up: Recipes

2.2.1.18 elpaca-recipe-functions
................................

The abnormal hook ‘elpaca-recipe-functions’ runs via
‘run-hook-with-args-until-success’ just before installing the package.
Each function in the list should accept the current recipe as its sole
argument and return either nil or a plist.  The first function to return
a plist has its return value merged with the current recipe.

   This is useful if you want to guarantee the values of certain
keywords despite allowing recipe inheritance.

     (elpaca-example
      (let ((elpaca-recipe-functions
             '((lambda (recipe)
                 "If a recipe calls for cheese, I always want extra."
                 (when (plist-get recipe :cheese) (list :cheese 'extra))))))
        (elpaca-recipe '(burger))))

     (:package "burger" :beef t :buns 2 :cheese extra :cook well-done :from
               elpaca-example-menu :lettuce t :tomato t)


File: elpaca.info,  Node: Menus,  Next: Orders,  Prev: Recipes,  Up: Basic concepts

2.2.2 Menus
-----------

A menu is a function which returns an alist of the form:
     ((ITEM . DATA)...)

   _ITEM_ is a symbol uniquely identifying a package.  _DATA_ is a plist
of package metadata.  _DATA_ must contain the following keywords:

:recipe
     A package recipe.  (*note recipe: Recipes.)
:source
     A string naming the menu.

   It may also provide additional information about a package.  For
example, the Elpaca UI utilizes the following keywords when present:

:url
     The package’s website URL.
:description
     A description of the package.
:date 
     The time of package’s last update.

   The function must accept one of the following _REQUEST_ symbols as an
argument:

index
     Return the alist described above
update
     update the menu’s alist.

     (defun elpaca-menu-minimal (request_)
       "A minimal menu example.
     Ignore REQUEST, as this is a static, curated list of packages."
       '((example :source "EXAMPLE" :recipe (example :host github :repo "user/example"))
         (two :source "EXAMPLE" :recipe (two :host gitlab :repo "user/two"))))

   Menus allow one to offer Elpaca users curated lists of package
recipes.  For example, melpulls
(https://www.github.com/progfolio/melpulls) implements an Elpaca menu
for pending MELPA packages.

* Menu:

* elpaca-menu-functions::


File: elpaca.info,  Node: elpaca-menu-functions,  Up: Menus

2.2.2.1 elpaca-menu-functions
.............................

The ‘elpaca-menu-functions’ variable contains menu functions for the
following package sources by default:

   • MELPA (https://www.github.com/melpa/melpa)
   • Org (https://git.savannah.gnu.org/cgit/emacs/org-mode.git/)
   • Org-contrib (https://git.sr.ht/~bzg/org-contrib)
   • GNU ELPA Mirror
     (https://www.github.com/emacs-straight/gnu-elpa-mirror)
   • NonGNU ELPA (https://elpa.nongnu.org)

   Menus are checked in order until one returns the requested menu item
or the menu list is exhausted.


File: elpaca.info,  Node: Orders,  Next: Queues,  Prev: Menus,  Up: Basic concepts

2.2.3 Orders
------------

At a minimum, an order is a symbol which represents the name of a menu
item (*note menu: Menus.):

     (elpaca example)

   An order may also be a partial or full recipe:

     (elpaca (example :host gitlab))
     (elpaca (example :host gitlab :repo "user/example" :inherit nil))

* Menu:

* elpaca-order-functions::


File: elpaca.info,  Node: elpaca-order-functions,  Up: Orders

2.2.3.1 elpaca-order-functions
..............................

The abnormal hook ‘elpaca-order-functions’ runs via
‘run-hook-with-args-until-success’ before ‘elpaca-menu-functions’.  Each
function in the list should accept the current order as its sole
argument and return either nil or a plist.  The first function to return
a plist has its return value merged with the current order.

   This is useful for declaring default order properties.  For example,
the following function disables recipe inheritance by default:

     (elpaca-example
      (let ((elpaca-order-functions '((lambda (_) '(:inherit nil)))))
        (elpaca-recipe 'burger)))

     (:package "burger" :inherit nil)


File: elpaca.info,  Node: Queues,  Next: Installing Packages,  Prev: Orders,  Up: Basic concepts

2.2.4 Queues
------------

Elpaca installs packages asynchronously.  Orders (*note orders: Orders.)
are automatically queued in a list.  When all of a queues orders have
either finished or failed Elpaca considers it “processed”.

   Queues ensure packages installation, activation, and configuration
take place prior to packages in other queues.  The ‘elpaca-queue’ macro
wraps calls to ‘elpaca’.  It places orders in its _BODY_ in their own
queue.  This is especially useful when one wants to install a package to
use later on in their init file.  For example, a package which
implements an Elpaca menu (*note menu: Menus.):

     (elpaca-queue
      (elpaca (melpulls :host github :repo "progfolio/melpulls")
        (add-to-list 'elpaca-menu-functions #'melpulls)
        (elpaca-update-menus #'melpulls)))
     ;; Implicitly queued into a new queue.
     (elpaca menu-item-available-in-melpulls)


File: elpaca.info,  Node: Installing Packages,  Prev: Queues,  Up: Basic concepts

2.2.5 Installing Packages
-------------------------

elpaca
     ‘(order &rest body)’
   Installs _ORDER_ (*note orders: Orders.) and executes _BODY_ after
processing ORDER’s queue (*note queue: Queues.).

   This macro is for programmatic use in one’s init file.  Any of the
following will install the “example” package:

     (elpaca example) ;; recipe looked up in `elpaca-menu-functions'.

     (elpaca example (message "Messaged after the order's queue has processed."))

     (elpaca (example :host github :repo "user/example"))

     (elpaca `(example :host github :repo "user/example"
                       ,@(when (eq system-type 'darwin) ;; backqouting supported
                           (list :pre-build ((message "Mac specific pre-build"))))))

   If _ORDER_ is nil, _BODY_ is still executed after processing the
current queue.

     (elpaca first (message "First configured"))
     ;; If this weren't wrapped in an `elpaca' call, it would execute FIRST
     ;; Due to the "first" and "third" package installing asynchronously.
     (elpaca nil (message "Second"))
     (elpaca third (message "Third configured"))

   Interactively evaluating an ‘elpaca’ declaration will re-process the
order.  This can be used to change a package’s recipe prior to
rebuilding it.  Note that rebuilding a package does not *reload* a
package.  It’s best to restart Emacs after a successful rebuild if you
wish to have the changes loaded.


File: elpaca.info,  Node: use-package Integration,  Prev: Basic concepts,  Up: Usage

2.3 use-package Integration
===========================

Adding the following elisp to your init file will enable Elpaca’s
optional integration with the use-package configuration macro:

     (elpaca elpaca-use-package
       ;; Enable :elpaca use-package keyword.
       (elpaca-use-package-mode)
       ;; Assume :elpaca t unless otherwise specified.
       (setq elpaca-use-package-by-default t))

     ;; Necessary to use the `:elpaca' use-package keyword at the top-level.
     (elpaca-wait)

     (use-package example)

   Expands to:

     (elpaca example (use-package example))

   The ‘:elpaca’ use-package keyword can also accept a recipe

     (use-package example :elpaca (:host host :repo "user/repo"))

   Expands to:

     (elpaca (example :host host :repo "user/repo")
       (use-package example))

   When installing a package which modifies a form used at the top-level
(e.g.  a package which adds a use-package key word), use ‘elpaca-wait’
to block until that package has been installed and configured.  For
example:

     (use-package general :demand t)
     (elpaca-wait)
     ;; use-package declarations beyond this point may use the `:general' use-package keyword.

   In order to turn off ‘elpaca-use-package-mode’ for a given
delcaration, specify ‘:elpaca nil’:

     ;; `emacs' is a pseudo-feature which can to configure built-in functionality.
     (use-package emacs :elpaca nil :config (setq ring-bell-function #'ignore))

   Note this will cause the declaration to be interpreted immediately
(not deferred).


File: elpaca.info,  Node: UI,  Prev: Usage,  Up: Top

3 UI
****

Elpaca has a UI mode available for managing packages.  The main entry
points to the UI are the ‘elpaca-manager’, ‘elpaca-log’, and
‘elpaca-status’ commands.  Each of these commands utilize
‘elpaca-ui-mode’.

   The following commands are available in the ‘elpaca-ui-mode’:

Command                      Binding   Description
---------------------------------------------------------------------------------------------------------
elpaca-ui-send-input         !         Send input string to current process.
elpaca-ui-show-hidden-rows   +         Append rows up to N times ‘elpaca-ui-row-limit’.
elpaca-ui-search-installed   I         Search for “#unique #installed”
elpaca-ui-search-marked      M         Search for “#unique #marked”
elpaca-ui-search-orphaned    O         Search for “#unique #orphan”
elpaca-ui-search-refresh     R         Rerun the current search for BUFFER.
elpaca-ui-info               RET       Show info for current package.
elpaca-ui-search-tried       T         Search for “#unique #installed !#declared”
elpaca-ui-unmark             U         Unmark current package.
elpaca-ui-browse-package     b         Browse current package’s URL via ‘browse-url’.
elpaca-ui-copy               c         Copy formatted UI view ENTRIES to clipboard.
elpaca-ui-mark-delete        d         Mark package at point for ‘elpaca-delete’.
elpaca-ui-mark-fetch         f         Mark package at point for ‘elpaca-fetch’.
elpaca-ui-mark-try           i         Mark package at point for ‘elpaca-try’.
elpaca-log                   l         Display ‘elpaca-log-buffer’ filtered by QUERY.
elpaca-manager               m         Display elpaca’s package management UI.
elpaca-ui-mark-rebuild       r         Mark package at point for ‘elpaca-rebuild’.
elpaca-ui-search             s         Filter current buffer by QUERY.  If QUERY is nil, prompt for
                                       it.
elpaca-status                t         Log most recent events for packages.
elpaca-ui-mark-update        u         Mark package at point for ‘elpaca-update’.
elpaca-ui-visit              v         Visit current package’s repo or BUILD directory.
elpaca-ui-execute-marks      x         Execute each mark in ‘elpaca-ui-marked-packages’.

 -- Function: elpaca-manager
     Display packages registered with Elpaca.  Packages can searched
     for, installed, updated, rebuilt, and deleted from this interface.
     When ‘RECACHE’ is non-nil, via lisp or interactively via the
     ‘universal-argument’, recompute Elpaca’s menu item cache before
     display.

 -- Function: elpaca-log
     Display the log for queued packages filtered by ‘QUERY’.  For
     acceptable values for ‘QUERY’ see *note searching: Searching.

 -- Function: elpaca-status
     Display the log for the most recent events for queued packages.
     This allows one to quickly determine the status and reason for the
     status of each queued package.

* Menu:

* Searching::                    How to search within the Elpaca UI.
* Search tags::


File: elpaca.info,  Node: Searching,  Next: Search tags,  Up: UI

3.1 Searching
=============

The ‘elpaca-ui-search’ command (‘s’) prompts the user for a search query
in the minibuffer.  Altering the query updates the UI table.  Calling
with a ‘universal-argument’ (‘C-u’) populates the minibuffer with the
current search query for editing.  Setting the query to an empty string
resets the query to ‘elpaca-ui-default-query’.  The buffer’s header line
displays the current query.

   Queries are regular expressions checked against each row of the UI
table.  For example, ‘test’ will match any row which contains the string
“test”.  Some characters change the matching behavior in queries.

   The pipe character, ‘|’, will delimit text searches to specific
columns of the table.  Considering the following table:

number   A       B       C
-----------------------------
1        one     two     3
2        four    five    6
3        seven   eight   9

   The query ‘o’ will match rows 1 (on ‘one’) and 2 (on ‘four’).  The
query ‘3|’ will only search for ‘3’ in the first column and match row
three.  While ‘|||3’ Will search for ‘3’ in the 4th column of the table
and match row 1.

   The pound (a.k.a.  hash) character, ‘#’, followed by the name of a
search tag filters table entries.  For example ‘#random’ will display 10
random entries.  If the search tag accepts arguments they may passed by
wrapping the tag name in parenthesis.  e.g.  ‘#(random 20)’ will display
20 random entries.


File: elpaca.info,  Node: Search tags,  Prev: Searching,  Up: UI

3.2 Search tags
===============

 -- User Option: elpaca-ui-search-tags
     An alist of with elements of the form (NAME .  FILTER). ‘NAME’ is a
     unique symbol describing the filter function.  The user types name
     after ‘#’ in the minibuffer to apply the filter.  ‘FILTER’ is a
     function which must accept a list of ‘tabulated-list-entries’ as
     its first argument.  It may accept additional, optional arguments.
     The function must return a list of ‘tabulated-list-entries’.

     For example, the following search tag will embolden the first
     column of the ‘elpaca-manager’ table when the search query contains
     ‘#bold-names’:

     (defun +elpaca-bold-names (entries)
       (cl-loop for entry in entries
                for copy = (copy-tree entry)
                for cols = (cadr copy)
                for name = (aref cols 0)
                do (setf (aref cols 0) (propertize name 'face '(:weight bold)))
                collect copy))

     (cl-pushnew (cons 'bold-names #'+elpaca-bold-names) elpaca-ui-search-tags)



Tag Table:
Node: Top186
Node: Installation2191
Node: Requirements2466
Node: Installer2652
Ref: Installer-Footnote-15750
Ref: Installer-Footnote-25877
Node: Usage5982
Node: Quick Start6149
Ref: Quick Start-Footnote-110238
Node: Basic concepts10403
Node: Recipes12371
Node: host | fetcher12987
Node: repo13280
Node: branch13748
Node: tag13986
Node: ref14200
Ref: ref-Footnote-114489
Node: pin14567
Node: depth14748
Node: files15027
Node: protocol15748
Node: remotes16091
Ref: remotes-Footnote-117418
Node: main17499
Node: build17848
Node: inherit18149
Node: pre-build19221
Node: post-build19635
Node: autoloads19904
Node: Inheritance precedence20402
Node: elpaca-recipe-functions21203
Node: Menus22226
Node: elpaca-menu-functions23647
Node: Orders24290
Node: elpaca-order-functions24722
Node: Queues25487
Node: Installing Packages26500
Node: use-package Integration28042
Node: UI29688
Node: Searching32865
Node: Search tags34434

End Tag Table


Local Variables:
coding: utf-8
End:
