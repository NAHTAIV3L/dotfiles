This is org.info, produced by makeinfo version 7.0.3 from org.texi.

This manual is for Org version 9.7.

   Copyright © 2004–2023 Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover Texts
     being “A GNU Manual,” and with the Back-Cover Texts as in (a)
     below.  A copy of the license is included in the section entitled
     “GNU Free Documentation License.”

     (a) The FSF’s Back-Cover Text is: “You have the freedom to copy and
     modify this GNU manual.”

INFO-DIR-SECTION Emacs editing modes
START-INFO-DIR-ENTRY
* Org Mode: (org).      Outline-based notes management and organizer.
END-INFO-DIR-ENTRY


File: org.info,  Node: Export Region,  Prev: Advanced Export Configuration,  Up: Exporting

13.18 Export Region
===================

Some export backends include commands to convert a region of Org
formatted text to another format, such as HTML or LaTeX.  The conversion
replaces the original source.  Here are such commands:

‘org-export-region-to-ascii’
     Convert the selected region into ASCII.

‘org-export-region-to-utf8’
     Convert the selected region into UTF-8.

‘org-export-region-to-html’
     Convert the selected region into HTML.

‘org-export-region-to-latex’
     Convert the selected region into LaTeX.

‘org-export-region-to-texinfo’
     Convert the selected region into Texinfo.

‘org-export-region-to-md’
     Convert the selected region into Markdown.

   The in-place conversion is particularly handy for quick conversion of
tables and lists in non-Org buffers.  For example, in an HTML buffer,
write a list in Org syntax, select it, and convert it to HTML with ‘M-x
org-html-convert-region-to-html’.


File: org.info,  Node: Publishing,  Next: Citation handling,  Prev: Exporting,  Up: Top

14 Publishing
*************

Org includes a publishing management system that allows you to configure
automatic HTML conversion of _projects_ composed of interlinked Org
files.  You can also configure Org to automatically upload your exported
HTML pages and related attachments, such as images and source code
files, to a web server.

   You can also use Org to convert files into PDF, or even combine HTML
and PDF conversion so that files are available in both formats on the
server.

   Publishing has been contributed to Org by David O’Toole.

* Menu:

* Configuration::                Defining projects.
* Uploading Files::              How to get files up on the server.
* Sample Configuration::         Example projects.
* Triggering Publication::       Publication commands.


File: org.info,  Node: Configuration,  Next: Uploading Files,  Up: Publishing

14.1 Configuration
==================

Publishing needs significant configuration to specify files, destination
and many other properties of a project.

* Menu:

* Project alist::                The central configuration variable.
* Sources and destinations::     From here to there.
* Selecting files::              What files are part of the project?
* Publishing action::            Setting the function doing the publishing.
* Publishing options::           Tweaking HTML/LaTeX export.
* Publishing links::             Which links keep working after publishing?
* Site map::                     Generating a list of all pages.
* Generating an index::          An index that reaches across pages.


File: org.info,  Node: Project alist,  Next: Sources and destinations,  Up: Configuration

14.1.1 The variable ‘org-publish-project-alist’
-----------------------------------------------

Publishing is configured almost entirely through setting the value of
one variable, called ‘org-publish-project-alist’.  Each element of the
list configures one project, and may be in one of the two following
forms:

     ("project-name" :property value :property value ...)

i.e., a well-formed property list with alternating keys and values, or:

     ("project-name" :components ("project-name" "project-name" ...))

   In both cases, projects are configured by specifying property values.
A project defines the set of files that are to be published, as well as
the publishing configuration to use when publishing those files.  When a
project takes the second form listed above, the individual members of
the ‘:components’ property are taken to be sub-projects, which group
together files requiring different publishing options.  When you publish
such a “meta-project”, all the components are also published, in the
sequence given.


File: org.info,  Node: Sources and destinations,  Next: Selecting files,  Prev: Project alist,  Up: Configuration

14.1.2 Sources and destinations for files
-----------------------------------------

Most properties are optional, but some should always be set.  In
particular, Org needs to know where to look for source files, and where
to put published files.

‘:base-directory’
     Directory containing publishing source files.

‘:publishing-directory’
     Directory where output files are published.  You can directly
     publish to a webserver using a file name syntax appropriate for the
     Emacs tramp package.  Or you can publish to a local directory and
     use external tools to upload your website (see *note Uploading
     Files::).

‘:preparation-function’
     Function or list of functions to be called before starting the
     publishing process, for example, to run ‘make’ for updating files
     to be published.  Each preparation function is called with a single
     argument, the project property list.

‘:completion-function’
     Function or list of functions called after finishing the publishing
     process, for example, to change permissions of the resulting files.
     Each completion function is called with a single argument, the
     project property list.


File: org.info,  Node: Selecting files,  Next: Publishing action,  Prev: Sources and destinations,  Up: Configuration

14.1.3 Selecting files
----------------------

By default, all files with extension ‘.org’ in the base directory are
considered part of the project.  This can be modified by setting the
following properties

‘:base-extension’
     Extension—without the dot—of source files.  This actually is a
     regular expression.  Set this to the symbol ‘any’ if you want to
     get all files in ‘:base-directory’, even without extension.

‘:exclude’
     Regular expression to match file names that should not be
     published, even though they have been selected on the basis of
     their extension.

‘:include’
     List of files to be included regardless of ‘:base-extension’ and
     ‘:exclude’.

‘:recursive’
     Non-‘nil’ means, check base-directory recursively for files to
     publish.


File: org.info,  Node: Publishing action,  Next: Publishing options,  Prev: Selecting files,  Up: Configuration

14.1.4 Publishing action
------------------------

Publishing means that a file is copied to the destination directory and
possibly transformed in the process.  The default transformation is to
export Org files as HTML files, and this is done by the function
‘org-html-publish-to-html’ which calls the HTML exporter (see *note HTML
Export::).  But you can also publish your content as PDF files using
‘org-latex-publish-to-pdf’, or as ASCII, Texinfo, etc., using the
corresponding functions.

   If you want to publish the Org file as an ‘.org’ file but with
_archived_, _commented_, and _tag-excluded_ trees removed, use
‘org-org-publish-to-org’.  This produces ‘file.org’ and puts it in the
publishing directory.  If you want a htmlized version of this file, set
the parameter ‘:htmlized-source’ to ‘t’.  It produces ‘file.org.html’ in
the publishing directory(1).

   Other files like images only need to be copied to the publishing
destination; for this you can use ‘org-publish-attachment’.  For non-Org
files, you always need to specify the publishing function:

‘:publishing-function’
     Function executing the publication of a file.  This may also be a
     list of functions, which are all called in turn.

‘:htmlized-source’
     Non-‘nil’ means, publish htmlized source.

   The function must accept three arguments: a property list containing
at least a ‘:publishing-directory’ property, the name of the file to be
published, and the path to the publishing directory of the output file.
It should take the specified file, make the necessary transformation, if
any, and place the result into the destination folder.

   ---------- Footnotes ----------

   (1) If the publishing directory is the same as the source directory,
‘file.org’ is exported as ‘file.org.org’, so you probably do not want to
do this.


File: org.info,  Node: Publishing options,  Next: Publishing links,  Prev: Publishing action,  Up: Configuration

14.1.5 Options for the exporters
--------------------------------

The property list can be used to set many export options for the HTML
and LaTeX exporters.  In most cases, these properties correspond to user
variables in Org.  The table below lists these properties along with the
variable they belong to.  See the documentation string for the
respective variable for details.

   When a property is given a value in ‘org-publish-project-alist’, its
setting overrides the value of the corresponding user variable, if any,
during publishing.  Options set within a file (see *note Export
Settings::), however, override everything.

Generic properties
..................

‘:author’                    ‘user-full-name’
‘:email’                     ‘user-mail-address’
‘:language’                  ‘org-export-default-language’
‘:select-tags’               ‘org-export-select-tags’
‘:exclude-tags’              ‘org-export-exclude-tags’
‘:creator’                   ‘org-export-creator-string’
‘:headline-levels’           ‘org-export-headline-levels’
‘:preserve-breaks’           ‘org-export-preserve-breaks’
‘:section-numbers’           ‘org-export-with-section-numbers’
‘:time-stamp-file’           ‘org-export-timestamp-file’
‘:with-archived-trees’       ‘org-export-with-archived-trees’
‘:with-author’               ‘org-export-with-author’
‘:expand-links’              ‘org-export-expand-links’
‘:with-broken-links’         ‘org-export-with-broken-links’
‘:with-clocks’               ‘org-export-with-clocks’
‘:with-creator’              ‘org-export-with-creator’
‘:with-date’                 ‘org-export-with-date’
‘:with-drawers’              ‘org-export-with-drawers’
‘:with-email’                ‘org-export-with-email’
‘:with-emphasize’            ‘org-export-with-emphasize’
‘:with-entities’             ‘org-export-with-entities’
‘:with-fixed-width’          ‘org-export-with-fixed-width’
‘:with-footnotes’            ‘org-export-with-footnotes’
‘:with-inlinetasks’          ‘org-export-with-inlinetasks’
‘:with-latex’                ‘org-export-with-latex’
‘:with-planning’             ‘org-export-with-planning’
‘:with-priority’             ‘org-export-with-priority’
‘:with-properties’           ‘org-export-with-properties’
‘:with-smart-quotes’         ‘org-export-with-smart-quotes’
‘:with-special-strings’      ‘org-export-with-special-strings’
‘:with-statistics-cookies’   ‘org-export-with-statistics-cookies’
‘:with-sub-superscript’      ‘org-export-with-sub-superscripts’
‘:with-toc’                  ‘org-export-with-toc’
‘:with-tables’               ‘org-export-with-tables’
‘:with-tags’                 ‘org-export-with-tags’
‘:with-tasks’                ‘org-export-with-tasks’
‘:with-timestamps’           ‘org-export-with-timestamps’
‘:with-title’                ‘org-export-with-title’
‘:with-todo-keywords’        ‘org-export-with-todo-keywords’
‘:cite-export’               ‘org-cite-export-processors’

ASCII specific properties
.........................

‘:ascii-bullets’                         ‘org-ascii-bullets’
‘:ascii-caption-above’                   ‘org-ascii-caption-above’
‘:ascii-charset’                         ‘org-ascii-charset’
‘:ascii-global-margin’                   ‘org-ascii-global-margin’
‘:ascii-format-drawer-function’          ‘org-ascii-format-drawer-function’
‘:ascii-format-inlinetask-function’      ‘org-ascii-format-inlinetask-function’
‘:ascii-headline-spacing’                ‘org-ascii-headline-spacing’
‘:ascii-indented-line-width’             ‘org-ascii-indented-line-width’
‘:ascii-inlinetask-width’                ‘org-ascii-inlinetask-width’
‘:ascii-inner-margin’                    ‘org-ascii-inner-margin’
‘:ascii-links-to-notes’                  ‘org-ascii-links-to-notes’
‘:ascii-list-margin’                     ‘org-ascii-list-margin’
‘:ascii-paragraph-spacing’               ‘org-ascii-paragraph-spacing’
‘:ascii-quote-margin’                    ‘org-ascii-quote-margin’
‘:ascii-table-keep-all-vertical-lines’   ‘org-ascii-table-keep-all-vertical-lines’
‘:ascii-table-use-ascii-art’             ‘org-ascii-table-use-ascii-art’
‘:ascii-table-widen-columns’             ‘org-ascii-table-widen-columns’
‘:ascii-text-width’                      ‘org-ascii-text-width’
‘:ascii-underline’                       ‘org-ascii-underline’
‘:ascii-verbatim-format’                 ‘org-ascii-verbatim-format’

Beamer specific properties
..........................

‘:headline-levels’                ‘org-beamer-frame-level’
‘:beamer-subtitle-format’         ‘org-beamer-subtitle-format’
‘:beamer-column-view-format’      ‘org-beamer-column-view-format’
‘:beamer-theme’                   ‘org-beamer-theme’
‘:beamer-environments-extra’      ‘org-beamer-environments-extra’
‘:beamer-frame-default-options’   ‘org-beamer-frame-default-options’
‘:beamer-outline-frame-options’   ‘org-beamer-outline-frame-options’
‘:beamer-outline-frame-title’     ‘org-beamer-outline-frame-title’

HTML specific properties
........................

‘:html-doctype’                                  ‘org-html-doctype’
‘:html-container’                                ‘org-html-container-element’
‘:html-content-class’                            ‘org-html-content-class’
‘:html-html5-fancy’                              ‘org-html-html5-fancy’
‘:html-link-use-abs-url’                         ‘org-html-link-use-abs-url’
‘:html-link-home’                                ‘org-html-link-home’
‘:html-link-up’                                  ‘org-html-link-up’
‘:html-equation-reference-format’                ‘org-html-equation-reference-format’
‘:html-postamble’                                ‘org-html-postamble’
‘:html-preamble’                                 ‘org-html-preamble’
‘:html-head’                                     ‘org-html-head’
‘:html-head-extra’                               ‘org-html-head-extra’
‘:html-head-include-default-style’               ‘org-html-head-include-default-style’
‘:html-head-include-scripts’                     ‘org-html-head-include-scripts’
‘:html-allow-name-attribute-in-anchors’          ‘org-html-allow-name-attribute-in-anchors’
‘:html-divs’                                     ‘org-html-divs’
‘:html-checkbox-type’                            ‘org-html-checkbox-type’
‘:html-extension’                                ‘org-html-extension’
‘:html-footnote-format’                          ‘org-html-footnote-format’
‘:html-footnote-separator’                       ‘org-html-footnote-separator’
‘:html-footnotes-section’                        ‘org-html-footnotes-section’
‘:html-format-drawer-function’                   ‘org-html-format-drawer-function’
‘:html-format-headline-function’                 ‘org-html-format-headline-function’
‘:html-format-inlinetask-function’               ‘org-html-format-inlinetask-function’
‘:html-home/up-format’                           ‘org-html-home/up-format’
‘:html-indent’                                   ‘org-html-indent’
‘:html-infojs-options’                           ‘org-html-infojs-options’
‘:html-infojs-template’                          ‘org-html-infojs-template’
‘:html-inline-image-rules’                       ‘org-html-inline-image-rules’
‘:html-link-org-files-as-html’                   ‘org-html-link-org-files-as-html’
‘:html-mathjax-options’                          ‘org-html-mathjax-options’
‘:html-mathjax-template’                         ‘org-html-mathjax-template’
‘:html-metadata-timestamp-format’                ‘org-html-metadata-timestamp-format’
‘:html-postamble-format’                         ‘org-html-postamble-format’
‘:html-preamble-format’                          ‘org-html-preamble-format’
‘:html-prefer-user-labels’                       ‘org-html-prefer-user-labels’
‘:html-self-link-headlines’                      ‘org-html-self-link-headlines’
‘:html-table-align-individual-fields’            ‘org-html-table-align-individual-fields’
‘:html-table-caption-above’                      ‘org-html-table-caption-above’
‘:html-table-data-tags’                          ‘org-html-table-data-tags’
‘:html-table-header-tags’                        ‘org-html-table-header-tags’
‘:html-table-use-header-tags-for-first-column’   ‘org-html-table-use-header-tags-for-first-column’
‘:html-tag-class-prefix’                         ‘org-html-tag-class-prefix’
‘:html-text-markup-alist’                        ‘org-html-text-markup-alist’
‘:html-todo-kwd-class-prefix’                    ‘org-html-todo-kwd-class-prefix’
‘:html-toplevel-hlevel’                          ‘org-html-toplevel-hlevel’
‘:html-use-infojs’                               ‘org-html-use-infojs’
‘:html-validation-link’                          ‘org-html-validation-link’
‘:html-viewport’                                 ‘org-html-viewport’
‘:html-inline-images’                            ‘org-html-inline-images’
‘:html-table-attributes’                         ‘org-html-table-default-attributes’
‘:html-table-row-open-tag’                       ‘org-html-table-row-open-tag’
‘:html-table-row-close-tag’                      ‘org-html-table-row-close-tag’
‘:html-xml-declaration’                          ‘org-html-xml-declaration’
‘:html-wrap-src-lines’                           ‘org-html-wrap-src-lines’
‘:html-klipsify-src’                             ‘org-html-klipsify-src’
‘:html-klipse-css’                               ‘org-html-klipse-css’
‘:html-klipse-js’                                ‘org-html-klipse-js’
‘:html-klipse-selection-script’                  ‘org-html-klipse-selection-script’
‘:creator’                                       ‘org-html-creator-string’
‘:with-latex’                                    ‘org-html-with-latex’

LaTeX specific properties
.........................

‘:latex-class’                           ‘org-latex-default-class’
‘:latex-active-timestamp-format’         ‘org-latex-active-timestamp-format’
‘:latex-caption-above’                   ‘org-latex-caption-above’
‘:latex-classes’                         ‘org-latex-classes’
‘:latex-default-figure-position’         ‘org-latex-default-figure-position’
‘:latex-default-table-environment’       ‘org-latex-default-table-environment’
‘:latex-default-quote-environment’       ‘org-latex-default-quote-environment’
‘:latex-default-table-mode’              ‘org-latex-default-table-mode’
‘:latex-diary-timestamp-format’          ‘org-latex-diary-timestamp-format’
‘:latex-engraved-options’                ‘org-latex-engraved-options’
‘:latex-engraved-preamble’               ‘org-latex-engraved-preamble’
‘:latex-engraved-theme’                  ‘org-latex-engraved-theme’
‘:latex-footnote-defined-format’         ‘org-latex-footnote-defined-format’
‘:latex-footnote-separator’              ‘org-latex-footnote-separator’
‘:latex-format-drawer-function’          ‘org-latex-format-drawer-function’
‘:latex-format-headline-function’        ‘org-latex-format-headline-function’
‘:latex-format-inlinetask-function’      ‘org-latex-format-inlinetask-function’
‘:latex-hyperref-template’               ‘org-latex-hyperref-template’
‘:latex-image-default-scale’             ‘org-latex-image-default-scale’
‘:latex-image-default-height’            ‘org-latex-image-default-height’
‘:latex-image-default-option’            ‘org-latex-image-default-option’
‘:latex-image-default-width’             ‘org-latex-image-default-width’
‘:latex-images-centered’                 ‘org-latex-images-centered’
‘:latex-inactive-timestamp-format’       ‘org-latex-inactive-timestamp-format’
‘:latex-inline-image-rules’              ‘org-latex-inline-image-rules’
‘:latex-link-with-unknown-path-format’   ‘org-latex-link-with-unknown-path-format’
‘:latex-src-block-backend’               ‘org-latex-src-block-backend’
‘:latex-listings-langs’                  ‘org-latex-listings-langs’
‘:latex-listings-options’                ‘org-latex-listings-options’
‘:latex-listings-src-omit-language’      ‘org-latex-listings-src-omit-language’
‘:latex-minted-langs’                    ‘org-latex-minted-langs’
‘:latex-minted-options’                  ‘org-latex-minted-options’
‘:latex-prefer-user-labels’              ‘org-latex-prefer-user-labels’
‘:latex-subtitle-format’                 ‘org-latex-subtitle-format’
‘:latex-subtitle-separate’               ‘org-latex-subtitle-separate’
‘:latex-table-scientific-notation’       ‘org-latex-table-scientific-notation’
‘:latex-tables-booktabs’                 ‘org-latex-tables-booktabs’
‘:latex-tables-centered’                 ‘org-latex-tables-centered’
‘:latex-text-markup-alist’               ‘org-latex-text-markup-alist’
‘:latex-title-command’                   ‘org-latex-title-command’
‘:latex-toc-command’                     ‘org-latex-toc-command’
‘:latex-compiler’                        ‘org-latex-compiler’

Markdown specific properties
............................

‘:md-footnote-format’     ‘org-md-footnote-format’
‘:md-footnotes-section’   ‘org-md-footnotes-section’
‘:md-headline-style’      ‘org-md-headline-style’
‘:md-toplevel-hlevel’     ‘org-md-toplevel-hlevel’

ODT specific properties
.......................

‘:odt-styles-file’                  ‘org-odt-styles-file’
‘:odt-content-template-file’        ‘org-odt-content-template-file’
‘:odt-display-outline-level’        ‘org-odt-display-outline-level’
‘:odt-fontify-srcblocks’            ‘org-odt-fontify-srcblocks’
‘:odt-format-drawer-function’       ‘org-odt-format-drawer-function’
‘:odt-format-headline-function’     ‘org-odt-format-headline-function’
‘:odt-format-inlinetask-function’   ‘org-odt-format-inlinetask-function’
‘:odt-inline-formula-rules’         ‘org-odt-inline-formula-rules’
‘:odt-inline-image-rules’           ‘org-odt-inline-image-rules’
‘:odt-pixels-per-inch’              ‘org-odt-pixels-per-inch’
‘:odt-table-styles’                 ‘org-odt-table-styles’
‘:odt-use-date-fields’              ‘org-odt-use-date-fields’
‘:with-latex’                       ‘org-odt-with-latex’

Texinfo specific properties
...........................

‘:texinfo-class’                           ‘org-texinfo-default-class’
‘:texinfo-classes’                         ‘org-texinfo-classes’
‘:texinfo-format-headline-function’        ‘org-texinfo-format-headline-function’
‘:texinfo-node-description-column’         ‘org-texinfo-node-description-column’
‘:texinfo-active-timestamp-format’         ‘org-texinfo-active-timestamp-format’
‘:texinfo-inactive-timestamp-format’       ‘org-texinfo-inactive-timestamp-format’
‘:texinfo-diary-timestamp-format’          ‘org-texinfo-diary-timestamp-format’
‘:texinfo-link-with-unknown-path-format’   ‘org-texinfo-link-with-unknown-path-format’
‘:texinfo-tables-verbatim’                 ‘org-texinfo-tables-verbatim’
‘:texinfo-table-scientific-notation’       ‘org-texinfo-table-scientific-notation’
‘:texinfo-table-default-markup’            ‘org-texinfo-table-default-markup’
‘:texinfo-text-markup-alist’               ‘org-texinfo-text-markup-alist’
‘:texinfo-format-drawer-function’          ‘org-texinfo-format-drawer-function’
‘:texinfo-format-inlinetask-function’      ‘org-texinfo-format-inlinetask-function’
‘:texinfo-compact-itemx’                   ‘org-texinfo-compact-itemx’
‘:with-latex’                              ‘org-texinfo-with-latex’


File: org.info,  Node: Publishing links,  Next: Site map,  Prev: Publishing options,  Up: Configuration

14.1.6 Publishing links
-----------------------

To create a link from one Org file to another, you would use something
like ‘[[file:foo.org][The foo]]’ or simply ‘[[file:foo.org]]’ (see *note
External Links::).  When published, this link becomes a link to
‘foo.html’.  You can thus interlink the pages of your “Org web” project
and the links will work as expected when you publish them to HTML.  If
you also publish the Org source file and want to link to it, use an
‘http’ link instead of a ‘file:’ link, because ‘file’ links are
converted to link to the corresponding ‘.html’ file.

   Links to encrypted Org files, like ‘[[file:foo.org.gpg]]’ are also
supported.

   You may also link to related files, such as images.  Provided you are
careful with relative file names, and provided you have also configured
Org to upload the related files, these links will work too.  See *note
Complex example::, for an example of this usage.

   Links between published documents can contain some search options
(see *note Search Options::), which will be resolved to the appropriate
location in the linked file.  For example, once published to HTML, the
following links all point to a dedicated anchor in ‘foo.html’.

     [[file:foo.org::*heading]]
     [[file:foo.org::#custom-id]]
     [[file:foo.org::target]]


File: org.info,  Node: Site map,  Next: Generating an index,  Prev: Publishing links,  Up: Configuration

14.1.7 Generating a sitemap
---------------------------

The following properties may be used to control publishing of a map of
files for a given project.

‘:auto-sitemap’
     When non-‘nil’, publish a sitemap during
     ‘org-publish-current-project’ or ‘org-publish-all’.

‘:sitemap-filename’
     Filename for output of sitemap.  Defaults to ‘sitemap.org’, which
     becomes ‘sitemap.html’.

‘:sitemap-title’
     Title of sitemap page.  Defaults to name of file.

‘:sitemap-format-entry’
     With this option one can tell how a site-map entry is formatted in
     the site-map.  It is a function called with three arguments: the
     file or directory name relative to base directory of the project,
     the site-map style and the current project.  It is expected to
     return a string.  Default value turns file names into links and use
     document titles as descriptions.  For specific formatting needs,
     one can use ‘org-publish-find-date’, ‘org-publish-find-title’ and
     ‘org-publish-find-property’, to retrieve additional information
     about published documents.

‘:sitemap-function’
     Plug-in function to use for generation of the sitemap.  It is
     called with two arguments: the title of the site-map and a
     representation of the files and directories involved in the project
     as a nested list, which can further be transformed using
     ‘org-list-to-generic’, ‘org-list-to-subtree’ and alike.  Default
     value generates a plain list of links to all files in the project.

‘:sitemap-sort-folders’
     Where folders should appear in the sitemap.  Set this to ‘first’
     (default) or ‘last’ to display folders first or last, respectively.
     When set to ‘ignore’, folders are ignored altogether.  Any other
     value mixes files and folders.  This variable has no effect when
     site-map style is ‘tree’.

‘:sitemap-sort-files’
     How the files are sorted in the site map.  Set this to
     ‘alphabetically’ (default), ‘chronologically’ or
     ‘anti-chronologically’.  ‘chronologically’ sorts the files with
     older date first while ‘anti-chronologically’ sorts the files with
     newer date first.  ‘alphabetically’ sorts the files alphabetically.
     The date of a file is retrieved with ‘org-publish-find-date’.

‘:sitemap-ignore-case’
     Should sorting be case-sensitive?  Default ‘nil’.

‘:sitemap-file-entry-format’
     With this option one can tell how a sitemap’s entry is formatted in
     the sitemap.  This is a format string with some escape sequences:
     ‘%t’ stands for the title of the file, ‘%a’ stands for the author
     of the file and ‘%d’ stands for the date of the file.  The date is
     retrieved with the ‘org-publish-find-date’ function and formatted
     with ‘org-publish-sitemap-date-format’.  Default ‘%t’.

‘:sitemap-date-format’
     Format string for the ‘format-time-string’ function that tells how
     a sitemap entry’s date is to be formatted.  This property bypasses
     ‘org-publish-sitemap-date-format’ which defaults to ‘%Y-%m-%d’.


File: org.info,  Node: Generating an index,  Prev: Site map,  Up: Configuration

14.1.8 Generating an index
--------------------------

Org mode can generate an index across the files of a publishing project.

‘:makeindex’
     When non-‘nil’, generate in index in the file ‘theindex.org’ and
     publish it as ‘theindex.html’.

   The file is created when first publishing a project with the
‘:makeindex’ set.  The file only contains a statement ‘#+INCLUDE:
"theindex.inc"’.  You can then build around this include statement by
adding a title, style information, etc.

   Index entries are specified with ‘INDEX’ keyword.  An entry that
contains an exclamation mark creates a sub item.

     *** Curriculum Vitae
     #+INDEX: CV
     #+INDEX: Application!CV


File: org.info,  Node: Uploading Files,  Next: Sample Configuration,  Prev: Configuration,  Up: Publishing

14.2 Uploading Files
====================

For those people already utilizing third party sync tools such as Rsync
or Unison, it might be preferable not to use the built-in remote
publishing facilities of Org mode which rely heavily on Tramp.  Tramp,
while very useful and powerful, tends not to be so efficient for
multiple file transfer and has been known to cause problems under heavy
usage.

   Specialized synchronization utilities offer several advantages.  In
addition to timestamp comparison, they also do content and
permissions/attribute checks.  For this reason you might prefer to
publish your web to a local directory—possibly even _in place_ with your
Org files—and then use Unison or Rsync to do the synchronization with
the remote host.

   Since Unison, for example, can be configured as to which files to
transfer to a certain remote destination, it can greatly simplify the
project publishing definition.  Simply keep all files in the correct
location, process your Org files with ‘org-publish’ and let the
synchronization tool do the rest.  You do not need, in this scenario, to
include attachments such as JPG, CSS or PNG files in the project
definition since the third-party tool syncs them.

   Publishing to a local directory is also much faster than to a remote
one, so that you can afford more easily to republish entire projects.
If you set ‘org-publish-use-timestamps-flag’ to ‘nil’, you gain the main
benefit of re-including any changed external files such as source
example files you might include with ‘INCLUDE’ keyword.  The timestamp
mechanism in Org is not smart enough to detect if included files have
been modified.


File: org.info,  Node: Sample Configuration,  Next: Triggering Publication,  Prev: Uploading Files,  Up: Publishing

14.3 Sample Configuration
=========================

Below we provide two example configurations.  The first one is a simple
project publishing only a set of Org files.  The second example is more
complex, with a multi-component project.

* Menu:

* Simple example::               One-component publishing.
* Complex example::              A multi-component publishing example.


File: org.info,  Node: Simple example,  Next: Complex example,  Up: Sample Configuration

14.3.1 Example: simple publishing configuration
-----------------------------------------------

This example publishes a set of Org files to the ‘public_html’ directory
on the local machine.

     (setq org-publish-project-alist
           '(("org"
              :base-directory "~/org/"
              :publishing-function org-html-publish-to-html
              :publishing-directory "~/public_html"
              :section-numbers nil
              :with-toc nil
              :html-head "<link rel=\"stylesheet\"
                         href=\"../other/mystyle.css\"
                         type=\"text/css\"/>")))


File: org.info,  Node: Complex example,  Prev: Simple example,  Up: Sample Configuration

14.3.2 Example: complex publishing configuration
------------------------------------------------

This more complicated example publishes an entire website, including Org
files converted to HTML, image files, Emacs Lisp source code, and style
sheets.  The publishing directory is remote and private files are
excluded.

   To ensure that links are preserved, care should be taken to replicate
your directory structure on the web server, and to use relative file
paths.  For example, if your Org files are kept in ‘~/org/’ and your
publishable images in ‘~/images/’, you would link to an image with

     file:../images/myimage.png

   On the web server, the relative path to the image should be the same.
You can accomplish this by setting up an ‘images/’ folder in the right
place on the web server, and publishing images to it.

     (setq org-publish-project-alist
           '(("orgfiles"
              :base-directory "~/org/"
              :base-extension "org"
              :publishing-directory "/ssh:user@host:~/html/notebook/"
              :publishing-function org-html-publish-to-html
              :exclude "PrivatePage.org" ;; regexp
              :headline-levels 3
              :section-numbers nil
              :with-toc nil
              :html-head "<link rel=\"stylesheet\"
                       href=\"../other/mystyle.css\" type=\"text/css\"/>"
              :html-preamble t)

             ("images"
              :base-directory "~/images/"
              :base-extension "jpg\\|gif\\|png"
              :publishing-directory "/ssh:user@host:~/html/images/"
              :publishing-function org-publish-attachment)

             ("other"
              :base-directory "~/other/"
              :base-extension "css\\|el"
              :publishing-directory "/ssh:user@host:~/html/other/"
              :publishing-function org-publish-attachment)
             ("website" :components ("orgfiles" "images" "other"))))


File: org.info,  Node: Triggering Publication,  Prev: Sample Configuration,  Up: Publishing

14.4 Triggering Publication
===========================

Once properly configured, Org can publish with the following commands:

‘C-c C-e P x’ (‘org-publish’)
     Prompt for a specific project and publish all files that belong to
     it.

‘C-c C-e P p’ (‘org-publish-current-project’)
     Publish the project containing the current file.

‘C-c C-e P f’ (‘org-publish-current-file’)
     Publish only the current file.

‘C-c C-e P a’ (‘org-publish-all’)
     Publish every project.

   Org uses timestamps to track when a file has changed.  The above
functions normally only publish changed files.  You can override this
and force publishing of all files by giving a prefix argument to any of
the commands above, or by customizing the variable
‘org-publish-use-timestamps-flag’.  This may be necessary in particular
if files include other files via ‘SETUPFILE’ or ‘INCLUDE’ keywords.


File: org.info,  Node: Citation handling,  Next: Working with Source Code,  Prev: Publishing,  Up: Top

15 Citation handling
********************

The ‘oc.el’ library provides tooling to handle citations in Org via
“citation processors” that offer some or all of the following
capabilities:

activate
     Fontification, tooltip preview, etc.
follow
     At-point actions on citations via ‘org-open-at-point’.
insert
     Add and edit citations via ‘org-cite-insert’.
export
     Via different libraries for different target formats.

   To use a “citation processor”, the user must load them; for example;

     (require 'oc-bibtex)

   They can then configure them with ‘org-cite-activate-processor’,
‘org-cite-follow-processor’, ‘org-cite-insert-processor’, and
‘org-cite-export-processors’ respectively.

   The included “basic” processor provides all four capabilities.

* Menu:

* Citations::
* Citation export processors::
* Bibliography printing::


File: org.info,  Node: Citations,  Next: Citation export processors,  Up: Citation handling

15.1 Citations
==============

Before adding citations, first set one-or-more bibliographies, either
globally with ‘org-cite-global-bibliography’, or locally using one or
more “bibliography” keywords.

     #+bibliography: SomeFile.bib
     #+bibliography: /some/other/file.json
     #+bibliography: "/some/file/with spaces/in its name.bib"

   Org mode uses all the local and global bibliographies combined to
search for citation keys.

   One can then insert and edit citations using ‘org-cite-insert’,
called with ‘C-c C-x @’.

   A _citation_ requires one or more citation _key(s)_, elements
identifying a reference in the bibliography.

   • Each citation is surrounded by brackets and uses the ‘cite’ type.

   • Each key starts with the character ‘@’.

   • Each key can be qualified by a _prefix_ (e.g. “see ”) and/or a
     _suffix_ (e.g. “p. 123”), giving information useful or necessary
     for the comprehension of the citation but not included in the
     reference.

   • A single citation can cite more than one reference ; the keys are
     separated by semicolons ; the formatting of such citation groups is
     specified by the style.

   • One can also specify a stylistic variation for the citations by
     inserting a ‘/’ and a style name between the ‘cite’ keyword and the
     colon; this usually makes sense only for the author-year styles.

     [cite/style:common prefix ;prefix @key suffix; ... ; common suffix]

   The only mandatory elements are:

   • The ‘cite’ keyword and the colon.
   • The ‘@’ character immediately preceding each key.
   • The brackets surrounding the citation(s) (group).


File: org.info,  Node: Citation export processors,  Next: Bibliography printing,  Prev: Citations,  Up: Citation handling

15.2 Citation export processors
===============================

Org currently includes the following export processors:

   • Two processors can export to a variety of formats, including
     ‘latex’ (and therefore ‘pdf’), ‘html’, ‘odt’ and plain (UTF8) text:

     basic
          a basic export processor, well adapted to situations where
          backward compatibility is not a requirement and formatting
          needs are minimal;

     csl
          this export processor uses format files written in Citation
          Style Language
          (https://en.wikipedia.org/wiki/Citation_Style_Language) via
          citeproc-el (https://github.com/andras-simonyi/citeproc-el);

   • In contrast, three other processors target LaTeX and LaTeX-derived
     formats exclusively:

     bibtex
          this export processor uses BibTeX, the historical
          bibliographic processor used with LaTeX, thus allowing the use
          of data and style files compatible with this processor
          (including a large number of publishers’ styles).  It only
          supports LaTeX’s ‘\cite’ and ‘\nocite’ commands.

     natbib
          as with the bibtex processor, but using the LaTeX package
          ‘natbib’, allowing more stylistic variants that LaTeX’s
          ‘\cite’ command.

     biblatex
          this backend allows the use of data and formats prepared for
          BibLaTeX, an alternate bibliographic processor used with
          LaTeX, which overcomes some serious BibTeX limitations, but
          has not (yet?) been widely adopted by publishers.

   The ‘CITE_EXPORT’ keyword specifies the export processor and the
citation (and possibly reference) style(s); for example (all arguments
are optional)

     #+cite_export: basic author author-year

specifies the “basic” export processor with citations inserted as
author’s name and references indexed by author’s names and year;

     #+cite_export: csl /some/path/to/vancouver-brackets.csl

specifies the “csl” processor and CSL style, which in this case defines
numeric citations and numeric references according to the ‘Vancouver’
specification (as style used in many medical journals), following a
typesetting variation putting citations between brackets;

     #+cite_export: natbib kluwer

specifies the ‘natbib’ export processor with a label citation style
conformant to the Harvard style and the specification of the
Wolkers-Kluwer publisher; since it relies on the ‘bibtex’ processor of
your LaTeX installation, it won’t export to anything but PDF.


File: org.info,  Node: Bibliography printing,  Prev: Citation export processors,  Up: Citation handling

15.3 Bibliography printing
==========================

The ‘PRINT_BIBLIOGRAPHY’ keyword specifies where the bibliography should
be printed (note the colon):

     #+print_bibliography:

   The bibliography printed by the LaTeX-based export processors
“bibtex”, “natbib” and “biblatex” has a chapter or section heading by
default, while the “basic” and “csl” processors print the list of
bibliography entries without a heading.

   A document may contain more than one ‘PRINT_BIBLIOGRAPHY’ keywords.
Each of the keywords will trigger printing the bibliography.

   The keywords can be used with or without additional options.  Options
can be used, for example, to print only entries that belong to a certain
category or to control formatting.  The set of supported
‘PRINT_BIBLIOGRAPHY’ options and their interpretation varies between the
different citation export processors.  Some export processors do not
support passing options.

* Menu:

* Bibliography options in the ``biblatex'' and ``csl'' export processors::


File: org.info,  Node: Bibliography options in the ``biblatex'' and ``csl'' export processors,  Up: Bibliography printing

15.3.1 Bibliography options in the “biblatex” and “csl” export processors
-------------------------------------------------------------------------

The “biblatex” and “csl” export processors support bibliography options
through a property list attached to the ‘PRINT_BIBLIOGRAPHY’ keyword.
For example,

     #+print_bibliography: :keyword algebra :type book

   Values including spaces must be surrounded with double quotes.  If
you need to use a key multiple times, you can separate its values with
commas, but without any space in-between:

     #+print_bibliography: :keyword "algebraic logic" :nottype article,book

   The “biblatex” export processor accepts all options supported by
BibLaTeX’s ‘\printbibliography’ command, while the “csl” processor
accepts the following ones:

‘:keyword <keyword(,keyword2...)>’
     Print only entries whose keyword field contains all given keywords.

‘:notkeyword <keyword(,keyword2...)>’
     Print only entries whose keyword field does not contain any of the
     given keywords.

‘:type <entrytype>’
     Print only entries whose type is ‘<entrytype>’.  Entry type is the
     BibTeX/BibLaTeX entry type if this information is available (the
     entry was read from a BibTeX/BibLaTeX bibliography) and the CSL
     entry type otherwise.

‘:nottype <entrytype(,entrytype2...)>’
     Print only entries whose type is not among the given entry types.
     Entry type is determined as in the case of ‘:type’.

‘:csltype <entrytype>’
     Print only entries whose CSL entry type (possibly based on a
     conversion from BibTeX/BibLaTeX to CSL) is ‘<entrytype>’.

‘:notcsltype <entrytype(,entrytype2...)>’
     Print only entries whose CSL entry type (possibly based on a
     conversion from BibTeX/BibLaTeX to CSL) is not among the listed
     entry types.

‘:filter <predicate>’
     Print only entries for which the given Emacs Lisp predicate returns
     a non-‘nil’ value.


File: org.info,  Node: Working with Source Code,  Next: Miscellaneous,  Prev: Citation handling,  Up: Top

16 Working with Source Code
***************************

Source code here refers to any plain text collection of computer
instructions, possibly with comments, written using a human-readable
programming language.  Org can manage source code in an Org document
when the source code is identified with begin and end markers.  Working
with source code begins with identifying source code blocks.  A source
code block can be placed almost anywhere in an Org document; it is not
restricted to the preamble or the end of the document.  However, Org
cannot manage a source code block if it is placed inside an Org comment
or within a fixed width section.

   Here is an example source code block in the Emacs Lisp language:

     #+BEGIN_SRC emacs-lisp
       (defun org-xor (a b)
          "Exclusive or."
          (if a (not b) b))
     #+END_SRC

   Source code blocks are one of many Org block types, which also
include “center”, “comment”, “dynamic”, “example”, “export”, “quote”,
“special”, and “verse”.  This section pertains to blocks between
‘#+BEGIN_SRC’ and ‘#+END_SRC’.

   Details of Org’s facilities for working with source code are
described in the following sections.

* Menu:

* Features Overview::            Enjoy the versatility of source blocks.
* Structure of Code Blocks::     Code block syntax described.
* Using Header Arguments::       Different ways to set header arguments.
* Environment of a Code Block::  Arguments, sessions, working directory...
* Evaluating Code Blocks::       Place results of evaluation in the Org buffer.
* Results of Evaluation::        Choosing a results type, post-processing...
* Exporting Code Blocks::        Export contents and/or results.
* Extracting Source Code::       Create pure source code files.
* Languages::                    List of supported code block languages.
* Editing Source Code::          Language major-mode editing.
* Noweb Reference Syntax::       Literate programming in Org mode.
* Library of Babel::             Use and contribute to a library of useful code blocks.
* Key bindings and Useful Functions:: Work quickly with code blocks.
* Batch Execution::              Call functions from the command line.


File: org.info,  Node: Features Overview,  Next: Structure of Code Blocks,  Up: Working with Source Code

16.1 Features Overview
======================

Org can manage the source code in the block delimited by ‘#+BEGIN_SRC’
... ‘#+END_SRC’ in several ways that can simplify housekeeping tasks
essential to modern source code maintenance.  Org can edit, format,
extract, export, and publish source code blocks.  Org can also compile
and execute a source code block, then capture the results.  The Org mode
literature sometimes refers to source code blocks as _live code_ blocks
because they can alter the content of the Org document or the material
that it exports.  Users can control the “liveliness” of each source code
block by tweaking the header arguments (see *note Using Header
Arguments::) for compiling, execution, extraction, and exporting.

   For editing and formatting a source code block, Org uses an
appropriate Emacs major mode that includes features specifically
designed for source code in that language.

   Org can extract one or more source code blocks and write them to one
or more source files—a process known as _tangling_ in literate
programming terminology.

   For exporting and publishing, Org’s backends can format a source code
block appropriately, often with native syntax highlighting.

   For executing and compiling a source code block, the user can
configure Org to select the appropriate compiler.  Org provides
facilities to collect the result of the execution or compiler output,
insert it into the Org document, and/or export it.  In addition to text
results, Org can insert links to other data types, including audio,
video, and graphics.  Org can also link a compiler error message to the
appropriate line in the source code block.

   An important feature of Org’s management of source code blocks is the
ability to pass variables, functions, and results to one another using a
common syntax for source code blocks in any language.  Although most
literate programming facilities are restricted to one language or
another, Org’s language-agnostic approach lets the literate programmer
match each programming task with the appropriate computer language and
to mix them all together in a single Org document.  This
interoperability among languages explains why Org’s source code
management facility was named _Org Babel_ by its originators, Eric
Schulte and Dan Davison.

   Org mode fulfills the promise of easy verification and maintenance of
publishing reproducible research by keeping text, data, code,
configuration settings of the execution environment, the results of the
execution, and associated narratives, claims, references, and internal
and external links in a single Org document.


File: org.info,  Node: Structure of Code Blocks,  Next: Using Header Arguments,  Prev: Features Overview,  Up: Working with Source Code

16.2 Structure of Code Blocks
=============================

Org offers two ways to structure source code in Org documents: in a
source code block, and directly inline.  Both specifications are shown
below.

   A source code block conforms to this structure:

     #+NAME: <name>
     #+BEGIN_SRC <language> <switches> <header arguments>
       <body>
     #+END_SRC

   Do not be put-off by having to remember the source block syntax.  Org
mode offers a command for wrapping existing text in a block (see *note
Structure Templates::).  Org also works with other completion systems in
Emacs, some of which predate Org and have custom domain-specific
languages for defining templates.  Regular use of templates reduces
errors, increases accuracy, and maintains consistency.

   An inline code block conforms to this structure:

     src_<language>{<body>}

or

     src_<language>[<header arguments>]{<body>}

‘#+NAME: <name>’
     Optional.  Names the source block so it can be called, like a
     function, from other source blocks or inline code to evaluate or to
     capture the results.  Code from other blocks, other files, and from
     table formulas (see *note The Spreadsheet::) can use the name to
     reference a source block.  This naming serves the same purpose as
     naming Org tables.  Org mode requires unique names.  For duplicate
     names, Org mode’s behavior is undefined.

‘#+BEGIN_SRC’ ... ‘#+END_SRC’
     Mandatory.  They mark the start and end of a block that Org
     requires.  The ‘#+BEGIN_SRC’ line takes additional arguments, as
     described next.

‘<language>’
     Optional.  It is the identifier of the source code language in the
     block.  See *note Languages::, for identifiers of supported
     languages.

     When ‘<language>’ identifier is omitted, the block also cannot have
     ‘<switches>’ and ‘<header arguments>’.

     Language identifier is also used to fontify code blocks in Org
     buffers, when ‘org-src-fontify-natively’ is set to non-‘nil’.  See
     *note Editing Source Code::.

‘<switches>’
     Optional.  Switches provide finer control of the code execution,
     export, and format (see the discussion of switches in *note Literal
     Examples::).

‘<header arguments>’
     Optional.  Heading arguments control many aspects of evaluation,
     export and tangling of code blocks (see *note Using Header
     Arguments::).  Using Org’s properties feature, header arguments can
     be selectively applied to the entire buffer or specific subtrees of
     the Org document.

‘<body>’
     Source code in the dialect of the specified language identifier.


File: org.info,  Node: Using Header Arguments,  Next: Environment of a Code Block,  Prev: Structure of Code Blocks,  Up: Working with Source Code

16.3 Using Header Arguments
===========================

Org comes with many header arguments common to all languages.  New
header arguments are added for specific languages as they become
available for use in source code blocks.  A header argument is specified
with an initial colon followed by the argument’s name in lowercase.

   Since header arguments can be set in several ways, Org prioritizes
them in case of overlaps or conflicts by giving local settings a higher
priority.  Header values in function calls, for example, override header
values from global defaults.

System-wide header arguments
----------------------------

System-wide values of header arguments can be specified by customizing
the ‘org-babel-default-header-args’ variable, which defaults to the
following values:

     :session    => "none"
     :results    => "replace"
     :exports    => "code"
     :cache      => "no"
     :noweb      => "no"
     :hlines     => "no"
     :tangle     => "no"

   Inline source blocks (see *note Structure of Code Blocks::) use
slightly different default header arguments defined in
‘org-babel-default-inline-header-args’:

     :session    => "none"
     :results    => "replace"
     :exports    => "results"
     :hlines     => "yes"

   The most notable difference between default header arguments for
inline and normal source blocks is ‘:exports’ argument.  For inline
source blocks, results of evaluation are exported by default; not the
code.

   Unlike the default values, header arguments set using Org mode
properties (see *note Header arguments in Org mode properties::) do
apply to both the normal source blocks and inline source blocks.

   The example below sets ‘:noweb’ header arguments to ‘yes’, which
makes Org expand ‘:noweb’ references by default.

     (setq org-babel-default-header-args
           (cons '(:noweb . "yes")
                 (assq-delete-all :noweb org-babel-default-header-args)))

   Each language can have separate default header arguments by
customizing the variable ‘org-babel-default-header-args:<LANG>’, where
<LANG> is the name of the language.  For details, see the
language-specific online documentation at
<https://orgmode.org/worg/org-contrib/babel/>.

Header arguments in Org mode properties
---------------------------------------

For header arguments applicable to the buffer, use ‘PROPERTY’ keyword
anywhere in the Org file (see *note Property Syntax::).

   The following example makes all the R code blocks execute in the same
session.  Setting ‘:results’ to ‘silent’ ignores the results of
executions for all blocks, not just R code blocks; no results inserted
for any block.

     #+PROPERTY: header-args:R  :session *R*
     #+PROPERTY: header-args    :results silent

   Header arguments set through Org’s property drawers (see *note
Property Syntax::) apply at the subtree level on down.  Since these
property drawers can appear anywhere in the file hierarchy, Org uses
outermost call or source block to resolve the values.  Org ignores
‘org-use-property-inheritance’ setting.

   In this example, ‘:cache’ defaults to ‘yes’ for all code blocks in
the subtree.

     * sample header
       :PROPERTIES:
       :header-args:    :cache yes
       :END:

   Properties defined through ‘org-set-property’ function, bound to ‘C-c
C-x p’, apply to all active languages.  They override properties set in
‘org-babel-default-header-args’.

   Language-specific header arguments are also read from properties
‘header-args:<LANG>’ where <LANG> is the language identifier.  For
example,

     * Heading
       :PROPERTIES:
       :header-args:clojure:    :session *clojure-1*
       :header-args:R:          :session *R*
       :END:
     ** Subheading
       :PROPERTIES:
       :header-args:clojure:    :session *clojure-2*
       :END:

would force separate sessions for Clojure blocks in ‘Heading’ and
‘Subheading’, but use the same session for all R blocks.  Blocks in
‘Subheading’ inherit settings from ‘Heading’.

Code block specific header arguments
------------------------------------

Header arguments are most commonly set at the source code block level,
on the ‘#+BEGIN_SRC’ line.  Arguments set at this level take precedence
over those set in the ‘org-babel-default-header-args’ variable, and also
those set as header properties.

   In the following example, setting ‘:results’ to ‘silent’ makes it
ignore results of the code execution.  Setting ‘:exports’ to ‘code’
exports only the body of the code block to HTML or LaTeX.

     #+NAME: factorial
     #+BEGIN_SRC haskell :results silent :exports code :var n=0
       fac 0 = 1
       fac n = n * fac (n-1)
     #+END_SRC

   The same header arguments in an inline code block:

     src_haskell[:exports both]{fac 5}

   Code block header arguments can span multiple lines using ‘#+HEADER:’
on each line.  Note that Org currently accepts the plural spelling of
‘#+HEADER:’ only as a convenience for backward-compatibility.  It may be
removed at some point.

   Multi-line header arguments on an unnamed code block:

     #+HEADER: :var data1=1
     #+BEGIN_SRC emacs-lisp :var data2=2
        (message "data1:%S, data2:%S" data1 data2)
     #+END_SRC

     #+RESULTS:
     : data1:1, data2:2

   Multi-line header arguments on a named code block:

     #+NAME: named-block
     #+HEADER: :var data=2
     #+BEGIN_SRC emacs-lisp
       (message "data:%S" data)
     #+END_SRC

     #+RESULTS: named-block
       : data:2

Header arguments in function calls
----------------------------------

Header arguments in function calls are the most specific and override
all other settings in case of an overlap.  They get the highest
priority.  Two ‘#+CALL:’ examples are shown below.  For the complete
syntax of ‘CALL’ keyword, see *note Evaluating Code Blocks::.

   In this example, ‘:exports results’ header argument is applied to the
evaluation of the ‘#+CALL:’ line.

     #+CALL: factorial(n=5) :exports results

   In this example, ‘:session special’ header argument is applied to the
evaluation of ‘factorial’ code block.

     #+CALL: factorial[:session special](n=5)


File: org.info,  Node: Environment of a Code Block,  Next: Evaluating Code Blocks,  Prev: Using Header Arguments,  Up: Working with Source Code

16.4 Environment of a Code Block
================================

Passing arguments
-----------------

Use ‘var’ for passing arguments to source code blocks.  The specifics of
variables in code blocks vary by the source language and are covered in
the language-specific documentation.  The syntax for ‘var’, however, is
the same for all languages.  This includes declaring a variable, and
assigning a default value.

   The following syntax is used to pass arguments to code blocks using
the ‘var’ header argument.

     :var NAME=ASSIGN

NAME is the name of the variable bound in the code block body.  ASSIGN
is a literal value, such as a string, a number, a reference to a table,
a list, a literal example, another code block—with or without
arguments—or the results of evaluating a code block.  ASSIGN may specify
a filename for references to elements in a different file, using a ‘:’
to separate the filename from the reference.

     :var NAME=FILE:REFERENCE

   Here are examples of passing values by reference:

table
     A table named with a ‘NAME’ keyword.

          #+NAME: example-table
          | 1 |
          | 2 |
          | 3 |
          | 4 |

          #+NAME: table-length
          #+BEGIN_SRC emacs-lisp :var table=example-table
            (length table)
          #+END_SRC

          #+RESULTS: table-length
          : 4

     When passing a table, you can treat specially the row, or the
     column, containing labels for the columns, or the rows, in the
     table.

     The ‘colnames’ header argument accepts ‘yes’, ‘no’, or ‘nil’
     values.  The default value is ‘nil’: if an input table has column
     names—because the second row is a horizontal rule—then Org removes
     the column names, processes the table, puts back the column names,
     and then writes the table to the results block.  Using ‘yes’, Org
     does the same to the first row, even if the initial table does not
     contain any horizontal rule.  When set to ‘no’, Org does not
     pre-process column names at all.

          #+NAME: less-cols
          | a |
          |---|
          | b |
          | c |

          #+BEGIN_SRC python :var tab=less-cols :colnames nil
            return [[val + '*' for val in row] for row in tab]
          #+END_SRC

          #+RESULTS:
          | a  |
          |----|
          | b* |
          | c* |

     Similarly, the ‘rownames’ header argument can take two values:
     ‘yes’ or ‘no’.  When set to ‘yes’, Org removes the first column,
     processes the table, puts back the first column, and then writes
     the table to the results block.  The default is ‘no’, which means
     Org does not pre-process the first column.  Note that Emacs Lisp
     code blocks ignore ‘rownames’ header argument because of the ease
     of table-handling in Emacs.

          #+NAME: with-rownames
          | one | 1 | 2 | 3 | 4 |  5 |
          | two | 6 | 7 | 8 | 9 | 10 |

          #+BEGIN_SRC python :var tab=with-rownames :rownames yes
            return [[val + 10 for val in row] for row in tab]
          #+END_SRC

          #+RESULTS:
          | one | 11 | 12 | 13 | 14 | 15 |
          | two | 16 | 17 | 18 | 19 | 20 |

   To refer to a table in another file, join the filename and table name
with a colon, for example: ‘:var table=other-file.org:example-table’.

list
     A simple named list.

          #+NAME: example-list
          - simple
            - not
            - nested
          - list

          #+BEGIN_SRC emacs-lisp :var x=example-list
            (print x)
          #+END_SRC

          #+RESULTS:
          | simple | list |

     Note that only the top level list items are passed along.  Nested
     list items are ignored.

code block without arguments
     A code block name, as assigned by ‘NAME’ keyword from the example
     above, optionally followed by parentheses.

          #+BEGIN_SRC emacs-lisp :var length=table-length()
            (* 2 length)
          #+END_SRC

          #+RESULTS:
          : 8

code block with arguments
     A code block name, as assigned by ‘NAME’ keyword, followed by
     parentheses and optional arguments passed within the parentheses.

          #+NAME: double
          #+BEGIN_SRC emacs-lisp :var input=8
            (* 2 input)
          #+END_SRC

          #+RESULTS: double
          : 16

          #+NAME: squared
          #+BEGIN_SRC emacs-lisp :var input=double(input=1)
            (* input input)
          #+END_SRC

          #+RESULTS: squared
          : 4

literal example, or code block contents
     A code block or literal example block named with a ‘NAME’ keyword,
     followed by brackets (optional for example blocks).

          #+NAME: literal-example
          #+BEGIN_EXAMPLE
            A literal example
            on two lines
          #+END_EXAMPLE

          #+NAME: read-literal-example
          #+BEGIN_SRC emacs-lisp :var x=literal-example[]
            (concatenate #'string x " for you.")
          #+END_SRC

          #+RESULTS: read-literal-example
          : A literal example
          : on two lines for you.

   Indexing variable values enables referencing portions of a variable.
Indexes are 0 based with negative values counting backwards from the
end.  If an index is separated by commas then each subsequent section
indexes as the next dimension.  Note that this indexing occurs _before_
other table-related header arguments are applied, such as ‘hlines’,
‘colnames’ and ‘rownames’.  The following example assigns the last cell
of the first row the table ‘example-table’ to the variable ‘data’:

     #+NAME: example-table
     | 1 | a |
     | 2 | b |
     | 3 | c |
     | 4 | d |

     #+BEGIN_SRC emacs-lisp :var data=example-table[0,-1]
       data
     #+END_SRC

     #+RESULTS:
     : a

   Two integers separated by a colon reference a range of variable
values.  In that case the entire inclusive range is referenced.  For
example the following assigns the middle three rows of ‘example-table’
to ‘data’.

     #+NAME: example-table
     | 1 | a |
     | 2 | b |
     | 3 | c |
     | 4 | d |
     | 5 | 3 |

     #+BEGIN_SRC emacs-lisp :var data=example-table[1:3]
       data
     #+END_SRC

     #+RESULTS:
     | 2 | b |
     | 3 | c |
     | 4 | d |

   To pick the entire range, use an empty index, or the single character
‘*’.  ‘0:-1’ does the same thing.  Example below shows how to reference
the first column only.

     #+NAME: example-table
     | 1 | a |
     | 2 | b |
     | 3 | c |
     | 4 | d |

     #+BEGIN_SRC emacs-lisp :var data=example-table[,0]
       data
     #+END_SRC

     #+RESULTS:
     | 1 | 2 | 3 | 4 |

   Index referencing can be used for tables and code blocks.  Index
referencing can handle any number of dimensions.  Commas delimit
multiple dimensions, as shown below.

     #+NAME: 3D
     #+BEGIN_SRC emacs-lisp
       '(((1  2  3)  (4  5  6)  (7  8  9))
         ((10 11 12) (13 14 15) (16 17 18))
         ((19 20 21) (22 23 24) (25 26 27)))
     #+END_SRC

     #+BEGIN_SRC emacs-lisp :var data=3D[1,,1]
       data
     #+END_SRC

     #+RESULTS:
     | 11 | 14 | 17 |

   Note that row names and column names are not removed prior to
variable indexing.  You need to take them into account, even when
‘colnames’ or ‘rownames’ header arguments remove them.

   Emacs lisp code can also set the values for variables.  To
differentiate a value from Lisp code, Org interprets any value starting
with ‘(’, ‘[’, ‘'’ or ‘`’ as Emacs Lisp code.  The result of evaluating
that code is then assigned to the value of that variable.  The following
example shows how to reliably query and pass the file name of the Org
mode buffer to a code block using headers.  We need reliability here
because the file’s name could change once the code in the block starts
executing.

     #+BEGIN_SRC sh :var filename=(buffer-file-name) :exports both
       wc -w $filename
     #+END_SRC

   Note that values read from tables and lists are not mistakenly
evaluated as Emacs Lisp code, as illustrated in the following example.

     #+NAME: table
     | (a b c) |

     #+HEADER: :var data=table[0,0]
     #+BEGIN_SRC perl
       $data
     #+END_SRC

     #+RESULTS:
     : (a b c)

Using sessions
--------------

Two code blocks can share the same environment.  The ‘session’ header
argument is for running multiple source code blocks under one session.
Org runs code blocks with the same session name in the same interpreter
process.

‘none’
     Default.  Each code block gets a new interpreter process to
     execute.  The process terminates once the block is evaluated.

STRING
     Any string besides ‘none’ turns that string into the name of that
     session.  For example, ‘:session STRING’ names it ‘STRING’.  If
     ‘session’ has no value, then the session name is derived from the
     source language identifier.  Subsequent blocks with the same source
     code language use the same session.  Depending on the language,
     state variables, code from other blocks, and the overall
     interpreted environment may be shared.  Some interpreted languages
     support concurrent sessions when subsequent source code language
     blocks change session names.

   Only languages that provide interactive evaluation can have session
support.  Not all languages provide this support, such as C and ditaa.
Even languages, such as Python and Haskell, that do support interactive
evaluation impose limitations on allowable language constructs that can
run interactively.  Org inherits those limitations for those code blocks
running in a session.

Choosing a working directory
----------------------------

The ‘dir’ header argument specifies the default directory during code
block execution.  If it is absent, then the directory associated with
the current buffer is used.  In other words, supplying ‘:dir DIRECTORY’
temporarily has the same effect as changing the current directory with
‘M-x cd <RET> DIRECTORY’, and then not setting ‘dir’.  Under the
surface, ‘dir’ simply sets the value of the Emacs variable
‘default-directory’.  Setting ‘mkdirp’ header argument to a non-‘nil’
value creates the directory, if necessary.

   Setting ‘dir’ to the symbol ‘attach’ or the string ‘"'attach"’ will
set ‘dir’ to the directory returned by ‘(org-attach-dir)’, set ‘:mkdir
yes’, and insert any file paths, as when using ‘:results file’, which
are under the node’s attachment directory using ‘attachment:’ links
instead of the usual ‘file:’ links.  Any returned path outside of the
attachment directory will use ‘file:’ links as per usual.

   For example, to save the plot file in the ‘Work/’ folder of the home
directory—notice tilde is expanded:

     #+BEGIN_SRC R :file myplot.png :dir ~/Work
       matplot(matrix(rnorm(100), 10), type="l")
     #+END_SRC

   To evaluate the code block on a remote machine, supply a remote
directory name using Tramp syntax.  For example:

     #+BEGIN_SRC R :file plot.png :dir /scp:dand@yakuba.princeton.edu:
       plot(1:10, main=system("hostname", intern=TRUE))
     #+END_SRC

   Org first captures the text results as usual for insertion in the Org
file.  Then Org also inserts a link to the remote file, thanks to Emacs
Tramp.  Org constructs the remote path to the file name from ‘dir’ and
‘default-directory’, as illustrated here:

     [[file:/scp:dand@yakuba.princeton.edu:/home/dand/plot.png][plot.png]]

   When ‘dir’ is used with ‘session’, Org sets the starting directory
for a new session.  But Org does not alter the directory of an already
existing session.

   Do not use ‘dir’ with ‘:exports results’ or with ‘:exports both’ to
avoid Org inserting incorrect links to remote files.  That is because
Org does not expand ‘default directory’ to avoid some underlying
portability issues.

Inserting headers and footers
-----------------------------

The ‘prologue’ header argument is for appending to the top of the code
block for execution, like a reset instruction.  For example, you may use
‘:prologue "reset"’ in a Gnuplot code block or, for every such block:

     (add-to-list 'org-babel-default-header-args:gnuplot
                  '((:prologue . "reset")))


   Likewise, the value of the ‘epilogue’ header argument is for
appending to the end of the code block for execution.


File: org.info,  Node: Evaluating Code Blocks,  Next: Results of Evaluation,  Prev: Environment of a Code Block,  Up: Working with Source Code

16.5 Evaluating Code Blocks
===========================

A note about security: With code evaluation comes the risk of harm.  Org
safeguards by prompting for user’s permission before executing any code
in the source block.  To customize this safeguard, or disable it, see
*note Code Evaluation Security::.

How to evaluate source code
---------------------------

Org captures the results of the code block evaluation and inserts them
in the Org file, right after the code block.  The insertion point is
after a newline and the ‘RESULTS’ keyword.  Org creates the ‘RESULTS’
keyword if one is not already there.  More details in *note Results of
Evaluation::.

   By default, Org enables only Emacs Lisp code blocks for execution.
See *note Languages:: to enable other languages.

   Org provides many ways to execute code blocks.  ‘C-c C-c’ or ‘C-c C-v
e’ with the point on a code block(1) calls the
‘org-babel-execute-src-block’ function, which executes the code in the
block, collects the results, and inserts them in the buffer.

   By calling a named code block(2) from an Org mode buffer or a table.
Org can call the named code blocks from the current Org mode buffer or
from the “Library of Babel” (see *note Library of Babel::).

   The syntax for ‘CALL’ keyword is:

     #+CALL: <name>(<arguments>)
     #+CALL: <name>[<inside header arguments>](<arguments>) <end header arguments>

   The syntax for inline named code blocks is:

     ... call_<name>(<arguments>) ...
     ... call_<name>[<inside header arguments>](<arguments>)[<end header arguments>] ...

   When inline syntax is used, the result is wrapped based on the
variable ‘org-babel-inline-result-wrap’, which by default is set to
‘"=%s="’ to produce verbatim text suitable for markup.

‘<name>’
     This is the name of the code block (see *note Structure of Code
     Blocks::) to be evaluated in the current document.  If the block is
     located in another file, start ‘<name>’ with the file name followed
     by a colon.  For example, in order to execute a block named
     ‘clear-data’ in ‘file.org’, you can write the following:

          #+CALL: file.org:clear-data()

‘<arguments>’
     Org passes arguments to the code block using standard function call
     syntax.  For example, a ‘#+CALL:’ line that passes ‘4’ to a code
     block named ‘double’, which declares the header argument ‘:var
     n=2’, would be written as:

          #+CALL: double(n=4)

     Note how this function call syntax is different from the header
     argument syntax.

‘<inside header arguments>’
     Org passes inside header arguments to the named code block using
     the header argument syntax.  Inside header arguments apply to code
     block evaluation.  For example, ‘[:results output]’ collects
     results printed to stdout during code execution of that block.
     Note how this header argument syntax is different from the function
     call syntax.

‘<end header arguments>’
     End header arguments affect the results returned by the code block.
     For example, ‘:results html’ wraps the results in a ‘#+BEGIN_EXPORT
     html’ block before inserting the results in the Org buffer.

Limit code block evaluation
---------------------------

The ‘eval’ header argument can limit evaluation of specific code blocks
and ‘CALL’ keyword.  It is useful for protection against evaluating
untrusted code blocks by prompting for a confirmation.

‘yes’
     Org evaluates the source code, possibly asking permission according
     to ‘org-confirm-babel-evaluate’.

‘never’ or ‘no’
     Org never evaluates the source code.

‘query’
     Org prompts the user for permission to evaluate the source code.

‘never-export’ or ‘no-export’
     Org does not evaluate the source code when exporting, yet the user
     can evaluate it interactively.

‘query-export’
     Org prompts the user for permission to evaluate the source code
     during export.

   If ‘eval’ header argument is not set, then Org determines whether to
evaluate the source code from the ‘org-confirm-babel-evaluate’ variable
(see *note Code Evaluation Security::).

Cache results of evaluation
---------------------------

The ‘cache’ header argument is for caching results of evaluating code
blocks.  Caching results can avoid re-evaluating a code block that have
not changed since the previous run.  To benefit from the cache and avoid
redundant evaluations, the source block must have a result already
present in the buffer, and neither the header arguments—including the
value of ‘var’ references—nor the text of the block itself has changed
since the result was last computed.  This feature greatly helps avoid
long-running calculations.  For some edge cases, however, the cached
results may not be reliable.

   The caching feature is best for when code blocks are pure functions,
that is functions that return the same value for the same input
arguments (see *note Environment of a Code Block::), and that do not
have side effects, and do not rely on external variables other than the
input arguments.  Functions that depend on a timer, file system objects,
and random number generators are clearly unsuitable for caching.

   A note of warning: when ‘cache’ is used in a session, caching may
cause unexpected results.

   When the caching mechanism tests for any source code changes, it does
not expand noweb style references (see *note Noweb Reference Syntax::).

   The ‘cache’ header argument can have one of two values: ‘yes’ or
‘no’.

‘no’
     Default.  No caching of results; code block evaluated every time.

‘yes’
     Whether to run the code or return the cached results is determined
     by comparing the SHA1 hash value of the combined code block and
     arguments passed to it.  This hash value is packed on the
     ‘#+RESULTS:’ line from previous evaluation.  When hash values
     match, Org does not evaluate the code block.  When hash values
     mismatch, Org evaluates the code block, inserts the results,
     recalculates the hash value, and updates ‘#+RESULTS:’ line.

   In this example, both functions are cached.  But ‘caller’ runs only
if the result from ‘random’ has changed since the last run.

     #+NAME: random
     #+BEGIN_SRC R :cache yes
       runif(+1)
     #+END_SRC

     #+RESULTS[a2a72cd647ad44515fab62e144796432793d68e1]: random
     0.4659510825295

     #+NAME: caller
     #+BEGIN_SRC emacs-lisp :var x=random :cache yes
       x
     #+END_SRC

     #+RESULTS[bec9c8724e397d5df3b696502df3ed7892fc4f5f]: caller
     0.254227238707244

   ---------- Footnotes ----------

   (1) The option ‘org-babel-no-eval-on-ctrl-c-ctrl-c’ can be used to
remove code evaluation from the ‘C-c C-c’ key binding.

   (2) Actually, the constructs ‘call_<name>()’ and ‘src_<lang>{}’ are
not evaluated when they appear in a keyword (see *note In-buffer
Settings::).


File: org.info,  Node: Results of Evaluation,  Next: Exporting Code Blocks,  Prev: Evaluating Code Blocks,  Up: Working with Source Code

16.6 Results of Evaluation
==========================

How Org handles results of a code block execution depends on many header
arguments working together.  The primary determinant, however, is the
‘results’ header argument.  It accepts four classes of options.  Each
code block can take only one option per class:

Collection
     For how the results should be collected from the code block;

Type
     For which type of result the code block will return; affects how
     Org processes and inserts results in the Org buffer;

Format
     For the result; affects how Org processes results;

Handling
     For inserting results once they are properly formatted.

Collection
----------

Collection options specify the results.  Choose one of the options; they
are mutually exclusive.

‘value’
     Default for most Babel libraries(1).  Functional mode.  Org gets
     the value by wrapping the code in a function definition in the
     language of the source block.  That is why when using ‘:results
     value’, code should execute like a function and return a value.
     For languages like Python, an explicit ‘return’ statement is
     mandatory when using ‘:results value’.  Result is the value
     returned by the last statement in the code block.

     When evaluating the code block in a session (see *note Environment
     of a Code Block::), Org passes the code to an interpreter running
     as an interactive Emacs inferior process.  Org gets the value from
     the source code interpreter’s last statement output.  Org has to
     use language-specific methods to obtain the value.  For example,
     from the variable ‘_’ in Ruby, and the value of ‘.Last.value’ in R.

‘output’
     Scripting mode.  Org passes the code to an external process running
     the interpreter.  Org returns the contents of the standard output
     stream as text results.

     When using a session, Org passes the code to the interpreter
     running as an interactive Emacs inferior process.  Org concatenates
     any text output from the interpreter and returns the collection as
     a result.

Type
----

Type tells what result types to expect from the execution of the code
block.  Choose one of the options; they are mutually exclusive.

   The default behavior is to automatically determine the result type.
The result type detection depends on the code block language, as
described in the documentation for individual languages.  See *note
Languages::.

‘table’
‘vector’
     Interpret the results as an Org table.  If the result is a single
     value, create a table with one row and one column.  Usage example:
     ‘:results value table’.

     In-between each table row or below the table headings, sometimes
     results have horizontal lines, which are also known as “hlines”.
     The ‘hlines’ argument with the default ‘no’ value strips such lines
     from the input table.  For most code, this is desirable, or else
     those ‘hline’ symbols raise unbound variable errors.  A ‘yes’
     accepts such lines, as demonstrated in the following example.

          #+NAME: many-cols
          | a | b | c |
          |---+---+---|
          | d | e | f |
          |---+---+---|
          | g | h | i |

          #+NAME: no-hline
          #+BEGIN_SRC python :var tab=many-cols :hlines no
            return tab
          #+END_SRC

          #+RESULTS: no-hline
          | a | b | c |
          | d | e | f |
          | g | h | i |

          #+NAME: hlines
          #+BEGIN_SRC python :var tab=many-cols :hlines yes
            return tab
          #+END_SRC

          #+RESULTS: hlines
          | a | b | c |
          |---+---+---|
          | d | e | f |
          |---+---+---|
          | g | h | i |

‘list’
     Interpret the results as an Org list.  If the result is a single
     value, create a list of one element.

‘scalar’
‘verbatim’
     Interpret literally and insert as quoted text.  Do not create a
     table.  Usage example: ‘:results value verbatim’.

‘file’
     Interpret as a filename.  Save the results of execution of the code
     block to that file, then insert a link to it.  You can control both
     the filename and the description associated to the link.

     Org first tries to generate the filename from the value of the
     ‘file’ header argument and the directory specified using the
     ‘output-dir’ header arguments.  If ‘output-dir’ is not specified,
     Org assumes it is the current directory.

          #+BEGIN_SRC asymptote :results value file :file circle.pdf :output-dir img/
            size(2cm);
            draw(unitcircle);
          #+END_SRC

     If ‘file’ header argument is missing, Org generates the base name
     of the output file from the name of the code block, and its
     extension from the ‘file-ext’ header argument.  In that case, both
     the name and the extension are mandatory.

     Result can also be interpreted as path to file.  See ‘:results
     link’.

          #+name: circle
          #+BEGIN_SRC asymptote :results value file :file-ext pdf
            size(2cm);
            draw(unitcircle);
          #+END_SRC

     The ‘file-desc’ header argument defines the description (see *note
     Link Format::) for the link.  If ‘file-desc’ is present but has no
     value, the ‘file’ value is used as the link description.  When this
     argument is not present, the description is omitted.  If you want
     to provide the ‘file-desc’ argument but omit the description, you
     can provide it with an empty vector (i.e., :file-desc []).

     By default, Org assumes that a table written to a file has
     TAB-delimited output.  You can choose a different separator with
     the ‘sep’ header argument.

     The ‘file-mode’ header argument defines the file permissions.  To
     make it executable, use ‘:file-mode (identity #o755)’.

          #+BEGIN_SRC shell :results file :file script.sh :file-mode (identity #o755)
            echo "#!/bin/bash"
            echo "echo Hello World"
          #+END_SRC

Format
------

Format pertains to the type of the result returned by the code block.
Choose one of the options; they are mutually exclusive.  The default
follows from the type specified above.

‘code’
     Result enclosed in a code block.  Useful for parsing.  Usage
     example: ‘:results value code’.

‘drawer’
     Result wrapped in a ‘RESULTS’ drawer.  Useful for containing ‘raw’
     or ‘org’ results for later scripting and automated processing.
     Usage example: ‘:results value drawer’.

‘html’
     Results enclosed in a ‘BEGIN_EXPORT html’ block.  Usage example:
     ‘:results value html’.

‘latex’
     Results enclosed in a ‘BEGIN_EXPORT latex’ block.  Usage example:
     ‘:results value latex’.

‘link’
‘graphics’
     When used along with ‘file’ type, the result is a link to the file
     specified in ‘:file’ header argument.  However, unlike plain ‘file’
     type, code block output is not written to the disk.  The block is
     expected to generate the file by its side-effects only, as in the
     following example:

          #+begin_src shell :results file link :file "org-mode-unicorn.svg"
            wget -c "https://orgmode.org/resources/img/org-mode-unicorn.svg"
          #+end_src

          #+RESULTS:
          [[file:org-mode-unicorn.svg]]

     If ‘:file’ header argument is omitted, interpret source block
     result as the file path.

‘org’
     Results enclosed in a ‘BEGIN_SRC org’ block.  For comma-escape,
     either ‘<TAB>’ in the block, or export the file.  Usage example:
     ‘:results value org’.

‘pp’
     Result converted to pretty-print source code.  Enclosed in a code
     block.  Languages supported: Emacs Lisp, Python, and Ruby.  Usage
     example: ‘:results value pp’.

‘raw’
     Interpreted as raw Org mode.  Inserted directly into the buffer.
     Aligned if it is a table.  Usage example: ‘:results value raw’.

   The ‘wrap’ header argument unconditionally marks the results block by
appending strings to ‘#+BEGIN_’ and ‘#+END_’.  If no string is
specified, Org wraps the results in a ‘#+BEGIN_results’ ...
‘#+END_results’ block.  It takes precedent over the ‘results’ value
listed above.  E.g.,

     #+BEGIN_SRC emacs-lisp :results html :wrap EXPORT markdown
     "<blink>Welcome back to the 90's</blink>"
     #+END_SRC

     #+RESULTS:
     #+BEGIN_EXPORT markdown
     <blink>Welcome back to the 90's</blink>
     #+END_EXPORT

Handling
--------

Handling options after collecting the results.  Choose one of the
options; they are mutually exclusive.

‘replace’
     Default.  Insert results in the Org buffer.  Remove previous
     results.  Usage example: ‘:results output replace’.

‘silent’
     Do not insert results in the Org mode buffer, but echo them in the
     minibuffer.  Usage example: ‘:results output silent’.

‘none’
     Compute results, but do not do anything with them.  No inserting in
     the Org mode buffer nor echo them in the minibuffer.  The results
     can still be used when referenced from another code block.  Usage
     example: ‘:results none’.

‘discard’
     Ignore the results completely.  This option is similar to ‘none’,
     but no processing is performed on the return value.  Calling the
     code block programmatically (see *note How to evaluate source
     code::) or by reference (see *note Passing arguments:: and *note
     Noweb Reference Syntax::) will always yield ‘nil’.

‘append’
     Append results to the Org buffer.  Latest results are at the
     bottom.  Does not remove previous results.  Usage example:
     ‘:results output append’.

‘prepend’
     Prepend results to the Org buffer.  Latest results are at the top.
     Does not remove previous results.  Usage example: ‘:results output
     prepend’.

Post-processing
---------------

The ‘post’ header argument is for post-processing results from block
evaluation.  When ‘post’ has any value, Org binds the results to
‘*this*’ variable for easy passing to ‘var’ header argument
specifications (see *note Environment of a Code Block::).  That makes
results available to other code blocks, or even for direct Emacs Lisp
code execution.

   The following two examples illustrate ‘post’ header argument in
action.  The first one shows how to attach an ‘ATTR_LATEX’ keyword using
‘post’.

     #+NAME: attr_wrap
     #+BEGIN_SRC sh :var data="" :var width="\\textwidth" :results output
       echo "#+ATTR_LATEX: :width $width"
       echo "$data"
     #+END_SRC

     #+HEADER: :file /tmp/it.png
     #+BEGIN_SRC dot :post attr_wrap(width="5cm", data=*this*) :results drawer
       digraph{
               a -> b;
               b -> c;
               c -> a;
       }
     #+end_src

     #+RESULTS:
     :RESULTS:
     #+ATTR_LATEX :width 5cm
     [[file:/tmp/it.png]]
     :END:

   The second example shows use of ‘colnames’ header argument in ‘post’
to pass data between code blocks.

     #+NAME: round-tbl
     #+BEGIN_SRC emacs-lisp :var tbl="" fmt="%.3f"
       (mapcar (lambda (row)
                 (mapcar (lambda (cell)
                           (if (numberp cell)
                               (format fmt cell)
                             cell))
                         row))
               tbl)
     #+end_src

     #+BEGIN_SRC R :colnames yes :post round-tbl[:colnames yes](*this*)
       set.seed(42)
       data.frame(foo=rnorm(1))
     #+END_SRC

     #+RESULTS:
     |   foo |
     |-------|
     | 1.371 |

   ---------- Footnotes ----------

   (1) Actually, the constructs ‘call_<name>()’ and ‘src_<lang>{}’ are
not evaluated when they appear in a keyword (see *note In-buffer
Settings::).


File: org.info,  Node: Exporting Code Blocks,  Next: Extracting Source Code,  Prev: Results of Evaluation,  Up: Working with Source Code

16.7 Exporting Code Blocks
==========================

It is possible to export the _code_ of code blocks, the _results_ of
code block evaluation, _both_ the code and the results of code block
evaluation, or _none_.  Org defaults to exporting _code_ for most
languages and _results_ for inline code blocks.  For some languages,
such as ditaa, Org defaults to _results_ both in ordinary source blocks
and in inline source blocks.  To export just the body of code blocks,
see *note Literal Examples::.  To selectively export subtrees of an Org
document, see *note Exporting::.

   The ‘exports’ header argument is to specify if that part of the Org
file is exported to, say, HTML or LaTeX formats.

‘code’
     The default.  The body of code is included into the exported file.
     Example: ‘:exports code’.

‘results’
     The results of evaluation of the code is included in the exported
     file.  Example: ‘:exports results’.

‘both’
     Both the code and results of evaluation are included in the
     exported file.  Example: ‘:exports both’.

‘none’
     Neither the code nor the results of evaluation is included in the
     exported file.  Whether the code is evaluated at all depends on
     other options.  Example: ‘:exports none’.

   If a source block is named using ‘NAME’ keyword, the same name will
be assigned to the results of evaluation.  This way, fuzzy links
pointing to the named source blocks exported using ‘:exports results’
will remain valid and point to the results of evaluation.

   Results of evaluation of a named block can also be explicitly named
using a separate ‘NAME’ keyword.  The name value set via ‘NAME’ keyword
will be preferred over the parent source block.

     #+NAME: code name
     #+BEGIN_SRC emacs-lisp :exports both value
     (+ 1 2)
     #+END_SRC

     #+NAME: results name
     #+RESULTS: code name
     3

     This [[code name][link]] will point to the code block.
     Another [[results name][link]] will point to the results.

   Explicit setting of the result name may be necessary when a named
code block is exported using ‘:exports both’.  Links to such block may
arbitrarily point either to the code block or to its results when
results do not have a distinct name.

   Note that all the links pointing to a source block exported using
‘:exports none’ will be broken.  This will make export process fail,
unless broken links are allowed during export (see *note Export
Settings::).

   To stop Org from evaluating code blocks to speed exports, use the
header argument ‘:eval never-export’ (see *note Evaluating Code
Blocks::).  To stop Org from evaluating code blocks for greater
security, set the ‘org-export-use-babel’ variable to ‘nil’, but
understand that header arguments will have no effect.

   Turning off evaluation comes in handy when batch processing.  For
example, markup languages for wikis, which have a high risk of untrusted
code.  Stopping code block evaluation also stops evaluation of all
header arguments of the code block.  This may not be desirable in some
circumstances.  So during export, to allow evaluation of just the header
arguments but not any code evaluation in the source block, set ‘:eval
never-export’ (see *note Evaluating Code Blocks::).

   Org never evaluates code blocks in commented subtrees when exporting
(see *note Comment Lines::).  On the other hand, Org does evaluate code
blocks in subtrees excluded from export (see *note Export Settings::).


File: org.info,  Node: Extracting Source Code,  Next: Languages,  Prev: Exporting Code Blocks,  Up: Working with Source Code

16.8 Extracting Source Code
===========================

Extracting source code from code blocks is a basic task in literate
programming.  Org has features to make this easy.  In literate
programming parlance, documents on creation are _woven_ with code and
documentation, and on export, the code is tangled for execution by a
computer.  Org facilitates weaving and tangling for producing,
maintaining, sharing, and exporting literate programming documents.  Org
provides extensive customization options for extracting source code.

   When Org tangles code blocks, it expands, merges, and transforms
them.  Then Org recomposes them into one or more separate files, as
configured through the options.  During this tangling process, Org
expands variables in the source code, and resolves any noweb style
references (see *note Noweb Reference Syntax::).

Header arguments
----------------

The ‘tangle’ header argument specifies if the code block is exported to
source file(s).

‘yes’
     Export the code block to source file.  The file name for the source
     file is derived from the name of the Org file, and the file
     extension is derived from the source code language identifier.
     Example: ‘:tangle yes’.

‘no’
     The default.  Do not extract the code in a source code file.
     Example: ‘:tangle no’.

FILENAME
     Export the code block to source file whose file name is derived
     from any string passed to the ‘tangle’ header argument.  Org
     derives the file name as being relative to the directory of the Org
     file’s location.  Example: ‘:tangle FILENAME’.

   The ‘mkdirp’ header argument creates parent directories for tangled
files if the directory does not exist.  A ‘yes’ value enables directory
creation whereas ‘no’ inhibits it.

   The ‘comments’ header argument controls inserting comments into
tangled files.  These are above and beyond whatever comments may already
exist in the code block.

‘no’
     The default.  Do not insert any extra comments during tangling.

‘link’
     Wrap the code block in comments.  Include links pointing back to
     the place in the Org file from where the code was tangled.

‘yes’
     Kept for backward compatibility; same as ‘link’.

‘org’
     Nearest headline text from Org file is inserted as comment.  The
     exact text that is inserted is picked from the leading context of
     the source block.

‘both’
     Includes both ‘link’ and ‘org’ options.

‘noweb’
     Includes ‘link’ option, expands noweb references (see *note Noweb
     Reference Syntax::), and wraps them in link comments inside the
     body of the code block.

   The ‘padline’ header argument controls insertion of newlines to pad
source code in the tangled file.

‘yes’
     Default.  Insert a newline before and after each code block in the
     tangled file.

‘no’
     Do not insert newlines to pad the tangled code blocks.

   The ‘shebang’ header argument can turn results into executable script
files.  By setting it to a string value—for example, ‘:shebang
"#!/bin/bash"’—Org inserts that string as the first line of the tangled
file that the code block is extracted to.  Org then turns on the tangled
file’s executable permission.

   The ‘tangle-mode’ header argument specifies what permissions to set
for tangled files by ‘set-file-modes’.  Permissions are given by an
octal value, which can be provided calling the ‘identity’ function on an
elisp octal value.  For instance, to create a read-only file one may use
‘:tangle-mode (identity #o444)’.  To reduce the verbosity required, a
octal shorthand is defined, ‘oXXX’ (‘o’ for octal).  Using this, our
read-only example is ‘:tangle-mode o444’.  Omitting the ‘o’ prefix will
cause the argument to be interpreted as an integer, which can lead to
unexpected results (‘444’ is the same as ‘o674’).  Two other shorthands
are recognized, ls-style strings like ‘rw-r--r--’, and chmod-style
permissions like ‘g+w’.  Note that chmod-style permissions are based on
‘org-babel-tangle-default-file-mode’, which is ‘#o544’ by default.

   When ‘:tangle-mode’ and ‘:shebang’ are both specified, the give
‘:tangle-mode’ will override the permissions from ‘:shebang’.  When
multiple source code blocks tangle to a single file with conflicting
‘:tangle-mode’ header arguments, Org’s behavior is undefined.

   By default Org expands code blocks during tangling.  The ‘no-expand’
header argument turns off such expansions.  Note that one side-effect of
expansion by ‘org-babel-expand-src-block’ also assigns values (see *note
Environment of a Code Block::) to variables.  Expansions also replace
noweb references with their targets (see *note Noweb Reference
Syntax::).  Some of these expansions may cause premature assignment,
hence this option.  This option makes a difference only for tangling.
It has no effect when exporting since code blocks for execution have to
be expanded anyway.

Functions
---------

‘org-babel-tangle’
     Tangle the current file.  Bound to ‘C-c C-v t’.

     With prefix argument only tangle the current code block.

‘org-babel-tangle-file’
     Choose a file to tangle.  Bound to ‘C-c C-v f’.

Tangle hooks
------------

‘org-babel-pre-tangle-hook’
     This hook is run before the tangle process begins.  The active
     buffer is buffer to be tangled.

‘org-babel-tangle-body-hook’
     This hook is run from a temporary buffer containing expanded code
     of every tangled code block.  The hook can modify the expanded code
     as needed.  The contents of the current buffer will be used as
     actual code block expansion.

‘org-babel-post-tangle-hook’
     This hook is run from within code files tangled by
     ‘org-babel-tangle’, making it suitable for post-processing,
     compilation, and evaluation of code in the tangled files.

‘org-babel-tangle-finished-hook’
     This hook is run after post-tangle hooks, in the original buffer.

Jumping between code and Org
----------------------------

Debuggers normally link errors and messages back to the source code.
But for tangled files, we want to link back to the Org file, not to the
tangled source file.  To make this extra jump, Org uses
‘org-babel-tangle-jump-to-org’ function with two additional source code
block header arguments:

  1. Set ‘padline’ to true—this is the default setting.
  2. Set ‘comments’ to ‘link’, which makes Org insert links to the Org
     file.


File: org.info,  Node: Languages,  Next: Editing Source Code,  Prev: Extracting Source Code,  Up: Working with Source Code

16.9 Languages
==============

Code blocks in dozens of languages are supported.  See Worg website for
language specific documentation
(https://orgmode.org/worg/org-contrib/babel/languages/index.html).

   By default, only Emacs Lisp is enabled for evaluation.  To enable or
disable other languages, customize the ‘org-babel-load-languages’
variable either through the Emacs customization interface, or by adding
code to the init file as shown next.

   In this example, evaluation is disabled for Emacs Lisp, and enabled
for R.

     (org-babel-do-load-languages
      'org-babel-load-languages
      '((emacs-lisp . nil)
        (R . t)))

   Note that this is not the only way to enable a language.  Org also
enables languages when loaded with ‘require’ statement.  For example,
the following enables execution of Clojure code blocks:

     (require 'ob-clojure)


File: org.info,  Node: Editing Source Code,  Next: Noweb Reference Syntax,  Prev: Languages,  Up: Working with Source Code

16.10 Editing Source Code
=========================

Use ‘C-c '’ to edit the current code block.  It opens a new major mode
edit buffer containing the body of the source code block, ready for any
edits.  Use ‘C-c '’ again to close the buffer and return to the Org
buffer.

   ‘C-x C-s’ saves the buffer and updates the contents of the Org
buffer.  Set ‘org-edit-src-auto-save-idle-delay’ to save the base buffer
after a certain idle delay time.  Set ‘org-edit-src-turn-on-auto-save’
to auto-save this buffer into a separate file using Auto-save mode.

   While editing the source code in the major mode, the Org Src minor
mode remains active.  It provides these customization variables as
described below.  For even more variables, look in the customization
group ‘org-edit-structure’.

‘org-src-lang-modes’
     If an Emacs major-mode named ‘<LANG>-mode’ exists, where <LANG> is
     the language identifier from code block’s header line, then the
     edit buffer uses that major mode.  Use this variable to arbitrarily
     map language identifiers to major modes.

     When language identifier is omitted in the src block, Org mode’s
     behavior is undefined.

‘org-src-window-setup’
     For specifying Emacs window arrangement when the new edit buffer is
     created.

‘org-src-preserve-indentation’
     Default is ‘nil’.  Source code is indented.  This indentation
     applies during export or tangling, and depending on the context,
     may alter leading spaces and tabs.  When non-‘nil’, source code is
     aligned with the leftmost column.  No lines are modified during
     export or tangling, which is very useful for white-space sensitive
     languages, such as Python.

‘org-src-ask-before-returning-to-edit-buffer’
     When ‘nil’, Org returns to the edit buffer without further prompts.
     The default prompts for a confirmation.

   Fontification of code blocks can give visual separation of text and
code on the display page.  Set ‘org-src-fontify-natively’ to non-‘nil’
to turn on native code fontification in the _Org_ buffer.  The
fontification follows the major mode used to edit the code block (see
‘org-src-lang-modes’ above).

   To further customize the appearance of ‘org-block’ for specific
languages, customize ‘org-src-block-faces’.  The following example
shades the background of regular blocks, and colors source blocks only
for Python and Emacs Lisp languages.

     (require 'color)
     (set-face-attribute 'org-block nil :background
                         (color-darken-name
                          (face-attribute 'default :background) 3))

     (setq org-src-block-faces '(("emacs-lisp" (:background "#EEE2FF"))
                                 ("python" (:background "#E5FFB8"))))


File: org.info,  Node: Noweb Reference Syntax,  Next: Library of Babel,  Prev: Editing Source Code,  Up: Working with Source Code

16.11 Noweb Reference Syntax
============================

Source code blocks can include references to other source code blocks,
using a noweb(1) style syntax:

     <<CODE-BLOCK-ID>>

where CODE-BLOCK-ID refers to either the ‘NAME’ of a single source code
block, or a collection of one or more source code blocks sharing the
same ‘noweb-ref’ header argument (see *note Using Header Arguments::).
Org can replace such references with the source code of the block or
blocks being referenced, or, in the case of a single source code block
named with ‘NAME’, with the results of an evaluation of that block.

   The ‘noweb’ header argument controls expansion of noweb syntax
references.  Expansions occur when source code blocks are evaluated,
tangled, or exported.

‘no’
     Default.  No expansion of noweb syntax references in the body of
     the code when evaluating, tangling, or exporting.

‘yes’
     Expansion of noweb syntax references in the body of the code block
     when evaluating, tangling, or exporting.

‘tangle’
     Expansion of noweb syntax references in the body of the code block
     when tangling.  No expansion when evaluating or exporting.

‘strip-tangle’
     Expansion of noweb syntax references in the body of the code block
     when evaluating or exporting.  Removes noweb syntax references when
     exporting.

‘no-export’
     Expansion of noweb syntax references in the body of the code block
     when evaluating or tangling.  No expansion when exporting.

‘strip-export’
     Expansion of noweb syntax references in the body of the code block
     when expanding prior to evaluating or tangling.  Removes noweb
     syntax references when exporting.

‘eval’
     Expansion of noweb syntax references in the body of the code block
     only before evaluating.

   In the most simple case, the contents of a single source block is
inserted within other blocks.  Thus, in following example,

     #+NAME: initialization
     #+BEGIN_SRC emacs-lisp
       (setq sentence "Never a foot too far, even.")
     #+END_SRC

     #+BEGIN_SRC emacs-lisp :noweb yes
       <<initialization>>
       (reverse sentence)
     #+END_SRC

the second code block is expanded as

     #+BEGIN_SRC emacs-lisp :noweb yes
       (setq sentence "Never a foot too far, even.")
       (reverse sentence)
     #+END_SRC

   Note that noweb expansion does not automatically carry over ‘:var’
header arguments(2).

   You may also include the contents of multiple blocks sharing a common
‘noweb-ref’ header argument, which can be set at the file, subtree, or
code block level.  In the example Org file shown next, the body of the
source code in each block is extracted for concatenation to a pure code
file when tangled.

     #+BEGIN_SRC sh :tangle yes :noweb yes :shebang #!/bin/sh
       <<fullest-disk>>
     #+END_SRC
     * the mount point of the fullest disk
       :PROPERTIES:
       :header-args: :noweb-ref fullest-disk
       :END:

     ** query all mounted disks
     #+BEGIN_SRC sh
       df \
     #+END_SRC

     ** strip the header row
     #+BEGIN_SRC sh
       |sed '1d' \
     #+END_SRC

     ** output mount point of fullest disk
     #+BEGIN_SRC sh
       |awk '{if (u < +$5) {u = +$5; m = $6}} END {print m}'
     #+END_SRC

   By default a newline separates each noweb reference concatenation.
To use a different separator, edit the ‘noweb-sep’ header argument.

   Alternatively, Org can include the results of evaluation of a single
code block rather than its body.  Evaluation occurs when parentheses,
possibly including arguments, are appended to the code block name, as
shown below.

     <<NAME(optional arguments)>>

   Note that in this case, a code block name set by ‘NAME’ keyword is
required; the reference set by ‘noweb-ref’ will not work when evaluation
is desired.

   Here is an example that demonstrates how the exported content changes
when noweb style references are used with parentheses versus without.
Given:

     #+NAME: some-code
     #+BEGIN_SRC python :var num=0 :results output :exports none
       print(num*10)
     #+END_SRC

this code block:

     #+BEGIN_SRC text :noweb yes
       <<some-code>>
     #+END_SRC

expands to:

     print(num*10)

   Below, a similar noweb style reference is used, but with parentheses,
while setting a variable ‘num’ to 10:

     #+BEGIN_SRC text :noweb yes
       <<some-code(num=10)>>
     #+END_SRC

Note that the expansion now contains the results of the code block
‘some-code’, not the code block itself:

     100

   Noweb insertions honor prefix characters that appear before the noweb
syntax reference.  This behavior is illustrated in the following
example.  Because the ‘<<example>>’ noweb reference appears behind the
SQL comment syntax, each line of the expanded noweb reference is
commented.  With:

     #+NAME: example
     #+BEGIN_SRC text
       this is the
       multi-line body of example
     #+END_SRC

this code block:

     #+BEGIN_SRC sql :noweb yes
      ---<<example>>
     #+END_SRC

expands to:

     #+BEGIN_SRC sql :noweb yes
      ---this is the
      ---multi-line body of example
     #+END_SRC

   Since this change does not affect noweb replacement text without
newlines in them, inline noweb references are acceptable.

   This feature can also be used for management of indentation in
exported code snippets.  With:

     #+NAME: if-true
     #+BEGIN_SRC python :exports none
       print('do things when true')
     #+end_src

     #+name: if-false
     #+begin_src python :exports none
       print('do things when false')
     #+end_src

this code block:

     #+begin_src python :noweb yes :results output
       if true:
           <<if-true>>
       else:
           <<if-false>>
     #+end_src

expands to:

     if true:
         print('do things when true')
     else:
         print('do things when false')

   This prefix behavior can be turned off in a block by setting the
‘noweb-prefix’ header argument to ‘no’, as in:

     #+BEGIN_SRC elisp :noweb-prefix no
       (setq example-data "<<example>>")
     #+END_SRC

which expands to:

     (setq example-data "this is the
     multi-line body of example")

   When in doubt about the outcome of a source code block expansion, you
can preview the results with the following command:

‘C-c C-v v’ or ‘C-c C-v C-v’ (‘org-babel-expand-src-block’)
     Expand the current source code block according to its header
     arguments and pop open the results in a preview buffer.

   ---------- Footnotes ----------

   (1) For noweb literate programming details, see
<https://www.cs.tufts.edu/~nr/noweb/>.

   (2) In the following example, attempting to evaluate the second code
block will give an error, because the variables defined in the first
code block will not be defined in the second block.

     #+NAME: get-prompt
     #+BEGIN_SRC emacs-lisp :var prompt="root> " :var command="ls"
       (concat prompt command)
     #+END_SRC

     #+RESULTS: get-prompt
     : root> ls

     #+BEGIN_SRC emacs-lisp :noweb yes
       <<get-prompt>>
     #+END_SRC

   The previous block is expanded without setting ‘prompt’ and ‘command’
values.

     #+BEGIN_SRC emacs-lisp
       (concat prompt command)
     #+END_SRC


File: org.info,  Node: Library of Babel,  Next: Key bindings and Useful Functions,  Prev: Noweb Reference Syntax,  Up: Working with Source Code

16.12 Library of Babel
======================

The “Library of Babel” is a collection of code blocks.  Like a function
library, these code blocks can be called from other Org files.  A
collection of useful code blocks is available on Worg
(https://orgmode.org/worg/library-of-babel.html).  For remote code block
evaluation syntax, see *note Evaluating Code Blocks::.

   For any user to add code to the library, first save the code in
regular code blocks of an Org file, and then load the Org file with
‘org-babel-lob-ingest’, which is bound to ‘C-c C-v i’.


File: org.info,  Node: Key bindings and Useful Functions,  Next: Batch Execution,  Prev: Library of Babel,  Up: Working with Source Code

16.13 Key bindings and Useful Functions
=======================================

Many common Org mode key sequences are re-bound depending on the
context.

   Active key bindings in code blocks:

Key binding    Function
--------------------------------------------------------
‘C-c C-c’      ‘org-babel-execute-src-block’
‘C-c C-o’      ‘org-babel-open-src-block-result’
‘M-<UP>’       ‘org-babel-load-in-session’
‘M-<DOWN>’     ‘org-babel-pop-to-session’

   Active key bindings in Org mode buffer:

Key binding                      Function
--------------------------------------------------------------------------
‘C-c C-v p’ or ‘C-c C-v C-p’     ‘org-babel-previous-src-block’
‘C-c C-v n’ or ‘C-c C-v C-n’     ‘org-babel-next-src-block’
‘C-c C-v e’ or ‘C-c C-v C-e’     ‘org-babel-execute-maybe’
‘C-c C-v o’ or ‘C-c C-v C-o’     ‘org-babel-open-src-block-result’
‘C-c C-v v’ or ‘C-c C-v C-v’     ‘org-babel-expand-src-block’
‘C-c C-v u’ or ‘C-c C-v C-u’     ‘org-babel-goto-src-block-head’
‘C-c C-v g’ or ‘C-c C-v C-g’     ‘org-babel-goto-named-src-block’
‘C-c C-v r’ or ‘C-c C-v C-r’     ‘org-babel-goto-named-result’
‘C-c C-v b’ or ‘C-c C-v C-b’     ‘org-babel-execute-buffer’
‘C-c C-v s’ or ‘C-c C-v C-s’     ‘org-babel-execute-subtree’
‘C-c C-v d’ or ‘C-c C-v C-d’     ‘org-babel-demarcate-block’
‘C-c C-v t’ or ‘C-c C-v C-t’     ‘org-babel-tangle’
‘C-c C-v f’ or ‘C-c C-v C-f’     ‘org-babel-tangle-file’
‘C-c C-v c’ or ‘C-c C-v C-c’     ‘org-babel-check-src-block’
‘C-c C-v j’ or ‘C-c C-v C-j’     ‘org-babel-insert-header-arg’
‘C-c C-v l’ or ‘C-c C-v C-l’     ‘org-babel-load-in-session’
‘C-c C-v i’ or ‘C-c C-v C-i’     ‘org-babel-lob-ingest’
‘C-c C-v I’ or ‘C-c C-v C-I’     ‘org-babel-view-src-block-info’
‘C-c C-v z’ or ‘C-c C-v C-z’     ‘org-babel-switch-to-session-with-code’
‘C-c C-v a’ or ‘C-c C-v C-a’     ‘org-babel-sha1-hash’
‘C-c C-v h’ or ‘C-c C-v C-h’     ‘org-babel-describe-bindings’
‘C-c C-v x’ or ‘C-c C-v C-x’     ‘org-babel-do-key-sequence-in-edit-buffer’


File: org.info,  Node: Batch Execution,  Prev: Key bindings and Useful Functions,  Up: Working with Source Code

16.14 Batch Execution
=====================

Org mode features, including working with source code facilities can be
invoked from the command line.  This enables building shell scripts for
batch processing, running automated system tasks, and expanding Org
mode’s usefulness.

   The sample script shows batch processing of multiple files using
‘org-babel-tangle’.

     #!/bin/sh
     # Tangle files with Org mode
     #
     emacs -Q --batch --eval "
         (progn
           (require 'ob-tangle)
           (dolist (file command-line-args-left)
             (with-current-buffer (find-file-noselect file)
               (org-babel-tangle))))
       " "$@"


File: org.info,  Node: Miscellaneous,  Next: Hacking,  Prev: Working with Source Code,  Up: Top

17 Miscellaneous
****************

* Menu:

* Completion::                   ‘M-<TAB>’ guesses completions.
* Structure Templates::          Quick insertion of structural elements.
* Speed Keys::                   Electric commands at the beginning of a headline.
* Clean View::                   Getting rid of leading stars in the outline.
* Execute commands in the active region:: Execute commands on multiple items in Org or agenda view.
* Dynamic Headline Numbering::   Display and update outline numbering.
* The Very Busy C-c C-c Key:: When in doubt, press ‘C-c C-c’.
* In-buffer Settings::           Overview of keywords.
* Regular Expressions::          Elisp regular expressions.
* Org Syntax::                   Formal description of Org’s syntax.
* Documentation Access::         Read documentation about current syntax.
* Escape Character::             Prevent Org from interpreting your writing.
* Code Evaluation Security::     Org files evaluate in-line code.
* Interaction::                  With other Emacs packages.
* TTY Keys::                     Using Org on a tty.
* Protocols::                    External access to Emacs and Org.
* Org Crypt::                    Encrypting Org files.
* Org Mobile::                   Viewing and capture on a mobile device.


File: org.info,  Node: Completion,  Next: Structure Templates,  Up: Miscellaneous

17.1 Completion
===============

Org has in-buffer completions.  Unlike minibuffer completions, which are
useful for quick command interactions, Org’s in-buffer completions are
more suitable for content creation in Org documents.  Type one or more
letters and invoke the hot key to complete the text in-place.  Depending
on the context and the keys, Org offers different types of completions.
No minibuffer is involved.  Such mode-specific hot keys have become an
integral part of Emacs and Org provides several shortcuts.

‘M-<TAB>’

     Complete word at point.

        • At the beginning of an empty headline, complete TODO keywords.

        • After ‘\’, complete TeX symbols supported by the exporter.

        • After ‘:’ in a headline, complete tags.  Org deduces the list
          of tags from the ‘TAGS’ in-buffer option (see *note Setting
          Tags::), the variable ‘org-tag-alist’, or from all tags used
          in the current buffer.

        • After ‘:’ and not in a headline, complete property keys.  The
          list of keys is constructed dynamically from all keys used in
          the current buffer.

        • After ‘[[’, complete link abbreviations (see *note Link
          Abbreviations::).

        • After ‘[[*’, complete headlines in the current buffer so that
          they can be used in search links like: ‘[[*find this
          headline]]’

        • After ‘#+’, complete the special keywords like ‘TYP_TODO’ or
          file-specific ‘OPTIONS’.  After option keyword is complete,
          pressing ‘M-<TAB>’ again inserts example settings for this
          keyword.

        • After ‘STARTUP’ keyword, complete startup items.

        • When point is anywhere else, complete dictionary words using
          Ispell.


File: org.info,  Node: Structure Templates,  Next: Speed Keys,  Prev: Completion,  Up: Miscellaneous

17.2 Structure Templates
========================

With just a few keystrokes, it is possible to insert empty structural
blocks, such as ‘#+BEGIN_SRC’ ... ‘#+END_SRC’, or to wrap existing text
in such a block.

‘C-c C-,’ (‘org-insert-structure-template’)
     Prompt for a type of block structure, and insert the block at
     point.  If the region is active, it is wrapped in the block.  First
     prompts the user for keys, which are used to look up a structure
     type from the variable below.  If the key is ‘<TAB>’, ‘<RET>’, or
     ‘<SPC>’, the user is prompted to enter a block type.

   Available structure types are defined in
‘org-structure-template-alist’, see the docstring for adding or changing
values.

   Org Tempo expands snippets to structures defined in
‘org-structure-template-alist’ and ‘org-tempo-keywords-alist’.  For
example, ‘< s <TAB>’ creates a code block.  Enable it by customizing
‘org-modules’ or add ‘(require 'org-tempo)’ to your Emacs init file(1).

‘a’     ‘#+BEGIN_EXPORT ascii’ ... ‘#+END_EXPORT’
‘c’     ‘#+BEGIN_CENTER’ ... ‘#+END_CENTER’
‘C’     ‘#+BEGIN_COMMENT’ ... ‘#+END_COMMENT’
‘e’     ‘#+BEGIN_EXAMPLE’ ... ‘#+END_EXAMPLE’
‘E’     ‘#+BEGIN_EXPORT’ ... ‘#+END_EXPORT’
‘h’     ‘#+BEGIN_EXPORT html’ ... ‘#+END_EXPORT’
‘l’     ‘#+BEGIN_EXPORT latex’ ... ‘#+END_EXPORT’
‘q’     ‘#+BEGIN_QUOTE’ ... ‘#+END_QUOTE’
‘s’     ‘#+BEGIN_SRC’ ... ‘#+END_SRC’
‘v’     ‘#+BEGIN_VERSE’ ... ‘#+END_VERSE’

   ---------- Footnotes ----------

   (1) For more information, please refer to the commentary section in
‘org-tempo.el’.


File: org.info,  Node: Speed Keys,  Next: Clean View,  Prev: Structure Templates,  Up: Miscellaneous

17.3 Speed Keys
===============

Single keystrokes can execute custom commands in an Org file when point
is on a headline.  Without the extra burden of a meta or modifier key,
Speed Keys can speed navigation or execute custom commands.  Besides
faster navigation, Speed Keys may come in handy on small mobile devices
that do not have full keyboards.  Speed Keys may also work on TTY
devices known for their problems when entering Emacs key chords.

   By default, Org has Speed Keys disabled.  To activate Speed Keys, set
the variable ‘org-use-speed-commands’ to a non-‘nil’ value.  To trigger
a Speed Key, point must be at the beginning of an Org headline, before
any of the stars.

   Org comes with a pre-defined list of Speed Keys.  To add or modify
Speed Keys, customize the option ‘org-speed-commands’.  For more
details, see the variable’s docstring.  With Speed Keys activated, ‘M-x
org-speed-command-help’, or ‘?’ when point is at the beginning of an Org
headline, shows currently active Speed Keys, including the user-defined
ones.


File: org.info,  Node: Clean View,  Next: Execute commands in the active region,  Prev: Speed Keys,  Up: Miscellaneous

17.4 A Cleaner Outline View
===========================

Org’s outline with stars and no indents can look cluttered for short
documents.  For _book-like_ long documents, the effect is not as
noticeable.  Org provides an alternate stars and indentation scheme, as
shown on the right in the following table.  It displays only one star
and indents text to line up with the heading:

     * Top level headline             |    * Top level headline
     ** Second level                  |      * Second level
     *** Third level                  |        * Third level
     some text                        |          some text
     *** Third level                  |        * Third level
     more text                        |          more text
     * Another top level headline     |    * Another top level headline

   Org can achieve this in two ways, (1) by just displaying the buffer
in this way without changing it, or (2) by actually indenting every line
in the desired amount with hard spaces and hiding leading stars.

* Menu:

* Org Indent Mode::
* Hard indentation::


File: org.info,  Node: Org Indent Mode,  Next: Hard indentation,  Up: Clean View

17.4.1 Org Indent Mode
----------------------

To display the buffer in the indented view, activate Org Indent minor
mode, using ‘M-x org-indent-mode’.  Text lines that are not headlines
are prefixed with virtual spaces to vertically align with the headline
text(1).

   To make more horizontal space, the headlines are shifted by two
characters.  Configure ‘org-indent-indentation-per-level’ variable for a
different number.

   By default, Org Indent mode turns off ‘org-adapt-indentation’ and
does hide leading stars by locally setting ‘org-hide-leading-stars’ to
‘t’: only one star on each headline is visible, the rest are masked with
the same font color as the background.  If you want to customize this
default behavior, see ‘org-indent-mode-turns-on-hiding-stars’ and
‘org-indent-mode-turns-off-org-adapt-indentation’.

   To globally turn on Org Indent mode for all files, customize the
variable ‘org-startup-indented’.  To control it for individual files,
use ‘STARTUP’ keyword as follows:

     #+STARTUP: indent
     #+STARTUP: noindent

   ---------- Footnotes ----------

   (1) Org Indent mode also sets ‘wrap-prefix’ correctly for indenting
and wrapping long lines of headlines or text.  This minor mode also
handles Visual Line mode and directly applied settings through
‘word-wrap’.


File: org.info,  Node: Hard indentation,  Prev: Org Indent Mode,  Up: Clean View

17.4.2 Hard indentation
-----------------------

It is possible to use hard spaces to achieve the indentation instead, if
the bare ASCII file should have the indented look also outside Emacs(1).
With Org’s support, you have to indent all lines to line up with the
outline headers.  You would use these settings(2):

     (setq org-adapt-indentation t
           org-hide-leading-stars t
           org-odd-levels-only t)

_Indentation of text below headlines_ (‘org-adapt-indentation’)
     The first setting modifies paragraph filling, line wrapping, and
     structure editing commands to preserving or adapting the
     indentation as appropriate.

_Hiding leading stars_ (‘org-hide-leading-stars’)
     The second setting makes leading stars invisible by applying the
     face ‘org-hide’ to them.  For per-file preference, use these file
     ‘STARTUP’ options:

          #+STARTUP: hidestars
          #+STARTUP: showstars

_Odd levels_ (‘org-odd-levels-only’)
     The third setting makes Org use only odd levels, 1, 3, 5, ..., in
     the outline to create more indentation.  On a per-file level,
     control this with:

          #+STARTUP: odd
          #+STARTUP: oddeven

     To convert a file between single and double stars layouts, use ‘M-x
     org-convert-to-odd-levels’ and ‘M-x org-convert-to-oddeven-levels’.

   ---------- Footnotes ----------

   (1) This works, but requires extra effort.  Org Indent mode is more
convenient for most applications.

   (2) ‘org-adapt-indentation’ can also be set to ‘'headline-data’, in
which case only data lines below the headline will be indented.


File: org.info,  Node: Execute commands in the active region,  Next: Dynamic Headline Numbering,  Prev: Clean View,  Up: Miscellaneous

17.5 Execute commands in the active region
==========================================

When in an Org buffer and the region is active, some commands will apply
to all the subtrees in the active region.  For example, hitting ‘C-c
C-s’ when multiple headlines are within the active region will
successively prompt you for a new schedule date and time.  To disable
this, set the option ‘org-loop-over-headlines-in-active-region’ to
non-‘t’, activate the region and run the command normally.

   ‘org-agenda-loop-over-headlines-in-active-region’ is the equivalent
option of the agenda buffer, where you can also use *note bulk editing
of selected entries: Bulk remote editing selected entries.

   Not all commands can loop in the active region and what subtrees or
headlines are considered can be refined: see the docstrings of these
options for more details.


File: org.info,  Node: Dynamic Headline Numbering,  Next: The Very Busy C-c C-c Key,  Prev: Execute commands in the active region,  Up: Miscellaneous

17.6 Dynamic Headline Numbering
===============================

The Org Num minor mode, toggled with ‘M-x org-num-mode’, displays
outline numbering on top of headlines.  It also updates it automatically
upon changes to the structure of the document.

   By default, all headlines are numbered.  You can limit numbering to
specific headlines according to their level, tags, ‘COMMENT’ keyword, or
‘UNNUMBERED’ property.  Set ‘org-num-max-level’, ‘org-num-skip-tags’,
‘org-num-skip-commented’, ‘org-num-skip-unnumbered’, or
‘org-num-skip-footnotes’ accordingly.

   If ‘org-num-skip-footnotes’ is non-‘nil’, footnotes sections (see
*note Creating Footnotes::) are not numbered either.

   You can control how the numbering is displayed by setting
‘org-num-face’ and ‘org-num-format-function’.

   You can also turn this mode globally for all Org files by setting the
option ‘org-startup-numerated’ to ‘t’, or locally on a file by using
‘#+startup: num’.


File: org.info,  Node: The Very Busy C-c C-c Key,  Next: In-buffer Settings,  Prev: Dynamic Headline Numbering,  Up: Miscellaneous

17.7 The Very Busy ‘C-c C-c’ Key
================================

The ‘C-c C-c’ key in Org serves many purposes depending on the context.
It is probably the most over-worked, multi-purpose key combination in
Org.  Its uses are well documented throughout this manual, but here is a
consolidated list for easy reference.

   • If column view (see *note Column View::) is on, exit column view.

   • If any highlights shown in the buffer from the creation of a sparse
     tree, or from clock display, remove such highlights.

   • If point is in one of the special ‘KEYWORD’ lines, scan the buffer
     for these lines and update the information.  Also reset the Org
     file cache used to temporary store the contents of URLs used as
     values for keywords like ‘SETUPFILE’.

   • If point is inside a table, realign the table.

   • If point is on a ‘TBLFM’ keyword, re-apply the formulas to the
     entire table.

   • If the current buffer is a capture buffer, close the note and file
     it.  With a prefix argument, also jump to the target location after
     saving the note.

   • If point is on a ‘<<<target>>>’, update radio targets and
     corresponding links in this buffer.

   • If point is on a property line or at the start or end of a property
     drawer, offer property commands.

   • If point is at a footnote reference, go to the corresponding
     definition, and _vice versa_.

   • If point is on a statistics cookie, update it.

   • If point is in a plain list item with a checkbox, toggle the status
     of the checkbox.

   • If point is on a numbered item in a plain list, renumber the
     ordered list.

   • If point is on the ‘#+BEGIN’ line of a dynamic block, the block is
     updated.

   • If point is at a timestamp, fix the day name in the timestamp.


File: org.info,  Node: In-buffer Settings,  Next: Regular Expressions,  Prev: The Very Busy C-c C-c Key,  Up: Miscellaneous

17.8 Summary of In-Buffer Settings
==================================

In-buffer settings start with ‘#+’, followed by a keyword, a colon, one
or more spaces, and then a word for each setting.  Org accepts multiple
settings on the same line.  Org also accepts multiple lines for a
keyword.  This manual describes these settings throughout.  A summary
follows here.

   ‘C-c C-c’ activates any changes to the in-buffer settings.  Closing
and reopening the Org file in Emacs also activates the changes.

‘#+ARCHIVE: %s_done::’
     Sets the archive location of the agenda file.  The corresponding
     variable is ‘org-archive-location’.

‘#+CATEGORY’
     Sets the category of the agenda file, which applies to the entire
     document.

‘#+COLUMNS: %25ITEM ...’
     Set the default format for columns view.  This format applies when
     columns view is invoked in locations where no ‘COLUMNS’ property
     applies.

‘#+CONSTANTS: name1=value1 ...’
     Set file-local values for constants that table formulas can use.
     This line sets the local variable
     ‘org-table-formula-constants-local’.  The global version of this
     variable is ‘org-table-formula-constants’.

‘#+FILETAGS: :tag1:tag2:tag3:’
     Set tags that all entries in the file inherit from, including the
     top-level entries.

‘#+LINK: linkword replace’
     Each line specifies one abbreviation for one link.  Use multiple
     ‘LINK’ keywords for more, see *note Link Abbreviations::.  The
     corresponding variable is ‘org-link-abbrev-alist’.

‘#+PRIORITIES: highest lowest default’
     This line sets the limits and the default for the priorities.  All
     three must be either letters A–Z or numbers 0–9.  The highest
     priority must have a lower ASCII number than the lowest priority.

‘#+PROPERTY: Property_Name Value’
     This line sets a default inheritance value for entries in the
     current buffer, most useful for specifying the allowed values of a
     property.

‘#+SETUPFILE: file’
     The setup file or a URL pointing to such file is for additional
     in-buffer settings.  Org loads this file and parses it for any
     settings in it when Org opens the main file.  If URL is specified,
     the contents are downloaded and stored in a temporary file cache.
     ‘C-c C-c’ on the settings line re-parses and re-loads the file, and
     also resets the temporary file cache.

     Org also parses and loads _in-buffer settings_ from the setup file
     during normal exporting process.  Org parses the _in-buffer
     settings_ as if it was included in the containing Org buffer.  The
     rest of the contents of setup file is ignored.

     To visit the setup file—not a URL—use ‘C-c '’ while point is on the
     line with the setup file name.

‘#+STARTUP:’
     Startup options Org uses when first visiting a file.

     The first set of options deals with the initial visibility of the
     outline tree.  The corresponding variable for global default
     settings is ‘org-startup-folded’ with a default value of
     ‘showeverything’.

     ‘overview’         Top-level headlines only.
     ‘content’          All headlines.
     ‘showall’          No folding on any entry.
     ‘show2levels’      Headline levels 1-2.
     ‘show3levels’      Headline levels 1-3.
     ‘show4levels’      Headline levels 1-4.
     ‘show5levels’      Headline levels 1-5.
     ‘showeverything’   Show even drawer contents.

     Dynamic virtual indentation is controlled by the variable
     ‘org-startup-indented’(1).

     ‘indent’     Start with Org Indent mode turned on.
     ‘noindent’   Start with Org Indent mode turned off.

     Dynamic virtual numeration of headlines is controlled by the
     variable ‘org-startup-numerated’.

     ‘num’     Start with Org num mode turned on.
     ‘nonum’   Start with Org num mode turned off.

     Aligns tables consistently upon visiting a file.  The corresponding
     variable is ‘org-startup-align-all-tables’ with ‘nil’ as default
     value.

     ‘align’     Align all tables.
     ‘noalign’   Do not align tables on startup.

     Shrink table columns with a width cookie.  The corresponding
     variable is ‘org-startup-shrink-all-tables’ with ‘nil’ as default
     value.

     When visiting a file, inline images can be automatically displayed.
     The corresponding variable is ‘org-startup-with-inline-images’,
     with a default value ‘nil’ to avoid delays when visiting a file.

     ‘inlineimages’     Show inline images.
     ‘noinlineimages’   Do not show inline images on startup.

     Logging the closing and reopening of TODO items and clock intervals
     can be configured using these options (see variables
     ‘org-log-done’, ‘org-log-note-clock-out’, and ‘org-log-repeat’).

     ‘logdone’              Record a timestamp when an item is marked as done.
     ‘lognotedone’          Record timestamp and a note when DONE.
     ‘nologdone’            Do not record when items are marked as done.
     ‘logrepeat’            Record a time when reinstating a repeating item.
     ‘lognoterepeat’        Record a note when reinstating a repeating item.
     ‘nologrepeat’          Do not record when reinstating repeating item.
     ‘lognoteclock-out’     Record a note when clocking out.
     ‘nolognoteclock-out’   Do not record a note when clocking out.
     ‘logreschedule’        Record a timestamp when scheduling time changes.
     ‘lognotereschedule’    Record a note when scheduling time changes.
     ‘nologreschedule’      Do not record when a scheduling date changes.
     ‘logredeadline’        Record a timestamp when deadline changes.
     ‘lognoteredeadline’    Record a note when deadline changes.
     ‘nologredeadline’      Do not record when a deadline date changes.
     ‘logrefile’            Record a timestamp when refiling.
     ‘lognoterefile’        Record a note when refiling.
     ‘nologrefile’          Do not record when refiling.

     Here are the options for hiding leading stars in outline headings,
     and for indenting outlines.  The corresponding variables are
     ‘org-hide-leading-stars’ and ‘org-odd-levels-only’, both with a
     default setting ‘nil’ (meaning ‘showstars’ and ‘oddeven’).

     ‘hidestars’   Make all but one of the stars starting a headline invisible.
     ‘showstars’   Show all stars starting a headline.
     ‘indent’      Virtual indentation according to outline level.
     ‘noindent’    No virtual indentation according to outline level.
     ‘odd’         Allow only odd outline levels (1, 3, ...).
     ‘oddeven’     Allow all outline levels.

     To turn on custom format overlays over timestamps (variables
     ‘org-display-custom-times’ and ‘org-timestamp-custom-formats’),
     use:

     ‘customtime’   Overlay custom time format.

     The following options influence the table spreadsheet (variable
     ‘constants-unit-system’).

     ‘constcgs’   ‘constants.el’ should use the c-g-s unit system.
     ‘constSI’    ‘constants.el’ should use the SI unit system.

     To influence footnote settings, use the following keywords.  The
     corresponding variables are ‘org-footnote-define-inline’,
     ‘org-footnote-auto-label’, and ‘org-footnote-auto-adjust’.

     ‘fninline’     Define footnotes inline.
     ‘fnnoinline’   Define footnotes in separate section.
     ‘fnlocal’      Define footnotes near first reference, but not inline.
     ‘fnprompt’     Prompt for footnote labels.
     ‘fnauto’       Create ‘[fn:1]’-like labels automatically (default).
     ‘fnconfirm’    Offer automatic label for editing or confirmation.
     ‘fnadjust’     Automatically renumber and sort footnotes.
     ‘nofnadjust’   Do not renumber and sort automatically.

     To hide blocks or drawers on startup, use these keywords.  The
     corresponding variables are ‘org-hide-block-startup’ and
     ‘org-hide-drawer-startup’.

     ‘hideblocks’      Hide all begin/end blocks on startup.
     ‘nohideblocks’    Do not hide blocks on startup.
     ‘hidedrawers’     Hide all begin/end blocks on startup.
     ‘nohidedrawers’   Do not hide blocks on startup.

   The display of entities as UTF-8 characters is governed by the
variable ‘org-pretty-entities’ and the keywords

‘entitiespretty’   Show entities as UTF-8 characters where possible.
‘entitiesplain’    Leave entities plain.

‘#+TAGS: TAG1(c1) TAG2(c2)’
     These lines (several such lines are allowed) specify the valid tags
     in this file, and (potentially) the corresponding _fast tag
     selection_ keys.  The corresponding variable is ‘org-tag-alist’.

‘#+TODO:’, ‘#+SEQ_TODO:’, ‘#+TYP_TODO:’
     These lines set the TODO keywords and their interpretation in the
     current file.  The corresponding variable is ‘org-todo-keywords’.

   ---------- Footnotes ----------

   (1) Note that Org Indent mode also sets the ‘wrap-prefix’ property,
such that Visual Line mode (or purely setting ‘word-wrap’) wraps long
lines, including headlines, correctly indented.


File: org.info,  Node: Regular Expressions,  Next: Org Syntax,  Prev: In-buffer Settings,  Up: Miscellaneous

17.9 Regular Expressions
========================

Org, as an Emacs mode, makes use of Elisp regular expressions for
searching, matching and filtering.  Elisp regular expressions have a
somewhat different syntax then some common standards.  Most notably,
alternation is indicated using ‘\|’ and matching groups are denoted by
‘\(...\)’.  For example the string ‘home\|work’ matches either ‘home’ or
‘work’.

   For more information, see *note Regular Expressions in Emacs:
(emacs)Regexps.


File: org.info,  Node: Org Syntax,  Next: Documentation Access,  Prev: Regular Expressions,  Up: Miscellaneous

17.10 Org Syntax
================

A reference document providing a formal description of Org’s syntax is
available as a draft on Worg
(https://orgmode.org/worg/dev/org-syntax.html), written and maintained
by Nicolas Goaziou.  It defines Org’s core internal concepts such as
“headlines”, “sections”, “affiliated keywords”, “(greater) elements” and
“objects”.  Each part of an Org document belongs to one of the previous
categories.

   To explore the abstract structure of an Org buffer, run this in a
buffer:

     M-: (org-element-parse-buffer) <RET>

It outputs a list containing the buffer’s content represented as an
abstract structure.  The export engine relies on the information stored
in this list.  Most interactive commands—e.g., for structure
editing—also rely on the syntactic meaning of the surrounding context.

   You can probe the syntax of your documents with the command

     M-x org-lint <RET>

It runs a number of checks to find common mistakes.  It then displays
their location in a dedicated buffer, along with a description and a
“trust level”, since false-positive are possible.  From there, you can
operate on the reports with the following keys:

‘C-j’, ‘<TAB>’   Display the offending line
‘<RET>’          Move point to the offending line
‘g’              Check the document again
‘h’              Hide all reports from the same checker
‘i’              Also remove them from all subsequent checks
‘S’              Sort reports by the column at point


File: org.info,  Node: Documentation Access,  Next: Escape Character,  Prev: Org Syntax,  Up: Miscellaneous

17.11 Context Dependent Documentation
=====================================

‘C-c C-x I’ in an Org file tries to open a suitable section of the Org
manual depending on the syntax at point.  For example, using it on a
headline displays “Document Structure” section.

   ‘q’ closes the Info window.


File: org.info,  Node: Escape Character,  Next: Code Evaluation Security,  Prev: Documentation Access,  Up: Miscellaneous

17.12 Escape Character
======================

You may sometimes want to write text that looks like Org syntax, but
should really read as plain text.  Org may use a specific escape
character in some situations, i.e., a backslash in macros (see *note
Macro Replacement::) and links (see *note Link Format::), or a comma in
source and example blocks (see *note Literal Examples::).  In the
general case, however, we suggest to use the zero width space.  You can
insert one with any of the following:

     C-x 8 <RET> zero width space <RET>
     C-x 8 <RET> 200B <RET>

   For example, in order to write ‘[[1,2]]’ as-is in your document, you
may write instead

     [X[1,2]]

   where ‘X’ denotes the zero width space character.


File: org.info,  Node: Code Evaluation Security,  Next: Interaction,  Prev: Escape Character,  Up: Miscellaneous

17.13 Code Evaluation and Security Issues
=========================================

Unlike plain text, running code comes with risk.  Each source code
block, in terms of risk, is equivalent to an executable file.  Org
therefore puts a few confirmation prompts by default.  This is to alert
the casual user from accidentally running untrusted code.

   For users who do not run code blocks or write code regularly, Org’s
default settings should suffice.  However, some users may want to tweak
the prompts for fewer interruptions.  To weigh the risks of automatic
execution of code blocks, here are some details about code evaluation.

   Org evaluates code in the following circumstances:

_Source code blocks_
     Org evaluates source code blocks in an Org file during export.  Org
     also evaluates a source code block with the ‘C-c C-c’ key chord.
     Users exporting or running code blocks must load files only from
     trusted sources.  Be wary of customizing variables that remove or
     alter default security measures.

      -- User Option: org-confirm-babel-evaluate
          When ‘t’, Org prompts the user for confirmation before
          executing each code block.  When ‘nil’, Org executes code
          blocks without prompting the user for confirmation.  When this
          option is set to a custom function, Org invokes the function
          with these two arguments: the source code language and the
          body of the code block.  The custom function must return
          either a ‘t’ or ‘nil’, which determines if the user is
          prompted.  Each source code language can be handled separately
          through this function argument.

     For example, here is how to execute ditaa code blocks without
     prompting:

          (defun my-org-confirm-babel-evaluate (lang body)
            (not (string= lang "ditaa")))  ;don't ask for ditaa
          (setq org-confirm-babel-evaluate #'my-org-confirm-babel-evaluate)

_Following ‘shell’ and ‘elisp’ links_
     Org has two link types that can directly evaluate code (see *note
     External Links::).  Because such code is not visible, these links
     have a potential risk.  Org therefore prompts the user when it
     encounters such links.  The customization variables are:

      -- User Option: org-link-shell-confirm-function
          Function that prompts the user before executing a shell link.

      -- User Option: org-link-elisp-confirm-function
          Function that prompts the user before executing an Emacs Lisp
          link.

_Formulas in tables_
     Formulas in tables (see *note The Spreadsheet::) are code that is
     evaluated either by the Calc interpreter, or by the Emacs Lisp
     interpreter.


File: org.info,  Node: Interaction,  Next: TTY Keys,  Prev: Code Evaluation Security,  Up: Miscellaneous

17.14 Interaction with Other Packages
=====================================

Org’s compatibility and the level of interaction with other Emacs
packages are documented here.

* Menu:

* Cooperation::                  Packages Org cooperates with.
* Conflicts::                    Packages that lead to conflicts.


File: org.info,  Node: Cooperation,  Next: Conflicts,  Up: Interaction

17.14.1 Packages that Org cooperates with
-----------------------------------------

‘calc.el’ by Dave Gillespie

     Org uses the Calc package for implementing spreadsheet
     functionality in its tables (see *note The Spreadsheet::).  Org
     also uses Calc for embedded calculations.  See *note GNU Emacs Calc
     Manual: (calc)Embedded Mode.

‘constants.el’ by Carsten Dominik

     Org can use names for constants in formulas in tables.  Org can
     also use calculation suffixes for units, such as ‘M’ for ‘Mega’.
     For a standard collection of such constants, install the
     ‘constants’ package.  Install version 2.0 of this package,
     available at <https://github.com/cdominik/constants-for-Emacs>.
     Org checks if the function ‘constants-get’ has been autoloaded.
     Installation instructions are in the file ‘constants.el’.

‘cdlatex.el’ by Carsten Dominik

     Org mode can make use of the CDLaTeX package to efficiently enter
     LaTeX fragments into Org files.  See *note CDLaTeX mode::.

‘imenu.el’ by Ake Stenhoff and Lars Lindberg

     Imenu creates dynamic menus based on an index of items in a file.
     Org mode supports Imenu menus.  Enable it with a mode hook as
     follows:

          (add-hook 'org-mode-hook
                    (lambda () (imenu-add-to-menubar "Imenu")))

     By default the index is two levels deep—you can modify the depth
     using the option ‘org-imenu-depth’.

     Org activates Imenu support only in the buffers opened after
     loading Imenu library.  To enable Imenu support in an already
     opened Org buffer, reload Org.

‘speedbar.el’ by Eric M. Ludlam

     Speedbar package creates a special Emacs frame for displaying files
     and index items in files.  Org mode supports Speedbar; users can
     drill into Org files directly from the Speedbar.  The ‘<’ in the
     Speedbar frame tweaks the agenda commands to that file or to a
     subtree.

‘table.el’ by Takaaki Ota

     Complex ASCII tables with automatic line wrapping, column- and
     row-spanning, and alignment can be created using the Emacs table
     package by Takaaki Ota.  Org mode recognizes such tables and
     exports them properly.  ‘C-c '’ to edit these tables in a special
     buffer, much like Org’s code blocks.  Because of interference with
     other Org mode functionality, Takaaki Ota tables cannot be edited
     directly in the Org buffer.

     ‘C-c '’ (‘org-edit-special’)
          Edit a ‘table.el’ table.  Works when point is in a ‘table.el’
          table.

     ‘C-c ~​’ (‘org-table-create-with-table.el’)
          Insert a ‘table.el’ table.  If there is already a table at
          point, this command converts it between the ‘table.el’ format
          and the Org mode format.  See the documentation string of the
          command ‘org-convert-table’ for the restrictions under which
          this is possible.


File: org.info,  Node: Conflicts,  Prev: Cooperation,  Up: Interaction

17.14.2 Packages that conflict with Org mode
--------------------------------------------

In Emacs, shift-selection combines motions of point with shift key to
enlarge regions.  Emacs sets this mode by default.  This conflicts with
Org’s use of ‘S-<cursor>’ commands to change timestamps, TODO keywords,
priorities, and item bullet types, etc.  Since ‘S-<cursor>’ commands
outside of specific contexts do not do anything, Org offers the variable
‘org-support-shift-select’ for customization.  Org mode accommodates
shift selection by (i) making it available outside of the special
contexts where special commands apply, and (ii) extending an existing
active region even if point moves across a special context.

‘cua.el’ by Kim F. Storm
     Org key bindings conflict with ‘S-<cursor>’ keys used by CUA mode.
     For Org to relinquish these bindings to CUA mode, configure the
     variable ‘org-replace-disputed-keys’.  When set, Org moves the
     following key bindings in Org files, and in the agenda buffer—but
     not during date selection.

     ‘S-<UP>’ ⇒ ‘M-p’              ‘S-<DOWN>’ ⇒ ‘M-n’
     ‘S-<LEFT>’ ⇒ ‘M--’            ‘S-<RIGHT>’ ⇒ ‘M-+’
     ‘C-S-<LEFT>’ ⇒ ‘M-S--’        ‘C-S-<RIGHT>’ ⇒ ‘M-S-+’

     Yes, these are unfortunately more difficult to remember.  If you
     want to have other replacement keys, look at the variable
     ‘org-disputed-keys’.

‘ecomplete.el’ by Lars Magne Ingebrigtsen
     Ecomplete provides “electric” address completion in address header
     lines in message buffers.  Sadly Orgtbl mode cuts Ecomplete’s power
     supply: no completion happens when Orgtbl mode is enabled in
     message buffers while entering text in address header lines.  If
     one wants to use ecomplete one should _not_ follow the advice to
     automagically turn on Orgtbl mode in message buffers (see *note
     Orgtbl Mode::), but instead—after filling in the message
     headers—turn on Orgtbl mode manually when needed in the messages
     body.

‘filladapt.el’ by Kyle Jones
     Org mode tries to do the right thing when filling paragraphs, list
     items and other elements.  Many users reported problems using both
     ‘filladapt.el’ and Org mode, so a safe thing to do is to disable
     filladapt like this:

          (add-hook 'org-mode-hook 'turn-off-filladapt-mode)

‘viper.el’ by Michael Kifer

     Viper uses ‘C-c /’ and therefore makes this key not access the
     corresponding Org mode command ‘org-sparse-tree’.  You need to find
     another key for this command, or override the key in
     ‘viper-vi-global-user-map’ with

          (define-key viper-vi-global-user-map "C-c /" 'org-sparse-tree)

‘windmove.el’ by Hovav Shacham

     This package also uses the ‘S-<cursor>’ keys, so everything written
     in the paragraph above about CUA mode also applies here.  If you
     want to make the windmove function active in locations where Org
     mode does not have special functionality on ‘S-<cursor>’, add this
     to your configuration:

          ;; Make windmove work in Org mode:
          (add-hook 'org-shiftup-final-hook 'windmove-up)
          (add-hook 'org-shiftleft-final-hook 'windmove-left)
          (add-hook 'org-shiftdown-final-hook 'windmove-down)
          (add-hook 'org-shiftright-final-hook 'windmove-right)

‘yasnippet.el’
     The way Org mode binds the ‘<TAB>’ key (binding to ‘[tab]’ instead
     of ‘"\t"’) overrules YASnippet’s access to this key.  The following
     code fixed this problem:

          (add-hook 'org-mode-hook
                    (lambda ()
                      (setq-local yas/trigger-key [tab])
                      (define-key yas/keymap [tab] 'yas/next-field-or-maybe-expand)))

     The latest version of YASnippet does not play well with Org mode.
     If the above code does not fix the conflict, start by defining the
     following function:

          (defun yas/org-very-safe-expand ()
            (let ((yas/fallback-behavior 'return-nil)) (yas/expand)))

     Then, tell Org mode to use that function:

          (add-hook 'org-mode-hook
                    (lambda ()
                      (make-variable-buffer-local 'yas/trigger-key)
                      (setq yas/trigger-key [tab])
                      (add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
                      (define-key yas/keymap [tab] 'yas/next-field)))


File: org.info,  Node: TTY Keys,  Next: Protocols,  Prev: Interaction,  Up: Miscellaneous

17.15 Using Org on a TTY
========================

Org provides alternative key bindings for TTY and modern mobile devices
that cannot perform movement commands on point and key bindings with
modifier keys.  Some of these workarounds may be more cumbersome than
necessary.  Users should look into customizing these further based on
their usage needs.  For example, the normal ‘S-<cursor>’ for editing
timestamp might be better with ‘C-c .’ chord.

Default        Alternative 1        Speed key   Alternative 2
----------------------------------------------------------------
‘S-<TAB>’      ‘C-u <TAB>’          ‘C’
‘M-<LEFT>’     ‘C-c C-x l’          ‘l’         ‘Esc <LEFT>’
‘M-S-<LEFT>’   ‘C-c C-x L’          ‘L’
‘M-<RIGHT>’    ‘C-c C-x r’          ‘r’         ‘Esc <RIGHT>’
‘M-S-<RIGHT>’  ‘C-c C-x R’          ‘R’
‘M-<UP>’       ‘C-c C-x u’                      ‘Esc <UP>’
‘M-S-<UP>’     ‘C-c C-x U’          ‘U’
‘M-<DOWN>’     ‘C-c C-x d’                      ‘Esc <DOWN>’
‘M-S-<DOWN>’   ‘C-c C-x D’          ‘D’
‘S-<RET>’      ‘C-c C-x c’
‘M-<RET>’      ‘C-c C-x m’                      ‘Esc <RET>’
‘M-S-<RET>’    ‘C-c C-x M’
‘S-<LEFT>’     ‘C-c <LEFT>’
‘S-<RIGHT>’    ‘C-c <RIGHT>’
‘S-<UP>’       ‘C-c <UP>’
‘S-<DOWN>’     ‘C-c <DOWN>’
‘C-S-<LEFT>’   ‘C-c C-x <LEFT>’
‘C-S-<RIGHT>’  ‘C-c C-x <RIGHT>’
‘C-c C-,’      ‘C-c C-x s’


File: org.info,  Node: Protocols,  Next: Org Crypt,  Prev: TTY Keys,  Up: Miscellaneous

17.16 Protocols for External Access
===================================

Org protocol is a tool to trigger custom actions in Emacs from external
applications.  Any application that supports calling external programs
with an URL as argument may be used with this functionality.  For
example, you can configure bookmarks in your web browser to send a link
to the current page to Org and create a note from it using capture (see
*note Capture::).  You can also create a bookmark that tells Emacs to
open the local source file of a remote website you are browsing.

   In order to use Org protocol from an application, you need to
register ‘org-protocol://’ as a valid scheme-handler.  External calls
are passed to Emacs through the ‘emacsclient’ command, so you also need
to ensure an Emacs server is running.  More precisely, when the
application calls

     emacsclient "org-protocol://PROTOCOL?key1=val1&key2=val2"

Emacs calls the handler associated to PROTOCOL with argument ‘(:key1
val1 :key2 val2)’.

   Org protocol comes with three predefined protocols, detailed in the
following sections.  Configure ‘org-protocol-protocol-alist’ to define
your own.

* Menu:

* The store-link protocol:: Store a link, push URL to kill-ring.
* The capture protocol::  Fill a buffer with external information.
* The open-source protocol:: Edit published contents.


File: org.info,  Node: The store-link protocol,  Next: The capture protocol,  Up: Protocols

17.16.1 The ‘store-link’ protocol
---------------------------------

Using the ‘store-link’ handler, you can copy links, to that they can be
inserted using ‘M-x org-insert-link’ or yanking.  More precisely, the
command

     emacsclient "org-protocol://store-link?url=URL&title=TITLE"

stores the following link:

     [[URL][TITLE]]

   In addition, URL is pushed on the kill-ring for yanking.  You need to
encode URL and TITLE if they contain slashes, and probably quote those
for the shell.

   To use this feature from a browser, add a bookmark with an arbitrary
name, e.g., ‘Org: store-link’ and enter this as _Location_:

     javascript:location.href='org-protocol://store-link?' +
           new URLSearchParams({url:location.href, title:document.title});

   Title is an optional parameter.  Another expression was recommended
earlier:

     javascript:location.href='org-protocol://store-link?url='+
           encodeURIComponent(location.href);

   The latter form is compatible with older Org versions from 9.0 to
9.4.


File: org.info,  Node: The capture protocol,  Next: The open-source protocol,  Prev: The store-link protocol,  Up: Protocols

17.16.2 The ‘capture’ protocol
------------------------------

Activating the “capture” handler pops up a ‘Capture’ buffer in Emacs,
using acapture template.

     emacsclient "org-protocol://capture?template=X&url=URL&title=TITLE&body=BODY"

   To use this feature, add a bookmark with an arbitrary name, e.g.,
‘Org: capture’, and enter this as ‘Location’:

     javascript:location.href='org-protocol://capture?' +
           new URLSearchParams({
                 template: 'x', url: window.location.href,
                 title: document.title, body: window.getSelection()});

   You might have seen another expression:

     javascript:location.href='org-protocol://capture?template=x'+
           '&url='+encodeURIComponent(window.location.href)+
           '&title='+encodeURIComponent(document.title)+
           '&body='+encodeURIComponent(window.getSelection());

   It is a bit more cluttered than the former one, but it is compatible
with previous Org versions 9.0-9.4.  In these versions encoding of space
as “+” character was not supported by URI decoder.

   The capture template to be used can be specified in the bookmark
(like ‘X’ above).  If unspecified, the template key is set in the
variable ‘org-protocol-default-template-key’.  The following template
placeholders are available:

     %:link          The URL
     %:description   The webpage title
     %:annotation    Equivalent to [[%:link][%:description]]
     %i              The selected text


File: org.info,  Node: The open-source protocol,  Prev: The capture protocol,  Up: Protocols

17.16.3 The ‘open-source’ protocol
----------------------------------

The ‘open-source’ handler is designed to help with editing local sources
when reading a document.  To that effect, you can use a bookmark with
the following location:

     javascript:location.href='org-protocol://open-source?&url='+
           encodeURIComponent(location.href)

   The variable ‘org-protocol-project-alist’ maps URLs to local file
names, by stripping URL parameters from the end and replacing the
‘:base-url’ with ‘:working-directory’ and ‘:online-suffix’ with
‘:working-suffix’.  For example, assuming you own a local copy of
‘https://orgmode.org/worg/’ contents at ‘/home/user/worg’, you can set
‘org-protocol-project-alist’ to the following

     (setq org-protocol-project-alist
           '(("Worg"
              :base-url "https://orgmode.org/worg/"
              :working-directory "/home/user/worg/"
              :online-suffix ".html"
              :working-suffix ".org")))

If you are now browsing
‘https://orgmode.org/worg/org-contrib/org-protocol.html’ and find a typo
or have an idea about how to enhance the documentation, simply click the
bookmark and start editing.

   However, such mapping may not always yield the desired results.
Suppose you maintain an online store located at ‘https://example.com/’.
The local sources reside in ‘/home/user/example/’.  It is common
practice to serve all products in such a store through one file and
rewrite URLs that do not match an existing file on the server.  That
way, a request to ‘https://example.com/print/posters.html’ might be
rewritten on the server to something like
‘https://example.com/shop/products.php/posters.html.php’.  The
‘open-source’ handler probably cannot find a file named
‘/home/user/example/print/posters.html.php’ and fails.

   Such an entry in ‘org-protocol-project-alist’ may hold an additional
property ‘:rewrites’.  This property is a list of cons cells, each of
which maps a regular expression to a path relative to the
‘:working-directory’.

   Now map the URL to the path ‘/home/user/example/products.php’ by
adding ‘:rewrites’ rules like this:

     (setq org-protocol-project-alist
           '(("example.com"
              :base-url "https://example.com/"
              :working-directory "/home/user/example/"
              :online-suffix ".php"
              :working-suffix ".php"
              :rewrites (("example.com/print/" . "products.php")
                         ("example.com/$" . "index.php")))))

Since ‘example.com/$’ is used as a regular expression, it maps
‘http://example.com/’, ‘https://example.com’, ‘http://www.example.com/’
and similar to ‘/home/user/example/index.php’.

   The ‘:rewrites’ rules are searched as a last resort if and only if no
existing file name is matched.

   Two functions can help you filling ‘org-protocol-project-alist’ with
valid contents: ‘org-protocol-create’ and ‘org-protocol-create-for-org’.
The latter is of use if you’re editing an Org file that is part of a
publishing project.


File: org.info,  Node: Org Crypt,  Next: Org Mobile,  Prev: Protocols,  Up: Miscellaneous

17.17 Org Crypt
===============

Org Crypt encrypts the text of an entry, but not the headline, or
properties.  Behind the scene, it uses the *note Emacs EasyPG Library:
(epa)Top. to encrypt and decrypt files, and EasyPG needs a correct *note
GnuPG: (gnupg)Top. setup.

   Any text below a headline that has a ‘crypt’ tag is automatically
encrypted when the file is saved.  To use a different tag, customize the
‘org-crypt-tag-matcher’ setting.

   Here is a suggestion for Org Crypt settings in Emacs init file:

     (require 'org-crypt)
     (org-crypt-use-before-save-magic)
     (setq org-tags-exclude-from-inheritance '("crypt"))

     (setq org-crypt-key nil)
     ;; GPG key to use for encryption.
     ;; nil means  use symmetric encryption unconditionally.
     ;; "" means use symmetric encryption unless heading sets CRYPTKEY property.

     (setq auto-save-default nil)
     ;; Auto-saving does not cooperate with org-crypt.el: so you need to
     ;; turn it off if you plan to use org-crypt.el quite often.  Otherwise,
     ;; you'll get an (annoying) message each time you start Org.

     ;; To turn it off only locally, you can insert this:
     ;;
     ;; # -*- buffer-auto-save-file-name: nil; -*-

   It’s possible to use different keys for different headings by
specifying the respective key as property ‘CRYPTKEY’, e.g.:

     * Totally secret :crypt:
       :PROPERTIES:
       :CRYPTKEY: 0x0123456789012345678901234567890123456789
       :END:

   Note that the ‘CRYPTKEY’ property is only effective when
‘org-crypt-key’ is non-‘nil’.  If ‘org-crypt-key’ is ‘nil’, Org uses
symmetric encryption unconditionally.

   Excluding the ‘crypt’ tag from inheritance prevents already encrypted
text from being encrypted again.


File: org.info,  Node: Org Mobile,  Prev: Org Crypt,  Up: Miscellaneous

17.18 Org Mobile
================

Org Mobile is a protocol for synchronizing Org files between Emacs and
other applications, e.g., on mobile devices.  It enables offline-views
and capture support for an Org mode system that is rooted on a “real”
computer.  The external application can also record changes to existing
entries.

   This appendix describes Org’s support for agenda view formats
compatible with Org Mobile.  It also describes synchronizing changes,
such as to notes, between the mobile application and the computer.

   To change tags and TODO states in the mobile application, first
customize the variables ‘org-todo-keywords’, ‘org-tag-alist’ and
‘org-tag-persistent-alist’.  These should cover all the important tags
and TODO keywords, even if Org files use only some of them.  Though the
mobile application is expected to support in-buffer settings, it is
required to understand TODO states _sets_ (see *note Per-file
keywords::) and _mutually exclusive_ tags (see *note Setting Tags::)
only for those set in these variables.

* Menu:

* Setting up the staging area::  For the mobile device.
* Pushing to the mobile application:: Uploading Org files and agendas.
* Pulling from the mobile application:: Integrating captured and flagged items.


File: org.info,  Node: Setting up the staging area,  Next: Pushing to the mobile application,  Up: Org Mobile

17.18.1 Setting up the staging area
-----------------------------------

The mobile application needs access to a file directory on a server(1)
to interact with Emacs.  Pass its location through the
‘org-mobile-directory’ variable.  If you can mount that directory
locally just set the variable to point to that directory:

     (setq org-mobile-directory "~/orgmobile/")

   Alternatively, by using TRAMP (see *note TRAMP User Manual:
(tramp)Top.), ‘org-mobile-directory’ may point to a remote directory
accessible through, for example, SSH, SCP, or DAVS:

     (setq org-mobile-directory "/davs:user@remote.host:/org/webdav/")

   With a public server, consider encrypting the files.  Org also
requires OpenSSL installed on the local computer.  To turn on
encryption, set the same password in the mobile application and in
Emacs.  Set the password in the variable ‘org-mobile-use-encryption’(2).
Note that even after the mobile application encrypts the file contents,
the file name remains visible on the file systems of the local computer,
the server, and the mobile device.

   ---------- Footnotes ----------

   (1) For a server to host files, consider using a WebDAV server, such
as Nextcloud (https://nextcloud.com).  Additional help is at this FAQ
entry (https://orgmode.org/worg/org-faq.html#mobileorg_webdav).

   (2) If Emacs is configured for safe storing of passwords, then
configure the variable ‘org-mobile-encryption-password’; please read the
docstring of that variable.


File: org.info,  Node: Pushing to the mobile application,  Next: Pulling from the mobile application,  Prev: Setting up the staging area,  Up: Org Mobile

17.18.2 Pushing to the mobile application
-----------------------------------------

The command ‘org-mobile-push’ copies files listed in ‘org-mobile-files’
into the staging area.  Files include agenda files (as listed in
‘org-agenda-files’).  Customize ‘org-mobile-files’ to add other files.
File names are staged with paths relative to ‘org-directory’, so all
files should be inside this directory(1).

   Push creates a special Org file ‘agendas.org’ with custom agenda
views defined by the user(2).

   Finally, Org writes the file ‘index.org’, containing links to other
files.  The mobile application reads this file first from the server to
determine what other files to download for agendas.  For faster
downloads, it is expected to only read files whose checksums(3) have
changed.

   ---------- Footnotes ----------

   (1) Symbolic links in ‘org-directory’ need to have the same name as
their targets.

   (2) While creating the agendas, Org mode forces ‘ID’ properties on
all referenced entries, so that these entries can be uniquely identified
if Org Mobile flags them for further action.  To avoid setting
properties configure the variable ‘org-mobile-force-id-on-agenda-items’
to ‘nil’.  Org mode then relies on outline paths, assuming they are
unique.

   (3) Checksums are stored automatically in the file ‘checksums.dat’.


File: org.info,  Node: Pulling from the mobile application,  Prev: Pushing to the mobile application,  Up: Org Mobile

17.18.3 Pulling from the mobile application
-------------------------------------------

The command ‘org-mobile-pull’ synchronizes changes with the server.
More specifically, it first pulls the Org files for viewing.  It then
appends captured entries and pointers to flagged or changed entries to
the file ‘mobileorg.org’ on the server.  Org ultimately integrates its
data in an inbox file format, through the following steps:

  1. Org moves all entries found in ‘mobileorg.org’(1) and appends them
     to the file pointed to by the variable ‘org-mobile-inbox-for-pull’.
     It should reside neither in the staging area nor on the server.
     Each captured entry and each editing event is a top-level entry in
     the inbox file.

  2. After moving the entries, Org processes changes to the shared
     files.  Some of them are applied directly and without user
     interaction.  Examples include changes to tags, TODO state,
     headline and body text.  Entries requiring further action are
     tagged as ‘FLAGGED’.  Org marks entries with problems with an error
     message in the inbox.  They have to be resolved manually.

  3. Org generates an agenda view for flagged entries for user
     intervention to clean up.  For notes stored in flagged entries, Org
     displays them in the echo area when point is on the corresponding
     agenda item.

     ‘?’
          Pressing ‘?’ displays the entire flagged note in another
          window.  Org also pushes it to the kill ring.  To store
          flagged note as a normal note, use ‘? z C-y C-c C-c’.
          Pressing ‘?’ twice does these things: first it removes the
          ‘FLAGGED’ tag; second, it removes the flagged note from the
          property drawer; third, it signals that manual editing of the
          flagged entry is now finished.

   From the agenda dispatcher, ‘?’ returns to the view to finish
processing flagged entries.  Note that these entries may not be the most
recent since the mobile application searches files that were last
pulled.  To get an updated agenda view with changes since the last pull,
pull again.

   ---------- Footnotes ----------

   (1) The file will be empty after this operation.


File: org.info,  Node: Hacking,  Next: History and Acknowledgments,  Prev: Miscellaneous,  Up: Top

Appendix A Hacking
******************

This appendix describes some ways a user can extend the functionality of
Org.

* Menu:

* Hooks::                        How to reach into Org’s internals.
* Add-on Packages::              Available extensions.
* Adding Hyperlink Types::       New custom link types.
* Adding Export Backends::       How to write new export backends.
* Tables in Arbitrary Syntax::   Orgtbl for LaTeX and other programs.
* Dynamic Blocks::               Automatically filled blocks.
* Special Agenda Views::         Customized views.
* Speeding Up Your Agendas::     Tips on how to speed up your agendas.
* Extracting Agenda Information:: Post-processing agenda information.
* Using the Property API::       Writing programs that use entry properties.
* Using the Mapping API::        Mapping over all or selected entries.


File: org.info,  Node: Hooks,  Next: Add-on Packages,  Up: Hacking

A.1 Hooks
=========

Org has a large number of hook variables for adding functionality.  A
complete list of hooks with documentation is maintained by the Worg
project at <https://orgmode.org/worg/doc.html#hooks>.


File: org.info,  Node: Add-on Packages,  Next: Adding Hyperlink Types,  Prev: Hooks,  Up: Hacking

A.2 Add-on Packages
===================

Various authors wrote a large number of add-on packages for Org.  Some
of these packages used to be part of the ‘org-mode’ repository but are
now hosted in a separate ‘org-contrib’ repository here
(https://git.sr.ht/~bzg/org-contrib).  A Worg page with more information
is at: <https://orgmode.org/worg/org-contrib/>.


File: org.info,  Node: Adding Hyperlink Types,  Next: Adding Export Backends,  Prev: Add-on Packages,  Up: Hacking

A.3 Adding Hyperlink Types
==========================

Org has many built-in hyperlink types (see *note Hyperlinks::), and an
interface for adding new link types.  The following example shows the
process of adding Org links to Unix man pages, which look like this

     [[man:printf][The printf manual]]

The following ‘ol-man.el’ file implements it

     ;;; ol-man.el - Support for links to man pages in Org mode
     (require 'ol)

     (org-link-set-parameters "man"
                              :follow #'org-man-open
                              :export #'org-man-export
                              :store #'org-man-store-link)

     (defcustom org-man-command 'man
       "The Emacs command to be used to display a man page."
       :group 'org-link
       :type '(choice (const man) (const woman)))

     (defun org-man-open (path _)
       "Visit the manpage on PATH.
     PATH should be a topic that can be thrown at the man command."
       (funcall org-man-command path))

     (defun org-man-store-link ()
       "Store a link to a man page."
       (when (memq major-mode '(Man-mode woman-mode))
         ;; This is a man page, we do make this link.
         (let* ((page (org-man-get-page-name))
                (link (concat "man:" page))
                (description (format "Man page for %s" page)))
           (org-link-store-props
            :type "man"
            :link link
            :description description))))

     (defun org-man-get-page-name ()
       "Extract the page name from the buffer name."
       ;; This works for both `Man-mode' and `woman-mode'.
       (if (string-match " \\(\\S-+\\)\\*" (buffer-name))
           (match-string 1 (buffer-name))
         (error "Cannot create link to this man page")))

     (defun org-man-export (link description format _)
       "Export a man page link from Org files."
       (let ((path (format "http://man.he.net/?topic=%s&section=all" link))
             (desc (or description link)))
         (pcase format
           (`html (format "<a target=\"_blank\" href=\"%s\">%s</a>" path desc))
           (`latex (format "\\href{%s}{%s}" path desc))
           (`texinfo (format "@uref{%s,%s}" path desc))
           (`ascii (format "%s (%s)" desc path))
           (t path))))

     (provide ol-man)
     ;;; ol-man.el ends here

To activate links to man pages in Org, enter this in the Emacs init
file:

     (require 'ol-man)

A review of ‘ol-man.el’:

  1. First, ‘(require 'ol)’ ensures that ‘ol.el’ is loaded.

  2. Then ‘org-link-set-parameters’ defines a new link type with ‘man’
     prefix and associates functions for following, exporting and
     storing such links.  See the variable ‘org-link-parameters’ for a
     complete list of possible associations.

  3. The rest of the file implements necessary variables and functions.

     For example, ‘org-man-store-link’ is responsible for storing a link
     when ‘org-store-link’ (see *note Handling Links::) is called from a
     buffer displaying a man page.  It first checks if the major mode is
     appropriate.  If check fails, the function returns ‘nil’, which
     means it isn’t responsible for creating a link to the current
     buffer.  Otherwise the function makes a link string by combining
     the ‘man:’ prefix with the man topic.  It also provides a default
     description.  The function ‘org-insert-link’ can insert it back
     into an Org buffer later on.


File: org.info,  Node: Adding Export Backends,  Next: Tables in Arbitrary Syntax,  Prev: Adding Hyperlink Types,  Up: Hacking

A.4 Adding Export Backends
==========================

Org’s export engine makes it easy for writing new backends.  The
framework on which the engine was built makes it easy to derive new
backends from existing ones.

   The two main entry points to the export engine are:
‘org-export-define-backend’ and ‘org-export-define-derived-backend’.  To
grok these functions, see ‘ox-latex.el’ for an example of defining a new
backend from scratch, and ‘ox-beamer.el’ for an example of deriving from
an existing engine.

   For creating a new backend from scratch, first set its name as a
symbol in an alist consisting of elements and export functions.  To make
the backend visible to the export dispatcher, set ‘:menu-entry’ keyword.
For export options specific to this backend, set the ‘:options-alist’.

   For creating a new backend from an existing one, set
‘:translate-alist’ to an alist of export functions.  This alist replaces
the parent backend functions.

   For complete documentation, see the Org Export Reference on Worg
(https://orgmode.org/worg/dev/org-export-reference.html).


File: org.info,  Node: Tables in Arbitrary Syntax,  Next: Dynamic Blocks,  Prev: Adding Export Backends,  Up: Hacking

A.5 Tables in Arbitrary Syntax
==============================

Due to Org’s success in handling tables with Orgtbl, a frequently
requested feature is the use of Org’s table functions in other modes,
e.g., LaTeX.  This would be hard to do in a general way without
complicated customization nightmares.  Moreover, that would take Org
away from its simplicity roots that Orgtbl has proven.  There is,
however, an alternate approach to accomplishing the same.

   This approach involves implementing a custom _translate_ function
that operates on a native Org _source table_ to produce a table in
another format.  This strategy would keep the excellently working Orgtbl
simple and isolate complications, if any, confined to the translate
function.  To add more alien table formats, we just add more translate
functions.  Also the burden of developing custom translate functions for
new table formats is in the hands of those who know those formats best.

* Menu:

* Radio tables::                 Sending and receiving radio tables.
* A LaTeX example::           Step by step, almost a tutorial.
* Translator functions::         Copy and modify.


File: org.info,  Node: Radio tables,  Next: A LaTeX example,  Up: Tables in Arbitrary Syntax

A.5.1 Radio tables
------------------

Radio tables are target locations for translated tables that are not
near their source.  Org finds the target location and inserts the
translated table.

   The key to finding the target location is the magic words ‘BEGIN/END
RECEIVE ORGTBL’.  They have to appear as comments in the current mode.
If the mode is C, then:

     /* BEGIN RECEIVE ORGTBL table_name */
     /* END RECEIVE ORGTBL table_name */

   At the location of source, Org needs a special line to direct Orgtbl
to translate and to find the target for inserting the translated table.
For example:

     #+ORGTBL: SEND table_name translation_function arguments ...

‘table_name’ is the table’s reference name, which is also used in the
receiver lines, and the ‘translation_function’ is the Lisp function that
translates.  This line, in addition, may also contain alternating key
and value arguments at the end.  The translation function gets these
values as a property list.  A few standard parameters are already
recognized and acted upon before the translation function is called:

‘:skip N’
     Skip the first N lines of the table.  Hlines do count; include them
     if they are to be skipped.

‘:skipcols (n1 n2 ...)’
     List of columns to be skipped.  First Org automatically discards
     columns with calculation marks and then sends the table to the
     translator function, which then skips columns as specified in
     ‘skipcols’.

   To keep the source table intact in the buffer without being disturbed
when the source file is compiled or otherwise being worked on, use one
of these strategies:

   • Place the table in a block comment.  For example, in C mode you
     could wrap the table between ‘/*’ and ‘*/’ lines.

   • Put the table after an “end” statement.  For example ‘\bye’ in TeX
     and ‘\end{document}’ in LaTeX.

   • Comment and un-comment each line of the table during edits.  The
     ‘M-x orgtbl-toggle-comment’ command makes toggling easy.


File: org.info,  Node: A LaTeX example,  Next: Translator functions,  Prev: Radio tables,  Up: Tables in Arbitrary Syntax

A.5.2 A LaTeX example of radio tables
-------------------------------------

To wrap a source table in LaTeX, use the ‘comment’ environment provided
by ‘comment.sty’(1).  To activate it, put ‘\usepackage{comment}’ in the
document header.  Orgtbl mode inserts a radio table skeleton(2) with the
command ‘M-x orgtbl-insert-radio-table’, which prompts for a table name.
For example, if ‘salesfigures’ is the name, the template inserts:

     % BEGIN RECEIVE ORGTBL salesfigures
     % END RECEIVE ORGTBL salesfigures
     \begin{comment}
     #+ORGTBL: SEND salesfigures orgtbl-to-latex
     | | |
     \end{comment}

The line ‘#+ORGTBL: SEND’ tells Orgtbl mode to use the function
‘orgtbl-to-latex’ to convert the table to LaTeX format, then insert the
table at the target (receive) location named ‘salesfigures’.  Now the
table is ready for data entry.  It can even use spreadsheet features(3):

     % BEGIN RECEIVE ORGTBL salesfigures
     % END RECEIVE ORGTBL salesfigures
     \begin{comment}
     #+ORGTBL: SEND salesfigures orgtbl-to-latex
     | Month | Days | Nr sold | per day |
     |-------+------+---------+---------|
     | Jan   |   23 |      55 |     2.4 |
     | Feb   |   21 |      16 |     0.8 |
     | March |   22 |     278 |    12.6 |
     #+TBLFM: $4=$3/$2;%.1f
     % $ (optional extra dollar to keep Font Lock happy, see footnote)
     \end{comment}

   After editing, ‘C-c C-c’ inserts the translated table at the target
location, between the two marker lines.

   For hand-made custom tables, note that the translator needs to skip
the first two lines of the source table.  Also the command has to
_splice_ out the target table without the header and footer.

     \begin{tabular}{lrrr}
     Month & \multicolumn{1}{c}{Days} & Nr.\ sold & per day\\
     % BEGIN RECEIVE ORGTBL salesfigures
     % END RECEIVE ORGTBL salesfigures
     \end{tabular}
     %
     \begin{comment}
     #+ORGTBL: SEND salesfigures orgtbl-to-latex :splice t :skip 2
     | Month | Days | Nr sold | per day |
     |-------+------+---------+---------|
     | Jan   |   23 |      55 |     2.4 |
     | Feb   |   21 |      16 |     0.8 |
     | March |   22 |     278 |    12.6 |
     #+TBLFM: $4=$3/$2;%.1f
     \end{comment}

   The LaTeX translator function ‘orgtbl-to-latex’ is already part of
Orgtbl mode and uses a ‘tabular’ environment to typeset the table and
marks horizontal lines with ‘\hline’.  For additional parameters to
control output, see *note Translator functions:::

‘:splice BOOLEAN’
     When {{{var(BOOLEAN}}} is non-‘nil’, return only table body lines;
     i.e., not wrapped in ‘tabular’ environment.  Default is ‘nil’.

‘:fmt FMT’
     Format string to warp each field.  It should contain ‘%s’ for the
     original field value.  For example, to wrap each field value in
     dollar symbol, you could use ‘:fmt "$%s$"’.  Format can also wrap a
     property list with column numbers and formats, for example ‘:fmt (2
     "$%s$" 4 "%s\\%%")’.  In place of a string, a function of one
     argument can be used; the function must return a formatted string.

‘:efmt EFMT’
     Format numbers as exponentials.  The spec should have ‘%s’ twice
     for inserting mantissa and exponent, for example
     ‘"%s\\times10^{%s}"’.  This may also be a property list with column
     numbers and formats, for example ‘:efmt (2 "$%s\\times10^{%s}$" 4
     "$%s\\cdot10^{%s}$")’.  After EFMT has been applied to a value,
     FMT—see above—is also applied.  Functions with two arguments can be
     supplied instead of strings.  By default, no special formatting is
     applied.

   ---------- Footnotes ----------

   (1) <https://www.ctan.org/pkg/comment>

   (2) By default this works only for LaTeX, HTML, and Texinfo.
Configure the variable ‘orgtbl-radio-table-templates’ to install
templates for other modes.

   (3) If the ‘TBLFM’ keyword contains an odd number of dollar
characters, this may cause problems with Font Lock in LaTeX mode.  As
shown in the example you can fix this by adding an extra line inside the
‘comment’ environment that is used to balance the dollar expressions.
If you are using AUCTeX with the font-latex library, a much better
solution is to add the ‘comment’ environment to the variable
‘LaTeX-verbatim-environments’.


File: org.info,  Node: Translator functions,  Prev: A LaTeX example,  Up: Tables in Arbitrary Syntax

A.5.3 Translator functions
--------------------------

Orgtbl mode has built-in translator functions: ‘orgtbl-to-csv’
(comma-separated values), ‘orgtbl-to-tsv’ (TAB-separated values),
‘orgtbl-to-latex’, ‘orgtbl-to-html’, ‘orgtbl-to-texinfo’,
‘orgtbl-to-unicode’ and ‘orgtbl-to-orgtbl’.  They use the generic
translator, ‘orgtbl-to-generic’, which delegates translations to various
export backends.

   Properties passed to the function through the ‘ORGTBL SEND’ line take
precedence over properties defined inside the function.  For example,
this overrides the default LaTeX line endings, ‘\\’, with ‘\\[2mm]’:

     #+ORGTBL: SEND test orgtbl-to-latex :lend " \\\\[2mm]"

   For a new language translator, define a converter function.  It can
be a generic function, such as shown in this example.  It marks a
beginning and ending of a table with ‘!BTBL!’ and ‘!ETBL!’; a beginning
and ending of lines with ‘!BL!’ and ‘!EL!’; and uses a TAB for a field
separator:

     (defun orgtbl-to-language (table params)
       "Convert the orgtbl-mode TABLE to language."
       (orgtbl-to-generic
        table
        (org-combine-plists
         '(:tstart "!BTBL!" :tend "!ETBL!" :lstart "!BL!" :lend "!EL!" :sep "\t")
         params)))

The documentation for the ‘orgtbl-to-generic’ function shows a complete
list of parameters, each of which can be passed through to
‘orgtbl-to-latex’, ‘orgtbl-to-texinfo’, and any other function using
that generic function.

   For complicated translations the generic translator function could be
replaced by a custom translator function.  Such a custom function must
take two arguments and return a single string containing the formatted
table.  The first argument is the table whose lines are a list of fields
or the symbol ‘hline’.  The second argument is the property list
consisting of parameters specified in the ‘#+ORGTBL: SEND’ line.  Please
share your translator functions by posting them to the Org users mailing
list, at <emacs-orgmode@gnu.org>.


File: org.info,  Node: Dynamic Blocks,  Next: Special Agenda Views,  Prev: Tables in Arbitrary Syntax,  Up: Hacking

A.6 Dynamic Blocks
==================

Org supports _dynamic blocks_ in Org documents.  They are inserted with
begin and end markers like any other code block, but the contents are
updated automatically by a user function.

   You can insert a dynamic block with
‘org-dynamic-block-insert-dblock’, which is bound to ‘C-c C-x x’ by
default.  For example, ‘C-c C-x x c l o c k t a b l e <RET>’ inserts a
table that updates the work time (see *note Clocking Work Time::).

   Dynamic blocks can have names and function parameters.  The syntax is
similar to source code block specifications:

     #+BEGIN: myblock :parameter1 value1 :parameter2 value2 ...
       ...
     #+END:

   These commands update dynamic blocks:

‘C-c C-x C-u’ (‘org-dblock-update’)
     Update dynamic block at point.

‘C-u C-c C-x C-u’
     Update all dynamic blocks in the current file.

   Before updating a dynamic block, Org removes content between the
‘BEGIN’ and ‘END’ markers.  Org then reads the parameters on the ‘BEGIN’
line for passing to the writer function as a plist.  The previous
content of the dynamic block becomes erased from the buffer and appended
to the plist under ‘:content’.

   The syntax for naming a writer function with a dynamic block labeled
‘myblock’ is: ‘org-dblock-write:myblock’.

   The following is an example of a dynamic block and a block writer
function that updates the time when the function was last run:

     #+BEGIN: block-update-time :format "on %m/%d/%Y at %H:%M"
       ...
     #+END:

The dynamic block’s writer function:

     (defun org-dblock-write:block-update-time (params)
       (let ((fmt (or (plist-get params :format) "%d. %m. %Y")))
         (insert "Last block update at: "
                 (format-time-string fmt))))

   To keep dynamic blocks up-to-date in an Org file, use the function,
‘org-update-all-dblocks’ in hook, such as ‘before-save-hook’.  The
‘org-update-all-dblocks’ function does not run if the file is not in Org
mode.

   Dynamic blocks, like any other block, can be narrowed with
‘org-narrow-to-block’.


File: org.info,  Node: Special Agenda Views,  Next: Speeding Up Your Agendas,  Prev: Dynamic Blocks,  Up: Hacking

A.7 Special Agenda Views
========================

Org provides a special hook to further limit items in agenda views:
‘agenda’, ‘agenda*’(1), ‘todo’, ‘alltodo’, ‘tags’, ‘tags-todo’,
‘tags-tree’.  Specify a custom function that tests inclusion of every
matched item in the view.  This function can also skip as much as is
needed.

   For a global condition applicable to agenda views, use the
‘org-agenda-skip-function-global’ variable.  Org uses a global condition
with ‘org-agenda-skip-function’ for custom searching.

   This example defines a function for a custom view showing TODO items
with ‘waiting’ status.  Manually this is a multi-step search process,
but with a custom view, this can be automated as follows:

   The custom function searches the subtree for the ‘waiting’ tag and
returns ‘nil’ on match.  Otherwise it gives the location from where the
search continues.

     (defun my-skip-unless-waiting ()
       "Skip trees that are not waiting"
       (let ((subtree-end (save-excursion (org-end-of-subtree t))))
         (if (re-search-forward ":waiting:" subtree-end t)
             nil          ; tag found, do not skip
           subtree-end))) ; tag not found, continue after end of subtree

   To use this custom function in a custom agenda command:

     (org-add-agenda-custom-command
      '("b" todo "PROJECT"
        ((org-agenda-skip-function 'my-skip-unless-waiting)
         (org-agenda-overriding-header "Projects waiting for something: "))))

   Note that this also binds ‘org-agenda-overriding-header’ to a more
meaningful string suitable for the agenda view.

   Search for entries with a limit set on levels for the custom search.
This is a general approach to creating custom searches in Org.  To
include all levels, use ‘LEVEL>0’(2).  Then to selectively pick the
matched entries, use ‘org-agenda-skip-function’, which also accepts Lisp
forms, such as ‘org-agenda-skip-entry-if’ and
‘org-agenda-skip-subtree-if’.  For example:

‘(org-agenda-skip-entry-if 'scheduled)’
     Skip current entry if it has been scheduled.

‘(org-agenda-skip-entry-if 'notscheduled)’
     Skip current entry if it has not been scheduled.

‘(org-agenda-skip-entry-if 'deadline)’
     Skip current entry if it has a deadline.

‘(org-agenda-skip-entry-if 'scheduled 'deadline)’
     Skip current entry if it has a deadline, or if it is scheduled.

‘(org-agenda-skip-entry-if 'todo '("TODO" "WAITING"))’
     Skip current entry if the TODO keyword is TODO or WAITING.

‘(org-agenda-skip-entry-if 'todo 'done)’
     Skip current entry if the TODO keyword marks a DONE state.

‘(org-agenda-skip-entry-if 'timestamp)’
     Skip current entry if it has any timestamp, may also be deadline or
     scheduled.

‘(org-agenda-skip-entry-if 'regexp "regular expression")’
     Skip current entry if the regular expression matches in the entry.

‘(org-agenda-skip-entry-if 'notregexp "regular expression")’
     Skip current entry unless the regular expression matches.

‘(org-agenda-skip-subtree-if 'regexp "regular expression")’
     Same as above, but check and skip the entire subtree.

   The following is an example of a search for ‘waiting’ without the
special function:

     (org-add-agenda-custom-command
      '("b" todo "PROJECT"
        ((org-agenda-skip-function '(org-agenda-skip-subtree-if
                                     'regexp ":waiting:"))
         (org-agenda-overriding-header "Projects waiting for something: "))))

   ---------- Footnotes ----------

   (1) The ‘agenda*’ view is the same as ‘agenda’ except that it only
considers _appointments_, i.e., scheduled and deadline items that have a
time specification ‘[h]h:mm’ in their timestamps.

   (2) Note that, for ‘org-odd-levels-only’, a level number corresponds
to order in the hierarchy, not to the number of stars.


File: org.info,  Node: Speeding Up Your Agendas,  Next: Extracting Agenda Information,  Prev: Special Agenda Views,  Up: Hacking

A.8 Speeding Up Your Agendas
============================

Some agenda commands slow down when the Org files grow in size or
number.  Here are tips to speed up:

   • Reduce the number of Org agenda files to avoid slowdowns due to
     hard drive accesses.

   • Reduce the number of DONE and archived headlines so agenda
     operations that skip over these can finish faster.

   • Do not dim blocked tasks:

          (setq org-agenda-dim-blocked-tasks nil)

   • Stop preparing agenda buffers on startup:

          (setq org-agenda-inhibit-startup t)

   • Disable tag inheritance for agendas:

          (setq org-agenda-use-tag-inheritance nil)

   • Disable parsing of some properties:

          (setq org-agenda-ignore-properties '(stats))

     This will disable parsing and updating statistic cookies.

   These options can be applied to selected agenda views.  For more
details about generation of agenda views, see the docstrings for the
relevant variables, and this dedicated Worg page
(https://orgmode.org/worg/agenda-optimization.html) for agenda
optimization.


File: org.info,  Node: Extracting Agenda Information,  Next: Using the Property API,  Prev: Speeding Up Your Agendas,  Up: Hacking

A.9 Extracting Agenda Information
=================================

Org provides commands to access agendas through Emacs batch mode.
Through this command-line interface, agendas are automated for further
processing or printing.

   ‘org-batch-agenda’ creates an agenda view in ASCII and outputs to
standard output.  This command takes one string parameter.  When string
consists of a single character, Org uses it as a key to
‘org-agenda-custom-commands’.  These are the same ones available through
the agenda dispatcher (see *note Agenda Dispatcher::).

   This example command line directly prints the TODO list to the
printer:

     emacs -batch -l ~/.emacs -eval '(org-batch-agenda "t")' | lpr

   When the string parameter length is two or more characters, Org
matches it with tags/TODO strings.  For example, this example command
line prints items tagged with ‘shop’, but excludes items tagged with
‘NewYork’:

     emacs -batch -l ~/.emacs                                      \
           -eval '(org-batch-agenda "+shop-NewYork")' | lpr

An example showing on-the-fly parameter modifications:

     emacs -batch -l ~/.emacs                                      \
        -eval '(org-batch-agenda "a"                               \
                org-agenda-span (quote month)                      \
                org-agenda-include-diary nil                       \
                org-agenda-files (quote ("~/org/project.org")))'   \
        | lpr

which produces an agenda for the next 30 days from just the
‘~/org/projects.org’ file.

   For structured processing of agenda output, use
‘org-batch-agenda-csv’ with the following fields:

category
     The category of the item
head
     The headline, without TODO keyword, TAGS and PRIORITY
type
     The type of the agenda entry, can be

     ‘todo’                selected in TODO match
     ‘tagsmatch’           selected in tags match
     ‘diary’               imported from diary
     ‘deadline’            a deadline
     ‘scheduled’           scheduled
     ‘timestamp’           appointment, selected by timestamp
     ‘closed’              entry was closed on date
     ‘upcoming-deadline’   warning about nearing deadline
     ‘past-scheduled’      forwarded scheduled item
     ‘block’               entry has date block including date

todo
     The TODO keyword, if any
tags
     All tags including inherited ones, separated by colons
date
     The relevant date, like ‘2007-2-14’
time
     The time, like ‘15:00-16:50’
extra
     String with extra planning info
priority-l
     The priority letter if any was given
priority-n
     The computed numerical priority

   If the selection of the agenda item was based on a timestamp,
including those items with ‘DEADLINE’ and ‘SCHEDULED’ keywords, then Org
includes date and time in the output.

   If the selection of the agenda item was based on a timestamp (or
deadline/scheduled), then Org includes date and time in the output.

   Here is an example of a post-processing script in Perl.  It takes the
CSV output from Emacs and prints with a checkbox:

     #!/usr/bin/perl

     # define the Emacs command to run
     $cmd = "emacs -batch -l ~/.emacs -eval '(org-batch-agenda-csv \"t\")'";

     # run it and capture the output
     $agenda = qx{$cmd 2>/dev/null};

     # loop over all lines
     foreach $line (split(/\n/,$agenda)) {
         # get the individual values
         ($category,$head,$type,$todo,$tags,$date,$time,$extra,
          $priority_l,$priority_n) = split(/,/,$line);
         # process and print
         print "[ ] $head\n";
     }


File: org.info,  Node: Using the Property API,  Next: Using the Mapping API,  Prev: Extracting Agenda Information,  Up: Hacking

A.10 Using the Property API
===========================

Here is a description of the functions that can be used to work with
properties.

 -- Function: org-entry-properties &optional pom which
     Get all properties of the entry at point-or-marker POM.  This
     includes the TODO keyword, the tags, time strings for deadline,
     scheduled, and clocking, and any additional properties defined in
     the entry.  The return value is an alist.  Keys may occur multiple
     times if the property key was used several times.  POM may also be
     ‘nil’, in which case the current entry is used.  If WHICH is ‘nil’
     or ‘all’, get all properties.  If WHICH is ‘special’ or ‘standard’,
     only get that subclass.

 -- Function: org-entry-get pom property &optional inherit
     Get value of PROPERTY for entry at point-or-marker POM.  By
     default, this only looks at properties defined locally in the
     entry.  If INHERIT is non-‘nil’ and the entry does not have the
     property, then also check higher levels of the hierarchy.  If
     INHERIT is the symbol ‘selective’, use inheritance if and only if
     the setting of ‘org-use-property-inheritance’ selects PROPERTY for
     inheritance.

 -- Function: org-entry-delete pom property
     Delete the property PROPERTY from entry at point-or-marker POM.

 -- Function: org-entry-put pom property value
     Set PROPERTY to VALUES for entry at point-or-marker POM.

 -- Function: org-buffer-property-keys &optional include-specials
     Get all property keys in the current buffer.

 -- Function: org-insert-property-drawer
     Insert a property drawer for the current entry.  Also

 -- Function: org-entry-put-multivalued-property pom property &rest
          values
     Set PROPERTY at point-or-marker POM to VALUES.  VALUES should be a
     list of strings.  They are concatenated, with spaces as separators.

 -- Function: org-entry-get-multivalued-property pom property
     Treat the value of the property PROPERTY as a whitespace-separated
     list of values and return the values as a list of strings.

 -- Function: org-entry-add-to-multivalued-property pom property value
     Treat the value of the property PROPERTY as a whitespace-separated
     list of values and make sure that VALUE is in this list.

 -- Function: org-entry-remove-from-multivalued-property pom property
          value
     Treat the value of the property PROPERTY as a whitespace-separated
     list of values and make sure that VALUE is _not_ in this list.

 -- Function: org-entry-member-in-multivalued-property pom property
          value
     Treat the value of the property PROPERTY as a whitespace-separated
     list of values and check if VALUE is in this list.

 -- User Option: org-property-allowed-value-functions
     Hook for functions supplying allowed values for a specific
     property.  The functions must take a single argument, the name of
     the property, and return a flat list of allowed values.  If ‘:ETC’
     is one of the values, use the values as completion help, but allow
     also other values to be entered.  The functions must return ‘nil’
     if they are not responsible for this property.


File: org.info,  Node: Using the Mapping API,  Prev: Using the Property API,  Up: Hacking

A.11 Using the Mapping API
==========================

Org has sophisticated mapping capabilities to find all entries
satisfying certain criteria.  Internally, this functionality is used to
produce agenda views, but there is also an API that can be used to
execute arbitrary functions for each or selected entries.  The main
entry point for this API is:

 -- Function: org-map-entries func &optional match scope &rest skip
     Call FUNC at each headline selected by MATCH in SCOPE.

     FUNC is a function or a Lisp form.  With point positioned at the
     beginning of the headline, call the function without arguments.
     Org returns a list of return values of calls to the function.

     To avoid preserving point, Org wraps the call to FUNC in
     ‘save-excursion’ form.  After evaluation, Org moves point to the
     end of the line that was just processed.  Search continues from
     that point forward.  This may not always work as expected under
     some conditions, such as if the current subtree was removed by a
     previous archiving operation.  In such rare circumstances, Org
     skips the next entry entirely when it should not.  To stop Org from
     such skips, make FUNC set the variable ‘org-map-continue-from’ to a
     specific buffer position.

     MATCH is a tags/property/TODO match.  Org iterates only matched
     headlines.  Org iterates over all headlines when MATCH is ‘nil’ or
     ‘t’.

     SCOPE determines the scope of this command.  It can be any of:

     ‘nil’
          The current buffer, respecting the restriction, if any.

     ‘tree’
          The subtree started with the entry at point.

     ‘region’
          The entries within the active region, if any.

     ‘file’
          The current buffer, without restriction.

     ‘file-with-archives’
          The current buffer, and any archives associated with it.

     ‘agenda’
          All agenda files.

     ‘agenda-with-archives’
          All agenda files with any archive files associated with them.

     list of filenames
          If this is a list, all files in the list are scanned.

     The remaining arguments are treated as settings for the scanner’s
     skipping facilities.  Valid arguments are:

     ‘archive’
          Skip trees with the ‘ARCHIVE’ tag.

     ‘comment’
          Skip trees with the COMMENT keyword.

     function or Lisp form
          Used as value for ‘org-agenda-skip-function’, so whenever the
          function returns ‘t’, FUNC is called for that entry and search
          continues from the point where the function leaves it.

   The mapping routine can call any arbitrary function, even functions
that change meta data or query the property API (see *note Using the
Property API::).  Here are some handy functions:

 -- Function: org-todo &optional arg
     Change the TODO state of the entry.  See the docstring of the
     functions for the many possible values for the argument ARG.

 -- Function: org-priority &optional action
     Change the priority of the entry.  See the docstring of this
     function for the possible values for ACTION.

 -- Function: org-toggle-tag tag &optional onoff
     Toggle the tag TAG in the current entry.  Setting ONOFF to either
     ‘on’ or ‘off’ does not toggle tag, but ensure that it is either on
     or off.

 -- Function: org-promote
     Promote the current entry.

 -- Function: org-demote
     Demote the current entry.

   This example turns all entries tagged with ‘TOMORROW’ into TODO
entries with keyword ‘UPCOMING’.  Org ignores entries in comment trees
and archive trees.

     (org-map-entries '(org-todo "UPCOMING")
                      "+TOMORROW" 'file 'archive 'comment)

   The following example counts the number of entries with TODO keyword
‘WAITING’, in all agenda files.

     (length (org-map-entries t "/+WAITING" 'agenda))


File: org.info,  Node: History and Acknowledgments,  Next: GNU Free Documentation License,  Prev: Hacking,  Up: Top

Appendix B History and Acknowledgments
**************************************

B.1 From Carsten
================

Org was born in 2003, out of frustration over the user interface of the
Emacs Outline mode.  I was trying to organize my notes and projects, and
using Emacs seemed to be the natural way to go.  However, having to
remember eleven different commands with two or three keys per command,
only to hide and show parts of the outline tree, that seemed entirely
unacceptable to me.  Also, when using outlines to take notes, I
constantly wanted to restructure the tree, organizing it parallel to my
thoughts and plans.  _Visibility cycling_ and _structure editing_ were
originally implemented in the package ‘outline-magic.el’, but quickly
moved to the more general ‘org.el’.  As this environment became
comfortable for project planning, the next step was adding _TODO
entries_, basic _timestamps_, and _table support_.  These areas
highlighted the two main goals that Org still has today: to be a new,
outline-based, plain text mode with innovative and intuitive editing
features, and to incorporate project planning functionality directly
into a notes file.

   Since the first release, literally thousands of emails to me or to
the mailing list <emacs-orgmode@gnu.org> have provided a constant stream
of bug reports, feedback, new ideas, and sometimes patches and add-on
code.  Many thanks to everyone who has helped to improve this package.
I am trying to keep here a list of the people who had significant
influence in shaping one or more aspects of Org.  The list may not be
complete, if I have forgotten someone, please accept my apologies and
let me know.

   Before I get to this list, a few special mentions are in order:

Bastien Guerry
     Bastien has written a large number of extensions to Org (most of
     them integrated into the core by now), including the LaTeX exporter
     and the plain list parser.  His support during the early days was
     central to the success of this project.  Bastien also invented
     Worg, helped establishing the Web presence of Org, and sponsored
     hosting costs for the orgmode.org website.  Bastien stepped in as
     maintainer of Org between 2011 and 2013, at a time when I
     desperately needed a break.

Eric Schulte and Dan Davison
     Eric and Dan are jointly responsible for the Org Babel system,
     which turns Org into a multi-language environment for evaluating
     code and doing literate programming and reproducible research.
     This has become one of Org’s killer features that define what Org
     is today.

John Wiegley
     John has contributed a number of great ideas and patches directly
     to Org, including the attachment system (‘org-attach.el’),
     integration with Apple Mail (‘org-mac-message.el’), hierarchical
     dependencies of TODO items, habit tracking (‘org-habits.el’), and
     encryption (‘org-crypt.el’).  Also, the capture system is really an
     extended copy of his great ‘remember.el’.

Sebastian Rose
     Without Sebastian, the HTML/XHTML publishing of Org would be the
     pitiful work of an ignorant amateur.  Sebastian has pushed this
     part of Org onto a much higher level.  He also wrote ‘org-info.js’,
     a JavaScript program for displaying webpages derived from Org using
     an Info-like or a folding interface with single-key navigation.

   See below for the full list of contributions!  Again, please let me
know what I am missing here!

B.2 From Bastien
================

I (Bastien) have been maintaining Org between 2011 and 2013.  This
appendix would not be complete without adding a few more acknowledgments
and thanks.

   I am first grateful to Carsten for his trust while handing me over
the maintainership of Org.  His unremitting support is what really
helped me getting more confident over time, with both the community and
the code.

   When I took over maintainership, I knew I would have to make Org more
collaborative than ever, as I would have to rely on people that are more
knowledgeable than I am on many parts of the code.  Here is a list of
the persons I could rely on, they should really be considered
co-maintainers, either of the code or the community:

Eric Schulte
     Eric is maintaining the Babel parts of Org.  His reactivity here
     kept me away from worrying about possible bugs here and let me
     focus on other parts.

Nicolas Goaziou
     Nicolas is maintaining the consistency of the deepest parts of Org.
     His work on ‘org-element.el’ and ‘ox.el’ has been outstanding, and
     it opened the doors for many new ideas and features.  He rewrote
     many of the old exporters to use the new export engine, and helped
     with documenting this major change.  More importantly (if that’s
     possible), he has been more than reliable during all the work done
     for Org 8.0, and always very reactive on the mailing list.

Achim Gratz
     Achim rewrote the building process of Org, turning some _ad hoc_
     tools into a flexible and conceptually clean process.  He patiently
     coped with the many hiccups that such a change can create for
     users.

Nick Dokos
     The Org mode mailing list would not be such a nice place without
     Nick, who patiently helped users so many times.  It is impossible
     to overestimate such a great help, and the list would not be so
     active without him.

   I received support from so many users that it is clearly impossible
to be fair when shortlisting a few of them, but Org’s history would not
be complete if the ones above were not mentioned in this manual.

B.3 List of Contributions
=========================

   • Russell Adams came up with the idea for drawers.

   • Thomas Baumann wrote ‘ol-bbdb.el’ and ‘ol-mhe.el’.

   • Christophe Bataillon created the great unicorn logo that we use on
     the Org mode website.

   • Alex Bochannek provided a patch for rounding timestamps.

   • Jan Böcker wrote ‘ol-docview.el’.

   • Brad Bozarth showed how to pull RSS feed data into Org files.

   • Tom Breton wrote ‘org-choose.el’.

   • Charles Cave’s suggestion sparked the implementation of templates
     for Remember, which are now templates for capture.

   • Timothy E Chapman worked on a complete overhaul of the orgmode.org
     website in 2020 and helped fixing various bugs.

   • Pavel Chalmoviansky influenced the agenda treatment of items with
     specified time.

   • Gregory Chernov patched support for Lisp forms into table
     calculations and improved XEmacs compatibility, in particular by
     porting ‘nouline.el’ to XEmacs.

   • Sacha Chua suggested copying some linking code from Planner.

   • Baoqiu Cui contributed the DocBook exporter.

   • Eddward DeVilla proposed and tested checkbox statistics.  He also
     came up with the idea of properties, and that there should be an
     API for them.

   • Nick Dokos tracked down several nasty bugs.

   • Kees Dullemond used to edit projects lists directly in HTML and so
     inspired some of the early development, including HTML export.  He
     also asked for a way to narrow wide table columns.

   • Thomas S. Dye contributed documentation on Worg and helped
     integrating the Org Babel documentation into the manual.

   • Christian Egli converted the documentation into Texinfo format,
     inspired the agenda, patched CSS formatting into the HTML exporter,
     and wrote ‘org-taskjuggler.el’.

   • David Emery provided a patch for custom CSS support in exported
     HTML agendas.

   • Nic Ferrier contributed mailcap and XOXO support.

   • Miguel A. Figueroa-Villanueva implemented hierarchical checkboxes.

   • John Foerch figured out how to make incremental search show context
     around a match in a hidden outline tree.

   • Raimar Finken wrote ‘org-git-line.el’.

   • Mikael Fornius works as a mailing list moderator.

   • Austin Frank works as a mailing list moderator.

   • Eric Fraga drove the development of Beamer export with ideas and
     testing.

   • Barry Gidden did proofreading the manual in preparation for the
     book publication through Network Theory Ltd.

   • Niels Giesen had the idea to automatically archive DONE trees.

   • Nicolas Goaziou rewrote much of the plain list code.

   • Kai Grossjohann pointed out key-binding conflicts with other
     packages.

   • Brian Gough of Network Theory Ltd publishes the Org mode manual as
     a book.

   • Bernt Hansen has driven much of the support for auto-repeating
     tasks, task state change logging, and the clocktable.  His clear
     explanations have been critical when we started to adopt the Git
     version control system.

   • Manuel Hermenegildo has contributed various ideas, small fixes and
     patches.

   • Phil Jackson wrote ‘ol-irc.el’.

   • Scott Jaderholm proposed footnotes, control over whitespace between
     folded entries, and column view for properties.

   • Matt Jones wrote MobileOrg Android.

   • Tokuya Kameshima wrote ‘org-wl.el’ and ‘org-mew.el’.

   • Shidai Liu (“Leo”) asked for embedded LaTeX and tested it.  He also
     provided frequent feedback and some patches.

   • Matt Lundin has proposed last-row references for table formulas and
     named invisible anchors.  He has also worked a lot on the FAQ.

   • David Maus wrote ‘org-atom.el’, maintains the issues file for Org,
     and is a prolific contributor on the mailing list with competent
     replies, small fixes and patches.

   • Jason F. McBrayer suggested agenda export to CSV format.

   • Kyle Meyer helped setting up the public-inbox
     (https://public-inbox.org/) archive of the Org mailing list
     (https://orgmode.org/list/) and has been fixing many bugs.

   • Max Mikhanosha came up with the idea of refiling.

   • Dmitri Minaev sent a patch to set priority limits on a per-file
     basis.

   • Stefan Monnier provided a patch to keep the Emacs Lisp compiler
     happy.

   • Richard Moreland wrote MobileOrg for the iPhone.

   • Rick Moynihan proposed allowing multiple TODO sequences in a file
     and being able to quickly restrict the agenda to a subtree.

   • Todd Neal provided patches for links to Info files and Elisp forms.

   • Greg Newman refreshed the unicorn logo into its current form.

   • Tim O’Callaghan suggested in-file links, search options for general
     file links, and tags.

   • Osamu Okano wrote ‘orgcard2ref.pl’, a Perl program to create a text
     version of the reference card.

   • Takeshi Okano translated the manual and David O’Toole’s tutorial
     into Japanese.

   • Oliver Oppitz suggested multi-state TODO items.

   • Scott Otterson sparked the introduction of descriptive text for
     links, among other things.

   • Pete Phillips helped during the development of the TAGS feature,
     and provided frequent feedback.

   • Martin Pohlack provided the code snippet to bundle character
     insertion into bundles of 20 for undo.

   • Ihor Radchenko helped with fixing bugs and improving the user
     experience regarding Org’s speed.

   • T. V. Raman reported bugs and suggested improvements.

   • Matthias Rempe (Oelde) provided ideas, Windows support, and quality
     control.

   • Paul Rivier provided the basic implementation of named footnotes.
     He also acted as mailing list moderator for some time.

   • Kevin Rogers contributed code to access VM files on remote hosts.

   • Frank Ruell solved the mystery of the ‘keymapp nil’ bug, a conflict
     with ‘allout.el’.

   • Jason Riedy generalized the send-receive mechanism for Orgtbl
     tables with extensive patches.

   • Philip Rooke created the Org reference card, provided lots of
     feedback, developed and applied standards to the Org documentation.

   • Christian Schlauer proposed angular brackets around links, among
     other things.

   • Paul Sexton wrote ‘org-ctags.el’.

   • Tom Shannon’s ‘organizer-mode.el’ inspired linking to VM/BBDB/Gnus.

   • Ilya Shlyakhter proposed the Archive Sibling, line numbering in
     literal examples, and remote highlighting for referenced code
     lines.

   • Stathis Sideris wrote the ‘ditaa.jar’ ASCII to PNG converter that
     is now packaged into the org-contrib
     (https://git.sr.ht/~bzg/org-contrib) repository.

   • Daniel Sinder came up with the idea of internal archiving by
     locking subtrees.

   • Dale Smith proposed link abbreviations.

   • James TD Smith has contributed a large number of patches for useful
     tweaks and features.

   • Adam Spiers asked for global linking commands, inspired the link
     extension system, added support for Mairix, and proposed the
     mapping API.

   • Ulf Stegemann created the table to translate special symbols to
     HTML, LaTeX, UTF-8, Latin-1 and ASCII.

   • Andy Stewart contributed code to ‘ol-w3m.el’, to copy HTML content
     with links transformation to Org syntax.

   • David O’Toole wrote ‘org-publish.el’ and drafted the manual chapter
     about publishing.

   • Jambunathan K. contributed the ODT exporter.

   • Sebastien Vauban reported many issues with LaTeX and Beamer export
     and enabled source code highlighting in Gnus.

   • Stefan Vollmar organized a video-recorded talk at the
     Max-Planck-Institute for Neurology.  He also inspired the creation
     of a concept index for HTML export.

   • Jürgen Vollmer contributed code generating the table of contents in
     HTML output.

   • Samuel Wales has provided important feedback and bug reports.

   • Chris Wallace provided a patch implementing the ‘QUOTE’ block.

   • David Wainberg suggested archiving, and improvements to the linking
     system.

   • Carsten Wimmer suggested some changes and helped fix a bug in
     linking to Gnus.

   • Roland Winkler requested additional key bindings to make Org work
     on a TTY.

   • Piotr Zielinski wrote ‘org-mouse.el’, proposed agenda blocks and
     contributed various ideas and code snippets.

   • Marco Wahl wrote ‘ol-eww.el’.


File: org.info,  Node: GNU Free Documentation License,  Next: Main Index,  Prev: History and Acknowledgments,  Up: Top

Appendix C GNU Free Documentation License
*****************************************

                     Version 1.3, 3 November 2008

     Copyright © 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
     <https://fsf.org/>

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document “free” in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or
     noncommercially.  Secondarily, this License preserves for the
     author and publisher a way to get credit for their work, while not
     being considered responsible for modifications made by others.

     This License is a kind of “copyleft”, which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.  We
     recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium,
     that contains a notice placed by the copyright holder saying it can
     be distributed under the terms of this License.  Such a notice
     grants a world-wide, royalty-free license, unlimited in duration,
     to use that work under the conditions stated herein.  The
     “Document”, below, refers to any such manual or work.  Any member
     of the public is a licensee, and is addressed as “you”.  You accept
     the license if you copy, modify or distribute the work in a way
     requiring permission under copyright law.

     A “Modified Version” of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A “Secondary Section” is a named appendix or a front-matter section
     of the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document’s overall
     subject (or to related matters) and contains nothing that could
     fall directly within that overall subject.  (Thus, if the Document
     is in part a textbook of mathematics, a Secondary Section may not
     explain any mathematics.)  The relationship could be a matter of
     historical connection with the subject or with related matters, or
     of legal, commercial, philosophical, ethical or political position
     regarding them.

     The “Invariant Sections” are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in the
     notice that says that the Document is released under this License.
     If a section does not fit the above definition of Secondary then it
     is not allowed to be designated as Invariant.  The Document may
     contain zero Invariant Sections.  If the Document does not identify
     any Invariant Sections then there are none.

     The “Cover Texts” are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.  A
     Front-Cover Text may be at most 5 words, and a Back-Cover Text may
     be at most 25 words.

     A “Transparent” copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images composed
     of pixels) generic paint programs or (for drawings) some widely
     available drawing editor, and that is suitable for input to text
     formatters or for automatic translation to a variety of formats
     suitable for input to text formatters.  A copy made in an otherwise
     Transparent file format whose markup, or absence of markup, has
     been arranged to thwart or discourage subsequent modification by
     readers is not Transparent.  An image format is not Transparent if
     used for any substantial amount of text.  A copy that is not
     “Transparent” is called “Opaque”.

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and standard-conforming
     simple HTML, PostScript or PDF designed for human modification.
     Examples of transparent image formats include PNG, XCF and JPG.
     Opaque formats include proprietary formats that can be read and
     edited only by proprietary word processors, SGML or XML for which
     the DTD and/or processing tools are not generally available, and
     the machine-generated HTML, PostScript or PDF produced by some word
     processors for output purposes only.

     The “Title Page” means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, “Title
     Page” means the text near the most prominent appearance of the
     work’s title, preceding the beginning of the body of the text.

     The “publisher” means any person or entity that distributes copies
     of the Document to the public.

     A section “Entitled XYZ” means a named subunit of the Document
     whose title either is precisely XYZ or contains XYZ in parentheses
     following text that translates XYZ in another language.  (Here XYZ
     stands for a specific section name mentioned below, such as
     “Acknowledgements”, “Dedications”, “Endorsements”, or “History”.)
     To “Preserve the Title” of such a section when you modify the
     Document means that it remains a section “Entitled XYZ” according
     to this definition.

     The Document may include Warranty Disclaimers next to the notice
     which states that this License applies to the Document.  These
     Warranty Disclaimers are considered to be included by reference in
     this License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and
     has no effect on the meaning of this License.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow the
     conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly
     have printed covers) of the Document, numbering more than 100, and
     the Document’s license notice requires Cover Texts, you must
     enclose the copies in covers that carry, clearly and legibly, all
     these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the title
     equally prominent and visible.  You may add other material on the
     covers in addition.  Copying with changes limited to the covers, as
     long as they preserve the title of the Document and satisfy these
     conditions, can be treated as verbatim copying in other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a machine-readable
     Transparent copy along with each Opaque copy, or state in or with
     each Opaque copy a computer-network location from which the general
     network-using public has access to download using public-standard
     network protocols a complete Transparent copy of the Document, free
     of added material.  If you use the latter option, you must take
     reasonably prudent steps, when you begin distribution of Opaque
     copies in quantity, to ensure that this Transparent copy will
     remain thus accessible at the stated location until at least one
     year after the last time you distribute an Opaque copy (directly or
     through your agents or retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of copies,
     to give them a chance to provide you with an updated version of the
     Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with the
     Modified Version filling the role of the Document, thus licensing
     distribution and modification of the Modified Version to whoever
     possesses a copy of it.  In addition, you must do these things in
     the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of previous
          versions (which should, if there were any, be listed in the
          History section of the Document).  You may use the same title
          as a previous version if the original publisher of that
          version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has fewer than five), unless they release you
          from this requirement.

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document’s
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section Entitled “History”, Preserve its Title,
          and add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on the
          Title Page.  If there is no section Entitled “History” in the
          Document, create one stating the title, year, authors, and
          publisher of the Document as given on its Title Page, then add
          an item describing the Modified Version as stated in the
          previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in the
          “History” section.  You may omit a network location for a work
          that was published at least four years before the Document
          itself, or if the original publisher of the version it refers
          to gives permission.

       K. For any section Entitled “Acknowledgements” or “Dedications”,
          Preserve the Title of the section, and preserve in the section
          all the substance and tone of each of the contributor
          acknowledgements and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document, unaltered
          in their text and in their titles.  Section numbers or the
          equivalent are not considered part of the section titles.

       M. Delete any section Entitled “Endorsements”.  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section to be Entitled
          “Endorsements” or to conflict in title with any Invariant
          Section.

       O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option designate
     some or all of these sections as invariant.  To do this, add their
     titles to the list of Invariant Sections in the Modified Version’s
     license notice.  These titles must be distinct from any other
     section titles.

     You may add a section Entitled “Endorsements”, provided it contains
     nothing but endorsements of your Modified Version by various
     parties—for example, statements of peer review or that the text has
     been approved by an organization as the authoritative definition of
     a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end of
     the list of Cover Texts in the Modified Version.  Only one passage
     of Front-Cover Text and one of Back-Cover Text may be added by (or
     through arrangements made by) any one entity.  If the Document
     already includes a cover text for the same cover, previously added
     by you or by arrangement made by the same entity you are acting on
     behalf of, you may not add another; but you may replace the old
     one, on explicit permission from the previous publisher that added
     the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination all
     of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice, and that you preserve all
     their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections Entitled
     “History” in the various original documents, forming one section
     Entitled “History”; likewise combine any sections Entitled
     “Acknowledgements”, and any sections Entitled “Dedications”.  You
     must delete all sections Entitled “Endorsements.”

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the documents
     in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow this
     License in all other respects regarding verbatim copying of that
     document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of a
     storage or distribution medium, is called an “aggregate” if the
     copyright resulting from the compilation is not used to limit the
     legal rights of the compilation’s users beyond what the individual
     works permit.  When the Document is included in an aggregate, this
     License does not apply to the other works in the aggregate which
     are not themselves derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half
     of the entire aggregate, the Document’s Cover Texts may be placed
     on covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic
     form.  Otherwise they must appear on printed covers that bracket
     the whole aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warranty Disclaimers, provided that you also
     include the original English version of this License and the
     original versions of those notices and disclaimers.  In case of a
     disagreement between the translation and the original version of
     this License or a notice or disclaimer, the original version will
     prevail.

     If a section in the Document is Entitled “Acknowledgements”,
     “Dedications”, or “History”, the requirement (section 4) to
     Preserve its Title (section 1) will typically require changing the
     actual title.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense, or distribute it is void,
     and will automatically terminate your rights under this License.

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly and
     finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from you
     under this License.  If your rights have been terminated and not
     permanently reinstated, receipt of a copy of some or all of the
     same material does not give you any rights to use it.

  10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     <https://www.gnu.org/copyleft/>.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License “or any later version” applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If the
     Document does not specify a version number of this License, you may
     choose any version ever published (not as a draft) by the Free
     Software Foundation.  If the Document specifies that a proxy can
     decide which future versions of this License can be used, that
     proxy’s public statement of acceptance of a version permanently
     authorizes you to choose that version for the Document.

  11. RELICENSING

     “Massive Multiauthor Collaboration Site” (or “MMC Site”) means any
     World Wide Web server that publishes copyrightable works and also
     provides prominent facilities for anybody to edit those works.  A
     public wiki that anybody can edit is an example of such a server.
     A “Massive Multiauthor Collaboration” (or “MMC”) contained in the
     site means any set of copyrightable works thus published on the MMC
     site.

     “CC-BY-SA” means the Creative Commons Attribution-Share Alike 3.0
     license published by Creative Commons Corporation, a not-for-profit
     corporation with a principal place of business in San Francisco,
     California, as well as future copyleft versions of that license
     published by that same organization.

     “Incorporate” means to publish or republish a Document, in whole or
     in part, as part of another Document.

     An MMC is “eligible for relicensing” if it is licensed under this
     License, and if all works that were first published under this
     License somewhere other than this MMC, and subsequently
     incorporated in whole or in part into the MMC, (1) had no cover
     texts or invariant sections, and (2) were thus incorporated prior
     to November 1, 2008.

     The operator of an MMC Site may republish an MMC contained in the
     site under CC-BY-SA on the same site at any time before August 1,
     2009, provided the MMC is eligible for relicensing.

C.1 ADDENDUM: How to use this License for your documents
========================================================

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

     Copyright (C)  YEAR  YOUR NAME.
     Permission is granted to copy, distribute and/or modify this document
     under the terms of the GNU Free Documentation License, Version 1.3
     or any later version published by the Free Software Foundation;
     with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
     Texts.  A copy of the license is included in the section entitled ``GNU
     Free Documentation License''.

   If you have Invariant Sections, Front-Cover Texts and Back-Cover
Texts, replace the “with...Texts.” line with this:

     with the Invariant Sections being LIST THEIR TITLES, with
     the Front-Cover Texts being LIST, and with the Back-Cover Texts
     being LIST.

   If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

   If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of free
software license, such as the GNU General Public License, to permit
their use in free software.


File: org.info,  Node: Main Index,  Next: Key Index,  Prev: GNU Free Documentation License,  Up: Top

D Main Index
************

 [index ]
* Menu:

* *this*, in post header argument:       Results of Evaluation.
                                                              (line 277)
* + suffix, in properties:               Property Syntax.     (line  52)
* _ALL suffix, in properties:            Property Syntax.     (line  50)
* abbreviation, links:                   Link Abbreviations.  (line   6)
* abstract, in LaTeX export:             Special blocks in LaTeX export.
                                                              (line   6)
* action, for publishing:                Publishing action.   (line   6)
* activation:                            Activation.          (line   6)
* active region:                         Structure Editing.   (line  46)
* add-on packages:                       Add-on Packages.     (line   6)
* agenda:                                Weekly/daily agenda. (line   6)
* agenda dispatcher:                     Agenda Dispatcher.   (line   6)
* agenda files:                          Agenda Files.        (line   6)
* agenda files, removing buffers:        Agenda Commands.     (line 497)
* agenda filtering:                      Filtering/limiting agenda items.
                                                              (line  20)
* agenda views:                          Agenda Views.        (line   6)
* agenda views, custom:                  Custom Agenda Views. (line   6)
* agenda views, exporting:               Exporting Agenda Views.
                                                              (line   6)
* agenda views, exporting <1>:           Exporting Agenda Views.
                                                              (line  13)
* agenda views, main example:            Storing searches.    (line  11)
* agenda views, optimization:            Speeding Up Your Agendas.
                                                              (line   6)
* agenda views, user-defined:            Special Agenda Views.
                                                              (line   6)
* agenda*, as an agenda views:           Storing searches.    (line  11)
* agenda, as an agenda views:            Storing searches.    (line  11)
* agenda, column view:                   Agenda Column View.  (line   6)
* agenda, pipe:                          Extracting Agenda Information.
                                                              (line   6)
* agenda, with block views:              Block agenda.        (line   6)
* alignment in tables:                   Column Width and Alignment.
                                                              (line   6)
* ALLTAGS, special property:             Special Properties.  (line  13)
* ALT_TITLE, property:                   Table of Contents.   (line  68)
* ALT_TITLE, property <1>:               Headings and sectioning structure.
                                                              (line  24)
* angle bracket links:                   Link Format.         (line   6)
* angular brackets, around links:        External Links.      (line 136)
* anniversaries, from BBDB:              Weekly/daily agenda. (line  79)
* API, for mapping:                      Using the Mapping API.
                                                              (line   6)
* API, for properties:                   Using the Property API.
                                                              (line   6)
* APPENDIX, property:                    Headings and sectioning structure.
                                                              (line  20)
* appointment:                           Timestamps.          (line  14)
* appointment <1>:                       Weekly/daily agenda. (line 126)
* appointment reminders:                 Weekly/daily agenda. (line 126)
* appt.el:                               Weekly/daily agenda. (line 126)
* APPT_WARNTIME, keyword:                Weekly/daily agenda. (line 126)
* archive locations:                     Moving subtrees.     (line  25)
* ARCHIVE, keyword:                      Moving subtrees.     (line  35)
* ARCHIVE, keyword <1>:                  In-buffer Settings.  (line  16)
* ARCHIVE, property:                     Property Inheritance.
                                                              (line  33)
* ARCHIVE, property <1>:                 Moving subtrees.     (line  37)
* ARCHIVE, tag:                          Internal archiving.  (line   6)
* archived entries, in agenda views:     Agenda Views.        (line  37)
* archiving:                             Refiling and Archiving.
                                                              (line   6)
* archiving <1>:                         Archiving.           (line   6)
* arguments, in code blocks:             Environment of a Code Block.
                                                              (line   9)
* ASCII export:                          ASCII/Latin-1/UTF-8 export.
                                                              (line   6)
* ASCII, keyword:                        ASCII/Latin-1/UTF-8 export.
                                                              (line  63)
* Atom feeds:                            Capture and Attachments.
                                                              (line   6)
* Atom feeds <1>:                        RSS Feeds.           (line   6)
* attach from Dired:                     Attach from Dired.   (line   6)
* attachment links:                      External Links.      (line   6)
* attachment links, searching:           Search Options.      (line   6)
* attachments:                           Capture and Attachments.
                                                              (line   6)
* attachments <1>:                       Attachments.         (line   6)
* ATTR_ASCII, keyword:                   ASCII/Latin-1/UTF-8 export.
                                                              (line  74)
* ATTR_BEAMER, keyword:                  Beamer specific syntax.
                                                              (line  35)
* ATTR_HTML, keyword:                    Links in HTML export.
                                                              (line  27)
* ATTR_HTML, keyword <1>:                Tables in HTML export.
                                                              (line  11)
* ATTR_HTML, keyword <2>:                Images in HTML export.
                                                              (line  28)
* ATTR_LATEX, keyword:                   Images in LaTeX export.
                                                              (line   6)
* ATTR_LATEX, keyword <1>:               Plain lists in LaTeX export.
                                                              (line   6)
* ATTR_LATEX, keyword <2>:               Source blocks in LaTeX export.
                                                              (line   6)
* ATTR_LATEX, keyword <3>:               Example blocks in LaTeX export.
                                                              (line   6)
* ATTR_LATEX, keyword <4>:               Special blocks in LaTeX export.
                                                              (line   6)
* ATTR_LATEX, keyword <5>:               Horizontal rules in LaTeX export.
                                                              (line   6)
* ATTR_LATEX, keyword <6>:               Verse blocks in LaTeX export.
                                                              (line   6)
* ATTR_LATEX, keyword <7>:               Quote blocks in LaTeX export.
                                                              (line   6)
* ATTR_ODT, keyword:                     Tables in ODT export.
                                                              (line  20)
* ATTR_ODT, keyword <1>:                 Images in ODT export.
                                                              (line  31)
* ATTR_ODT, keyword <2>:                 Images in ODT export.
                                                              (line  75)
* ATTR_ODT, keyword <3>:                 Advanced topics in ODT export.
                                                              (line 151)
* ATTR_TEXINFO, keyword:                 Plain lists in Texinfo export.
                                                              (line  19)
* ATTR_TEXINFO, keyword <1>:             Tables in Texinfo export.
                                                              (line   6)
* ATTR_TEXINFO, keyword <2>:             Images in Texinfo export.
                                                              (line   6)
* ATTR_TEXINFO, keyword <3>:             Quotations in Texinfo export.
                                                              (line   6)
* ATTR_TEXINFO, keyword <4>:             Special blocks in Texinfo export.
                                                              (line  10)
* author:                                Feedback.            (line   6)
* AUTHOR, keyword:                       Export Settings.     (line  25)
* author, macro:                         Macro Replacement.   (line  41)
* auto clocking out after idle time:     Resolving idle time. (line  91)
* auto-save, in code block editing:      Editing Source Code. (line  11)
* autoload:                              Activation.          (line   6)
* babel, languages:                      Languages.           (line   6)
* babel, library of:                     Library of Babel.    (line   6)
* backslashes, in links:                 Link Format.         (line  17)
* backtrace of an error:                 Feedback.            (line  81)
* BBDB links:                            External Links.      (line   6)
* BBDB, anniversaries:                   Weekly/daily agenda. (line  79)
* Beamer export:                         Beamer Export.       (line   6)
* BEAMER, keyword:                       Beamer specific syntax.
                                                              (line  19)
* BEAMER_ACT, property:                  Frames and Blocks in Beamer.
                                                              (line  41)
* BEAMER_COL, property:                  Frames and Blocks in Beamer.
                                                              (line  49)
* BEAMER_ENV, property:                  Frames and Blocks in Beamer.
                                                              (line  14)
* BEAMER_FONT_THEME, keyword:            Beamer specific export settings.
                                                              (line  17)
* BEAMER_HEADER, keyword:                Beamer specific export settings.
                                                              (line  26)
* BEAMER_INNER_THEME, keyword:           Beamer specific export settings.
                                                              (line  20)
* BEAMER_OPT, property:                  Frames and Blocks in Beamer.
                                                              (line  41)
* BEAMER_OUTER_THEME, keyword:           Beamer specific export settings.
                                                              (line  23)
* BEAMER_REF, property:                  Frames and Blocks in Beamer.
                                                              (line  27)
* BEAMER_THEME, keyword:                 Beamer specific export settings.
                                                              (line  11)
* BEGIN clocktable:                      The clock table.     (line  36)
* BEGIN columnview:                      Capturing column view.
                                                              (line  11)
* BEGIN_CENTER:                          Paragraphs.          (line  32)
* BEGIN_COMMENT:                         Comment Lines.       (line  10)
* BEGIN_EXAMPLE:                         Literal Examples.    (line  10)
* BEGIN_EXPORT ascii:                    ASCII/Latin-1/UTF-8 export.
                                                              (line  63)
* BEGIN_EXPORT beamer:                   Beamer specific syntax.
                                                              (line  19)
* BEGIN_EXPORT html:                     Quoting HTML tags.   (line  13)
* BEGIN_EXPORT latex:                    Quoting LaTeX code.  (line  19)
* BEGIN_EXPORT texinfo:                  Quoting Texinfo code.
                                                              (line   9)
* BEGIN_JUSTIFYLEFT:                     ASCII/Latin-1/UTF-8 export.
                                                              (line  84)
* BEGIN_JUSTIFYRIGHT:                    ASCII/Latin-1/UTF-8 export.
                                                              (line  84)
* BEGIN_QUOTE:                           Paragraphs.          (line  25)
* BEGIN_SRC:                             Literal Examples.    (line  38)
* BEGIN_SRC <1>:                         Structure of Code Blocks.
                                                              (line   6)
* BEGIN_VERSE:                           Paragraphs.          (line  13)
* BIND, keyword:                         Export Settings.     (line 214)
* block agenda:                          Block agenda.        (line   6)
* BLOCKED, special property:             Special Properties.  (line  13)
* blocking, of checkboxes:               Checkboxes.          (line  45)
* blocks, folding:                       Blocks.              (line   6)
* bold text, markup rules:               Emphasis and Monospace.
                                                              (line   6)
* boolean logic, for agenda searches:    Matching tags and properties.
                                                              (line  32)
* bracket links:                         Link Format.         (line   9)
* bug reports:                           Feedback.            (line   6)
* C-c C-c, overview:                     The Very Busy C-c C-c Key.
                                                              (line   6)
* cache results of code evaluation:      Evaluating Code Blocks.
                                                              (line 111)
* cache, header argument:                Evaluating Code Blocks.
                                                              (line 111)
* Calc package:                          The Spreadsheet.     (line   6)
* calc.el:                               Cooperation.         (line   7)
* calculations, in tables:               Built-in Table Editor.
                                                              (line 181)
* calculations, in tables <1>:           The Spreadsheet.     (line   6)
* calendar commands, from agenda:        Agenda Commands.     (line 447)
* calendar integration:                  Weekly/daily agenda. (line  33)
* calendar, for selecting date:          The date/time prompt.
                                                              (line  78)
* CALL, keyword:                         Evaluating Code Blocks.
                                                              (line  28)
* CAPTION, keyword:                      Captions.            (line   6)
* CAPTION, keyword <1>:                  Tables in HTML export.
                                                              (line  11)
* CAPTION, keyword <2>:                  Images in HTML export.
                                                              (line  28)
* captions, markup rules:                Captions.            (line   6)
* capture:                               Capture and Attachments.
                                                              (line   6)
* capture <1>:                           Capture.             (line   6)
* capture protocol:                      The capture protocol.
                                                              (line   6)
* capturing, from agenda:                Agenda Commands.     (line 346)
* category:                              Categories.          (line   6)
* category filtering, in agenda:         Filtering/limiting agenda items.
                                                              (line  20)
* category, for tags/property match:     Matching tags and properties.
                                                              (line  65)
* CATEGORY, keyword:                     Categories.          (line   6)
* CATEGORY, keyword <1>:                 In-buffer Settings.  (line  20)
* CATEGORY, property:                    Property Inheritance.
                                                              (line  29)
* CATEGORY, property <1>:                Categories.          (line  12)
* CDLaTeX:                               CDLaTeX mode.        (line   6)
* cdlatex.el:                            Cooperation.         (line  24)
* center blocks:                         Paragraphs.          (line  32)
* center image in LaTeX export:          Images in LaTeX export.
                                                              (line  63)
* change agenda display:                 Agenda Commands.     (line  63)
* checkbox blocking:                     Checkboxes.          (line  45)
* checkbox statistics:                   Checkboxes.          (line  29)
* checkboxes:                            Checkboxes.          (line   6)
* checkboxes and TODO dependencies:      TODO dependencies.   (line  53)
* children, subtree visibility state:    Global and local cycling.
                                                              (line   6)
* CINDEX, keyword:                       Indices.             (line   6)
* citation:                              Citation handling.   (line   6)
* CLASS, property:                       iCalendar Export.    (line  55)
* clean outline view:                    Clean View.          (line   6)
* clocking time:                         Clocking Work Time.  (line   6)
* CLOCKSUM, special property:            Special Properties.  (line  13)
* CLOCKSUM, special property <1>:        Agenda Column View.  (line  32)
* CLOCKSUM_T, special property:          Special Properties.  (line  13)
* CLOCKSUM_T, special property <1>:      Agenda Column View.  (line  56)
* clocktable, dynamic block:             The clock table.     (line   6)
* CLOCK_MODELINE_TOTAL, property:        Clocking commands.   (line  21)
* CLOSED, special property:              Special Properties.  (line  13)
* code block, batch execution:           Batch Execution.     (line   6)
* code block, editing:                   Editing Source Code. (line   6)
* code block, evaluating:                Evaluating Code Blocks.
                                                              (line   6)
* code block, exporting:                 Exporting Code Blocks.
                                                              (line   6)
* code block, extracting source code:    Extracting Source Code.
                                                              (line   6)
* code block, key bindings:              Key bindings and Useful Functions.
                                                              (line   6)
* code block, languages:                 Languages.           (line   6)
* code block, library:                   Library of Babel.    (line   6)
* code block, noweb reference:           Noweb Reference Syntax.
                                                              (line   6)
* code block, results of evaluation:     Results of Evaluation.
                                                              (line   6)
* code block, structure:                 Structure of Code Blocks.
                                                              (line   6)
* code line references, markup rules:    Literal Examples.    (line   6)
* code text, markup rules:               Emphasis and Monospace.
                                                              (line   6)
* colnames, header argument:             Environment of a Code Block.
                                                              (line  52)
* column formula:                        Column formulas.     (line   6)
* column view, for properties:           Defining columns.    (line   6)
* column view, in agenda:                Agenda Column View.  (line   6)
* column, of field coordinates:          References.          (line  90)
* COLUMNS, keyword:                      Scope of column definitions.
                                                              (line  18)
* COLUMNS, property:                     Property Inheritance.
                                                              (line  22)
* COLUMNS, property <1>:                 In-buffer Settings.  (line  24)
* comma escape, in literal examples:     Literal Examples.    (line  14)
* commands, in agenda buffer:            Agenda Commands.     (line   6)
* comment block:                         Comment Lines.       (line  10)
* comment lines:                         Comment Lines.       (line   6)
* comment trees:                         Comment Lines.       (line  13)
* commented entries, in agenda views:    Agenda Views.        (line  37)
* comments, header argument:             Extracting Source Code.
                                                              (line  46)
* completion, of dictionary words:       Completion.          (line   6)
* completion, of file names:             Handling Links.      (line  94)
* completion, of link abbreviations:     Completion.          (line   6)
* completion, of links:                  Handling Links.      (line  71)
* completion, of option keywords:        Per-file keywords.   (line  26)
* completion, of option keywords <1>:    Completion.          (line   6)
* completion, of property keys:          Completion.          (line   6)
* completion, of tags:                   Setting Tags.        (line  11)
* completion, of tags <1>:               Completion.          (line   6)
* completion, of TeX symbols:            Completion.          (line   6)
* completion, of TODO keywords:          Workflow states.     (line  17)
* completion, of TODO keywords <1>:      Completion.          (line   6)
* concept index, in Texinfo export:      Indices.             (line   6)
* constants, in calculations:            References.          (line 114)
* CONSTANTS, keyword:                    References.          (line 114)
* CONSTANTS, keyword <1>:                In-buffer Settings.  (line  29)
* constants.el:                          Cooperation.         (line  14)
* contact:                               Feedback.            (line   6)
* contents, global visibility state:     Global and local cycling.
                                                              (line  20)
* continuous clocking:                   Resolving idle time. (line  78)
* control code block evaluation:         Evaluating Code Blocks.
                                                              (line  82)
* convert:                               Advanced topics in ODT export.
                                                              (line  12)
* converter:                             Advanced topics in ODT export.
                                                              (line  12)
* COOKIE_DATA, property:                 Breaking Down Tasks. (line  21)
* COOKIE_DATA, property <1>:             Checkboxes.          (line  29)
* coordinates, of field:                 References.          (line  90)
* copying notes:                         Refiling and Archiving.
                                                              (line   6)
* copying notes <1>:                     Refile and Copy.     (line   6)
* copying, of subtrees:                  Structure Editing.   (line   6)
* COPYING, property:                     Texinfo title and copyright page.
                                                              (line  19)
* countdown timer:                       Timers.              (line   6)
* counter, macro:                        Macro Replacement.   (line  75)
* CREATOR, keyword:                      Export Settings.     (line  28)
* CSS, for HTML export:                  CSS support.         (line   6)
* cua.el:                                Conflicts.           (line  17)
* custom agenda views:                   Custom Agenda Views. (line   6)
* custom date/time format:               Custom time format.  (line   6)
* custom search strings:                 Custom Searches.     (line   6)
* CUSTOM_ID, property:                   Internal Links.      (line  11)
* CUSTOM_ID, property <1>:               Handling Links.      (line  21)
* cutting, of subtrees:                  Structure Editing.   (line   6)
* cycling, in plain lists:               Plain Lists.         (line  70)
* cycling, of agenda files:              Agenda Files.        (line  26)
* cycling, of TODO states:               TODO Basics.         (line  14)
* cycling, visibility:                   Visibility Cycling.  (line   6)
* daily agenda:                          Weekly/daily agenda. (line   6)
* dash, special symbol:                  Special Symbols.     (line  36)
* data type index, in Texinfo export:    Indices.             (line   6)
* date format, custom:                   Custom time format.  (line   6)
* date range:                            Timestamps.          (line  56)
* date stamp:                            Dates and Times.     (line   6)
* date stamps:                           Timestamps.          (line   6)
* date tree:                             Template elements.   (line  50)
* DATE, keyword:                         Export Settings.     (line  32)
* date, macro:                           Macro Replacement.   (line  49)
* date, reading in minibuffer:           The date/time prompt.
                                                              (line   6)
* dates:                                 Dates and Times.     (line   6)
* DEADLINE marker:                       Deadlines and Scheduling.
                                                              (line  11)
* DEADLINE, special property:            Special Properties.  (line  13)
* deadlines:                             Timestamps.          (line   6)
* debugging, of table formulas:          Editing and debugging formulas.
                                                              (line 132)
* default header arguments per language: Using Header Arguments.
                                                              (line  56)
* defining new protocols:                Protocols.           (line  25)
* demotion, of subtrees:                 Structure Editing.   (line   6)
* dependencies, of TODO states:          TODO dependencies.   (line   6)
* DESCRIPTION, keyword:                  Beamer specific export settings.
                                                              (line  30)
* DESCRIPTION, keyword <1>:              HTML specific export settings.
                                                              (line  10)
* DESCRIPTION, keyword <2>:              LaTeX specific export settings.
                                                              (line  11)
* DESCRIPTION, keyword <3>:              ODT specific export settings.
                                                              (line  11)
* DESCRIPTION, property:                 Headings and sectioning structure.
                                                              (line  24)
* DESCRIPTION, property <1>:             iCalendar Export.    (line  55)
* diary entries, creating from agenda:   Agenda Commands.     (line 456)
* diary integration:                     Weekly/daily agenda. (line  33)
* diary style timestamps:                Timestamps.          (line  39)
* dictionary word completion:            Completion.          (line   6)
* dir file, in Texinfo export:           Info directory file. (line   6)
* dir, header argument:                  Environment of a Code Block.
                                                              (line 310)
* DIR, property:                         Attachment defaults and dispatcher.
                                                              (line  68)
* DIR, property <1>:                     Attachment defaults and dispatcher.
                                                              (line  73)
* directories, for publishing:           Sources and destinations.
                                                              (line   6)
* dispatcher, for export commands:       The Export Dispatcher.
                                                              (line   6)
* dispatching agenda commands:           Agenda Dispatcher.   (line   6)
* display changing, in agenda:           Agenda Commands.     (line  63)
* doc, docx, rtf:                        Advanced topics in ODT export.
                                                              (line  12)
* document structure:                    Document Structure.  (line   6)
* document title:                        Export Settings.     (line  60)
* documentation:                         Documentation Access.
                                                              (line   6)
* DONE, final TODO keyword:              Per-file keywords.   (line  29)
* drawer, for properties:                Property Syntax.     (line   6)
* drawer, for state change recording:    Tracking TODO state changes.
                                                              (line   6)
* drawers:                               Drawers.             (line   6)
* duration, computing:                   Durations and time values.
                                                              (line   6)
* dvipng:                                Math formatting in HTML export.
                                                              (line   6)
* dvipng <1>:                            LaTeX math snippets. (line  50)
* dvisvgm:                               Math formatting in HTML export.
                                                              (line   6)
* dvisvgm <1>:                           LaTeX math snippets. (line  50)
* dynamic blocks:                        Dynamic Blocks.      (line   6)
* dynamic indentation:                   Clean View.          (line   6)
* ecomplete.el:                          Conflicts.           (line  32)
* editing tables:                        Tables.              (line   6)
* editing, of table formulas:            Editing and debugging formulas.
                                                              (line   6)
* edits, catching invisible:             Catching invisible edits.
                                                              (line   6)
* effort estimates:                      Effort Estimates.    (line   6)
* effort filtering, in agenda:           Filtering/limiting agenda items.
                                                              (line  20)
* EFFORT, property:                      Effort Estimates.    (line   6)
* Elisp links:                           External Links.      (line   6)
* ellipsis, special symbol:              Special Symbols.     (line  36)
* ELPA:                                  Activation.          (line   6)
* EMAIL, keyword:                        Export Settings.     (line  35)
* email, macro:                          Macro Replacement.   (line  41)
* embedding images in ODT:               Images in ODT export.
                                                              (line   6)
* entities:                              Special Symbols.     (line   6)
* enum, Texinfo attribute:               Plain lists in Texinfo export.
                                                              (line   6)
* epilogue, header argument:             Environment of a Code Block.
                                                              (line 367)
* escape character:                      Escape Character.    (line   6)
* escape syntax, for links:              Link Format.         (line  17)
* eval, header argument:                 Evaluating Code Blocks.
                                                              (line  82)
* evaluate time range:                   Creating Timestamps. (line  62)
* example block:                         Literal Examples.    (line  10)
* example blocks, in LaTeX export:       Example blocks in LaTeX export.
                                                              (line   6)
* EXCLUDE_TAGS, keyword:                 Export Settings.     (line  52)
* excluding entries from table of contents: Table of Contents.
                                                              (line  15)
* export back-end:                       Exporting.           (line  12)
* export backend:                        Exporting.           (line  12)
* export, dispatcher:                    The Export Dispatcher.
                                                              (line   6)
* export, include files:                 Include Files.       (line   6)
* export, OpenDocument:                  OpenDocument Text Export.
                                                              (line   6)
* Export, settings:                      Export Settings.     (line   6)
* Export, writing backends:              Adding Export Backends.
                                                              (line   6)
* exporting:                             Exporting.           (line   6)
* exporting agenda views:                Exporting Agenda Views.
                                                              (line  13)
* exporting, not:                        Comment Lines.       (line   6)
* exports, header argument:              Exporting Code Blocks.
                                                              (line  15)
* EXPORT_FILE_NAME, keyword:             Export Settings.     (line  64)
* EXPORT_FILE_NAME, property:            ODT export commands. (line   9)
* EXPORT_LATEX_CLASS, property:          LaTeX header and sectioning.
                                                              (line  23)
* EXPORT_LATEX_CLASS_OPTIONS, property:  LaTeX header and sectioning.
                                                              (line  23)
* extended TODO keywords:                TODO Extensions.     (line   6)
* external archiving:                    Moving subtrees.     (line   6)
* external links:                        External Links.      (line   6)
* external links, in HTML export:        Links in HTML export.
                                                              (line   6)
* faces, for TODO keywords:              Faces for TODO keywords.
                                                              (line   6)
* FAQ:                                   Summary.             (line  55)
* feature requests:                      Feedback.            (line   6)
* feedback:                              Feedback.            (line   6)
* field coordinates:                     References.          (line  90)
* field formula:                         Field and range formulas.
                                                              (line   6)
* field references:                      References.          (line  15)
* file links:                            External Links.      (line   6)
* file links, searching:                 Search Options.      (line   6)
* file name completion:                  Handling Links.      (line  94)
* file, header argument:                 Results of Evaluation.
                                                              (line 123)
* FILE, special property:                Special Properties.  (line  13)
* file-desc, header argument:            Results of Evaluation.
                                                              (line 147)
* file-ext, header argument:             Results of Evaluation.
                                                              (line 133)
* file-mode, header argument:            Results of Evaluation.
                                                              (line 158)
* files for agenda:                      Agenda Files.        (line   6)
* files, adding to agenda list:          Agenda Files.        (line  16)
* files, selecting for publishing:       Selecting files.     (line   6)
* FILETAGS, keyword:                     Tag Inheritance.     (line  20)
* FILETAGS, keyword <1>:                 In-buffer Settings.  (line  35)
* filladapt.el:                          Conflicts.           (line  43)
* filtering entries, in agenda:          Filtering/limiting agenda items.
                                                              (line  20)
* Filters, exporting:                    Advanced Export Configuration.
                                                              (line  36)
* FINDEX, keyword:                       Indices.             (line   6)
* FLAGGED, tag:                          Pulling from the mobile application.
                                                              (line  18)
* folded, subtree visibility state:      Global and local cycling.
                                                              (line   6)
* folding, sparse trees:                 Sparse Trees.        (line   6)
* following links:                       Handling Links.      (line 104)
* footers, in code blocks:               Environment of a Code Block.
                                                              (line 359)
* footnotes:                             Creating Footnotes.  (line   6)
* format specifier, in spreadsheet:      Formula syntax for Calc.
                                                              (line  17)
* format, of links:                      Link Format.         (line   6)
* formatting source code, markup rules:  Literal Examples.    (line  31)
* formula debugging:                     Editing and debugging formulas.
                                                              (line 132)
* formula editing:                       Editing and debugging formulas.
                                                              (line   6)
* formula syntax, Calc:                  Formula syntax for Calc.
                                                              (line   6)
* formula, for individual table field:   Field and range formulas.
                                                              (line   6)
* formula, for range of fields:          Field and range formulas.
                                                              (line   6)
* formula, for table column:             Column formulas.     (line   6)
* formula, in tables:                    Built-in Table Editor.
                                                              (line 181)
* function index, in Texinfo export:     Indices.             (line   6)
* global cycling:                        Global and local cycling.
                                                              (line  20)
* global key bindings:                   Activation.          (line   6)
* global TODO list:                      Global TODO list.    (line   6)
* global visibility states:              Global and local cycling.
                                                              (line  20)
* Gnus links:                            External Links.      (line   6)
* graph, in tables:                      Org Plot.            (line   6)
* group tags:                            Tag Hierarchy.       (line   6)
* group tags, as regular expressions:    Matching tags and properties.
                                                              (line  58)
* grouping columns in tables:            Column Groups.       (line   6)
* habits:                                Tracking your habits.
                                                              (line   6)
* hacking:                               Hacking.             (line   6)
* header arguments per language:         Using Header Arguments.
                                                              (line  94)
* header arguments, in code blocks:      Structure of Code Blocks.
                                                              (line  64)
* header lines, in tables:               Built-in Table Editor.
                                                              (line   6)
* header, for LaTeX files:               LaTeX header and sectioning.
                                                              (line   6)
* HEADER, keyword:                       Using Header Arguments.
                                                              (line 134)
* headers, in code blocks:               Environment of a Code Block.
                                                              (line 359)
* headline navigation:                   Motion.              (line   6)
* headline tagging:                      Tags.                (line   6)
* headline, promotion and demotion:      Structure Editing.   (line   6)
* headlines:                             Headlines.           (line   6)
* headlines, in HTML export:             Headlines in HTML export.
                                                              (line   6)
* Help links:                            External Links.      (line   6)
* hide text:                             Visibility Cycling.  (line   6)
* hiding leading stars:                  Clean View.          (line   6)
* hlines, header argument:               Results of Evaluation.
                                                              (line  73)
* hooks:                                 Hooks.               (line   6)
* horizontal rule, in tables:            Built-in Table Editor.
                                                              (line   6)
* horizontal rules, in ASCII export:     ASCII/Latin-1/UTF-8 export.
                                                              (line  74)
* horizontal rules, in LaTeX export:     Horizontal rules in LaTeX export.
                                                              (line   6)
* horizontal rules, markup rules:        Horizontal Rules.    (line   6)
* HTML export:                           HTML Export.         (line   6)
* HTML export, CSS:                      CSS support.         (line   6)
* HTML, and Orgtbl mode:                 Translator functions.
                                                              (line   6)
* HTML, keyword:                         Quoting HTML tags.   (line  13)
* html-style, OPTIONS item:              CSS support.         (line  56)
* HTML5, export new elements:            HTML doctypes.       (line  25)
* HTML_CONTAINER, keyword:               HTML specific export settings.
                                                              (line  22)
* HTML_CONTAINER_CLASS, property:        CSS support.         (line  62)
* HTML_DOCTYPE, keyword:                 HTML specific export settings.
                                                              (line  19)
* HTML_HEAD, keyword:                    HTML specific export settings.
                                                              (line  38)
* HTML_HEAD, keyword <1>:                CSS support.         (line  49)
* HTML_HEADLINE_CLASS, property:         CSS support.         (line  62)
* HTML_HEAD_EXTRA, keyword:              HTML specific export settings.
                                                              (line  42)
* HTML_HEAD_EXTRA, keyword <1>:          CSS support.         (line  49)
* HTML_INCLUDE_STYLE, keyword:           CSS support.         (line  44)
* HTML_LINK_HOME, keyword:               HTML specific export settings.
                                                              (line  26)
* HTML_LINK_UP, keyword:                 HTML specific export settings.
                                                              (line  29)
* HTML_MATHJAX, keyword:                 HTML specific export settings.
                                                              (line  33)
* hyperlinks:                            Hyperlinks.          (line   6)
* hyperlinks, adding new types:          Adding Hyperlink Types.
                                                              (line   6)
* iCalendar export:                      iCalendar Export.    (line   6)
* ID, property:                          Handling Links.      (line  21)
* ID, property <1>:                      Capturing column view.
                                                              (line  34)
* ID, property <2>:                      iCalendar Export.    (line  30)
* ideas:                                 Feedback.            (line   6)
* identify, ImageMagick:                 Images in ODT export.
                                                              (line  34)
* idle, resolve, dangling:               Resolving idle time. (line   9)
* image, centering in LaTeX export:      Images in LaTeX export.
                                                              (line  63)
* ImageMagick:                           Math formatting in HTML export.
                                                              (line   6)
* ImageMagick <1>:                       LaTeX math snippets. (line  50)
* images, embedding in ODT:              Images in ODT export.
                                                              (line   6)
* images, inline in HTML:                Images in HTML export.
                                                              (line   6)
* images, inline in LaTeX:               Images in LaTeX export.
                                                              (line   6)
* images, markup rules:                  Images.              (line   6)
* imenu.el:                              Cooperation.         (line  29)
* in-buffer settings:                    In-buffer Settings.  (line   6)
* inactive timestamp:                    Timestamps.          (line  68)
* include files, during export:          Include Files.       (line   6)
* INCLUDE, keyword:                      Include Files.       (line   6)
* Indent mode:                           Org Indent Mode.     (line   6)
* indentation, in code blocks:           Editing Source Code. (line  35)
* indentation, in source blocks:         Literal Examples.    (line  81)
* index, in a publishing project:        Generating an index. (line   6)
* INDEX, keyword:                        Generating an index. (line  17)
* INDEX, property:                       Indices.             (line  14)
* indic, Texinfo attribute:              Plain lists in Texinfo export.
                                                              (line  25)
* Info:                                  Documentation Access.
                                                              (line   6)
* Info directory file, in Texinfo export: Info directory file.
                                                              (line   6)
* Info links:                            External Links.      (line   6)
* INFOJS_OPT, keyword:                   JavaScript support.  (line  19)
* inheritance, of properties:            Property Inheritance.
                                                              (line   6)
* inheritance, of tags:                  Tag Inheritance.     (line   6)
* inline, in LaTeX export:               Quoting LaTeX code.  (line  11)
* inlining images:                       Images.              (line   6)
* inlining images in HTML:               Images in HTML export.
                                                              (line   6)
* inlining images in LaTeX:              Images in LaTeX export.
                                                              (line   6)
* input-file, macro:                     Macro Replacement.   (line  64)
* inserting links:                       Handling Links.      (line  71)
* insertion, of templates:               Structure Templates. (line   6)
* insertion, of templates <1>:           Structure Templates. (line  21)
* install-info, in Texinfo export:       Info directory file. (line   6)
* installation:                          Installation.        (line   6)
* Installing Org protocol:               Protocols.           (line  14)
* internal links:                        Internal Links.      (line   6)
* internal links, in HTML export:        Links in HTML export.
                                                              (line   6)
* introduction:                          Introduction.        (line   6)
* IRC links:                             External Links.      (line   6)
* italic text, markup rules:             Emphasis and Monospace.
                                                              (line   6)
* ITEM, special property:                Special Properties.  (line  13)
* jumping, to headlines:                 Motion.              (line   6)
* key bindings, global:                  Activation.          (line   6)
* keystroke index, in Texinfo export:    Indices.             (line   6)
* keyword options:                       Per-file keywords.   (line   6)
* keyword, macro:                        Macro Replacement.   (line  41)
* KEYWORDS, keyword:                     Beamer specific export settings.
                                                              (line  37)
* KEYWORDS, keyword <1>:                 HTML specific export settings.
                                                              (line  46)
* KEYWORDS, keyword <2>:                 LaTeX specific export settings.
                                                              (line  61)
* KEYWORDS, keyword <3>:                 ODT specific export settings.
                                                              (line  16)
* KINDEX, keyword:                       Indices.             (line   6)
* laggy:                                 Feedback.            (line  72)
* language specific default header arguments: Using Header Arguments.
                                                              (line  56)
* language specific header arguments properties: Using Header Arguments.
                                                              (line  94)
* language, in code blocks:              Structure of Code Blocks.
                                                              (line  47)
* LANGUAGE, keyword:                     Export Settings.     (line  38)
* LANGUAGE, keyword <1>:                 LaTeX specific export settings.
                                                              (line  20)
* LANGUAGE, keyword <2>:                 LaTeX header and sectioning.
                                                              (line  47)
* LAST_REPEAT, property:                 Clocking commands.   (line  21)
* LaTeX class:                           LaTeX header and sectioning.
                                                              (line   6)
* LaTeX export:                          LaTeX Export.        (line   6)
* LaTeX fragments:                       LaTeX fragments.     (line   6)
* LaTeX fragments, preview:              Previewing LaTeX fragments.
                                                              (line   6)
* LaTeX header:                          LaTeX header and sectioning.
                                                              (line   6)
* LaTeX interpretation:                  Embedded LaTeX.      (line   6)
* LaTeX sectioning structure:            LaTeX header and sectioning.
                                                              (line   6)
* LaTeX, and Orgtbl mode:                A LaTeX example.     (line   6)
* LATEX, keyword:                        Quoting LaTeX code.  (line  15)
* LATEX_CLASS, keyword:                  LaTeX specific export settings.
                                                              (line  39)
* LATEX_CLASS, keyword <1>:              LaTeX header and sectioning.
                                                              (line  23)
* LATEX_CLASS_OPTIONS, keyword:          LaTeX specific export settings.
                                                              (line  47)
* LATEX_CLASS_OPTIONS, keyword <1>:      LaTeX header and sectioning.
                                                              (line  23)
* LATEX_COMPILER, keyword:               LaTeX/PDF export commands.
                                                              (line  25)
* LATEX_COMPILER, keyword <1>:           LaTeX specific export settings.
                                                              (line  51)
* LATEX_HEADER, keyword:                 HTML specific export settings.
                                                              (line  51)
* LATEX_HEADER, keyword <1>:             LaTeX specific export settings.
                                                              (line  56)
* LATEX_HEADER, keyword <2>:             LaTeX header and sectioning.
                                                              (line  30)
* LATEX_HEADER_EXTRA, keyword:           LaTeX specific export settings.
                                                              (line  56)
* LATEX_HEADER_EXTRA, keyword <1>:       LaTeX header and sectioning.
                                                              (line  30)
* Latin-1 export:                        ASCII/Latin-1/UTF-8 export.
                                                              (line   6)
* lettered lists, in Texinfo export:     Plain lists in Texinfo export.
                                                              (line   6)
* level, for tags/property match:        Matching tags and properties.
                                                              (line  65)
* LibreOffice:                           OpenDocument Text Export.
                                                              (line   6)
* limits, in agenda:                     Filtering/limiting agenda items.
                                                              (line 129)
* line breaks, markup rules:             Paragraphs.          (line   9)
* lines, include:                        Include Files.       (line  37)
* link abbreviations:                    Link Abbreviations.  (line   6)
* link abbreviations, completion of:     Completion.          (line   6)
* link completion:                       Handling Links.      (line  71)
* link format:                           Link Format.         (line   6)
* LINK, keyword:                         Link Abbreviations.  (line  49)
* LINK, keyword <1>:                     In-buffer Settings.  (line  39)
* links, external:                       External Links.      (line   6)
* links, finding next/previous:          Handling Links.      (line 153)
* links, handling:                       Handling Links.      (line   6)
* links, in HTML export:                 Links in HTML export.
                                                              (line   6)
* links, in ODT export:                  Links in ODT export. (line   6)
* links, internal:                       Internal Links.      (line   6)
* links, publishing:                     Publishing links.    (line   6)
* links, radio targets:                  Radio Targets.       (line   6)
* links, returning to:                   Handling Links.      (line 146)
* linter:                                Org Syntax.          (line  24)
* Lisp forms, as table formulas:         Formula syntax for Lisp.
                                                              (line   6)
* list of listings:                      Table of Contents.   (line   6)
* list of tables:                        Table of Contents.   (line   6)
* lists, in other modes:                 Tables in Arbitrary Syntax.
                                                              (line   6)
* lists, ordered:                        Plain Lists.         (line   6)
* lists, plain:                          Plain Lists.         (line   6)
* literal examples, markup rules:        Literal Examples.    (line   6)
* LOCATION, property:                    iCalendar Export.    (line  55)
* logging, of progress:                  Progress Logging.    (line   6)
* LOGGING, property:                     Tracking TODO state changes.
                                                              (line  45)
* LOGGING, property <1>:                 Property Inheritance.
                                                              (line  37)
* LOG_INTO_DRAWER, property:             Tracking TODO state changes.
                                                              (line   6)
* LOG_INTO_DRAWER, property <1>:         Clocking commands.   (line   7)
* lookup functions in tables:            Lookup functions.    (line   6)
* lualatex:                              LaTeX/PDF export commands.
                                                              (line  25)
* macro replacement, during export:      Macro Replacement.   (line   6)
* MACRO, keyword:                        Macro Replacement.   (line   6)
* maintainer:                            Feedback.            (line   6)
* mapping entries, API:                  Using the Mapping API.
                                                              (line   6)
* mappings in open-source protocol:      The open-source protocol.
                                                              (line  67)
* mark ring:                             Handling Links.      (line 141)
* Markdown export:                       Markdown Export.     (line   6)
* marking characters, tables:            Advanced features.   (line  39)
* match view:                            Matching tags and properties.
                                                              (line   6)
* matching, of properties:               Matching tags and properties.
                                                              (line   6)
* matching, of tags:                     Matching tags and properties.
                                                              (line   6)
* matching, tags:                        Tags.                (line   6)
* math symbols:                          Special Symbols.     (line   6)
* MathJax:                               Math formatting in HTML export.
                                                              (line   6)
* MathML:                                LaTeX math snippets. (line  10)
* MH-E links:                            External Links.      (line   6)
* minlevel, include:                     Include Files.       (line  23)
* minor mode for tables:                 Orgtbl Mode.         (line   6)
* mkdirp, header argument:               Environment of a Code Block.
                                                              (line 310)
* mkdirp, header argument <1>:           Extracting Source Code.
                                                              (line  42)
* mode, for Calc:                        Formula syntax for Calc.
                                                              (line  17)
* modification-time, macro:              Macro Replacement.   (line  56)
* motion commands in agenda:             Agenda Commands.     (line  19)
* motion, between headlines:             Motion.              (line   6)
* multiple formula lines:                Editing and debugging formulas.
                                                              (line  98)
* multiple items in Texinfo lists:       Plain lists in Texinfo export.
                                                              (line  30)
* n, macro:                              Macro Replacement.   (line  75)
* NAME keyword, in source blocks:        Structure of Code Blocks.
                                                              (line   6)
* NAME, keyword:                         References.          (line 135)
* NAME, keyword <1>:                     Internal Links.      (line  21)
* name, of column or field:              References.          (line 114)
* name, of column or field <1>:          References.          (line 135)
* named references:                      References.          (line 114)
* names as TODO keywords:                TODO types.          (line   6)
* narrow columns in tables:              Column Width and Alignment.
                                                              (line   6)
* no-expand, header argument:            Extracting Source Code.
                                                              (line 107)
* NOBLOCKING, property:                  TODO dependencies.   (line  29)
* not responsive:                        Feedback.            (line  72)
* noweb, header argument:                Noweb Reference Syntax.
                                                              (line  18)
* noweb-ref, header argument:            Noweb Reference Syntax.
                                                              (line   6)
* noweb-sep, header argument:            Noweb Reference Syntax.
                                                              (line 104)
* number headlines:                      Dynamic Headline Numbering.
                                                              (line   6)
* occur, command:                        Sparse Trees.        (line   6)
* occur-tree:                            Storing searches.    (line  11)
* odd-levels-only outlines:              Clean View.          (line   6)
* ODT:                                   OpenDocument Text Export.
                                                              (line   6)
* ODT, keyword:                          Advanced topics in ODT export.
                                                              (line 120)
* ODT_STYLES_FILE, keyword:              ODT specific export settings.
                                                              (line  22)
* ODT_STYLES_FILE, keyword <1>:          Applying custom styles.
                                                              (line  29)
* only-contents, include:                Include Files.       (line  54)
* open-source protocol:                  The open-source protocol.
                                                              (line   6)
* OpenDocument:                          OpenDocument Text Export.
                                                              (line   6)
* operator, for property search:         Matching tags and properties.
                                                              (line  91)
* option keyword completion:             Completion.          (line   6)
* options, for custom agenda views:      Setting options.     (line   6)
* options, for export:                   Export Settings.     (line   6)
* options, for publishing:               Publishing options.  (line   6)
* OPTIONS, keyword:                      Export Settings.     (line   6)
* ordered lists:                         Plain Lists.         (line   6)
* ORDERED, property:                     TODO dependencies.   (line   6)
* ORDERED, property <1>:                 Checkboxes.          (line  45)
* Org export:                            Org Export.          (line   6)
* Org mode, turning on:                  Activation.          (line  25)
* Org Num mode:                          Dynamic Headline Numbering.
                                                              (line   6)
* Org protocol, set-up:                  Protocols.           (line  14)
* org-agenda, command:                   Weekly/daily agenda. (line  10)
* ORG-IMAGE-ACTUAL-WIDTH, property:      Images.              (line  30)
* org-latex-default-quote-environment:   Quote blocks in LaTeX export.
                                                              (line   6)
* Orgtbl mode:                           Orgtbl Mode.         (line   6)
* Orgtbl mode <1>:                       Tables in Arbitrary Syntax.
                                                              (line   6)
* ORGTBL, keyword:                       Radio tables.        (line  21)
* outline tree:                          Headlines.           (line   6)
* output-dir, header argument:           Results of Evaluation.
                                                              (line 123)
* overview, global visibility state:     Global and local cycling.
                                                              (line  20)
* packages, interaction with other:      Interaction.         (line   6)
* padline, header argument:              Extracting Source Code.
                                                              (line  73)
* paragraphs, markup rules:              Paragraphs.          (line   6)
* passing arguments to code blocks:      Environment of a Code Block.
                                                              (line   9)
* pasting, of subtrees:                  Structure Editing.   (line   6)
* PDF export:                            LaTeX Export.        (line   6)
* pdflatex:                              LaTeX/PDF export commands.
                                                              (line  25)
* per-file keywords:                     Per-file keywords.   (line   6)
* performance:                           Feedback.            (line  72)
* PINDEX, keyword:                       Indices.             (line   6)
* plain links:                           Link Format.         (line   6)
* plain lists:                           Plain Lists.         (line   6)
* plain lists, in LaTeX export:          Plain lists in LaTeX export.
                                                              (line   6)
* plain text external links:             External Links.      (line 136)
* plot tables using Gnuplot:             Org Plot.            (line   6)
* PLOT, keyword:                         Org Plot.            (line  12)
* post, header argument:                 Results of Evaluation.
                                                              (line 277)
* presentation, of agenda items:         Presentation and Sorting.
                                                              (line   6)
* print edition:                         Summary.             (line  60)
* printing sparse trees:                 Sparse Trees.        (line  52)
* priorities:                            Priorities.          (line   6)
* PRIORITIES, keyword:                   Priorities.          (line  52)
* PRIORITIES, keyword <1>:               In-buffer Settings.  (line  44)
* priorities, of agenda items:           Sorting of agenda items.
                                                              (line   6)
* priority cookie:                       Priorities.          (line   6)
* PRIORITY, special property:            Special Properties.  (line  13)
* profile:                               Feedback.            (line  72)
* profiler:                              Feedback.            (line 111)
* program index, in Texinfo export:      Indices.             (line   6)
* progress logging:                      Progress Logging.    (line   6)
* projects, for publishing:              Project alist.       (line   6)
* prologue, header argument:             Environment of a Code Block.
                                                              (line 359)
* promotion, of subtrees:                Structure Editing.   (line   6)
* proof, in LaTeX export:                Special blocks in LaTeX export.
                                                              (line   6)
* properties:                            Properties and Columns.
                                                              (line   6)
* properties, API:                       Using the Property API.
                                                              (line   6)
* properties, column view:               Defining columns.    (line   6)
* properties, inheritance:               Property Inheritance.
                                                              (line   6)
* properties, searching:                 Property Searches.   (line   6)
* properties, special:                   Special Properties.  (line   6)
* property syntax:                       Property Syntax.     (line   6)
* PROPERTY, keyword:                     Property Syntax.     (line  50)
* PROPERTY, keyword <1>:                 In-buffer Settings.  (line  49)
* property, macro:                       Macro Replacement.   (line  68)
* protocol, capture:                     The capture protocol.
                                                              (line   6)
* protocol, new protocol:                Protocols.           (line  25)
* protocol, open-source:                 The open-source protocol.
                                                              (line   6)
* protocol, open-source rewritten URL:   The open-source protocol.
                                                              (line  32)
* protocol, open-source, set-up mapping: The open-source protocol.
                                                              (line  67)
* protocol, store-link:                  The store-link protocol.
                                                              (line   6)
* protocols, for external access:        Capture and Attachments.
                                                              (line   6)
* protocols, for external access <1>:    Protocols.           (line   6)
* publishing:                            Publishing.          (line   6)
* publishing options:                    Publishing options.  (line   6)
* query editing, in agenda:              Filtering/limiting agenda items.
                                                              (line  20)
* quote blocks:                          Paragraphs.          (line  25)
* quote blocks, in LaTeX export:         Quote blocks in LaTeX export.
                                                              (line   6)
* radio button, checkbox as:             Checkboxes.          (line  75)
* radio tables:                          Radio tables.        (line   6)
* radio targets:                         Radio Targets.       (line   6)
* range formula:                         Field and range formulas.
                                                              (line   6)
* range references:                      References.          (line  64)
* ranges, time:                          Timestamps.          (line   6)
* recomputing table fields:              Updating the table.  (line   6)
* references:                            References.          (line   6)
* references, named:                     References.          (line 114)
* references, remote:                    References.          (line 135)
* references, to a different table:      References.          (line 135)
* references, to fields:                 References.          (line  15)
* references, to ranges:                 References.          (line  64)
* refiling notes:                        Refiling and Archiving.
                                                              (line   6)
* refiling notes <1>:                    Refile and Copy.     (line   6)
* refresh set-up:                        In-buffer Settings.  (line  12)
* region, active:                        Structure Editing.   (line  46)
* regular expressions syntax:            Regular Expressions. (line   6)
* regular expressions, in searches:      Regular Expressions. (line   6)
* regular expressions, with tags search: Matching tags and properties.
                                                              (line  53)
* relative timer:                        Timers.              (line   6)
* reminders:                             Weekly/daily agenda. (line 126)
* remote editing, bulk, from agenda:     Agenda Commands.     (line 353)
* remote editing, from agenda:           Agenda Commands.     (line 224)
* remote editing, undo:                  Agenda Commands.     (line 228)
* remote references:                     References.          (line 135)
* repeated tasks:                        Repeated tasks.      (line   6)
* report, of clocked time:               The clock table.     (line   6)
* reporting a bug:                       Feedback.            (line   6)
* request a feature:                     Feedback.            (line   6)
* resolve idle time:                     Resolving idle time. (line   9)
* results, header argument:              Results of Evaluation.
                                                              (line   6)
* RESULTS, keyword:                      Evaluating Code Blocks.
                                                              (line   6)
* results, macro:                        Macro Replacement.   (line  84)
* revealing context:                     Global and local cycling.
                                                              (line  43)
* rewritten URL in open-source protocol: The open-source protocol.
                                                              (line  32)
* Rmail links:                           External Links.      (line   6)
* row separator, in tables:              Built-in Table Editor.
                                                              (line   6)
* row, of field coordinates:             References.          (line  90)
* rownames, header argument:             Environment of a Code Block.
                                                              (line  77)
* RSS feeds:                             Capture and Attachments.
                                                              (line   6)
* RSS feeds <1>:                         RSS Feeds.           (line   6)
* rsync:                                 Uploading Files.     (line   6)
* SCHEDULED marker:                      Deadlines and Scheduling.
                                                              (line  31)
* SCHEDULED, special property:           Special Properties.  (line  13)
* scheduling:                            Timestamps.          (line   6)
* scripts, for agenda processing:        Extracting Agenda Information.
                                                              (line   6)
* search option in file links:           Search Options.      (line   6)
* search strings, custom:                Custom Searches.     (line   6)
* search view:                           Search view.         (line   6)
* searching for tags:                    Tag Searches.        (line   6)
* searching, for text:                   Search view.         (line   6)
* searching, of properties:              Property Searches.   (line   6)
* sectioning structure, for LaTeX export: LaTeX header and sectioning.
                                                              (line   6)
* SELECT_TAGS, keyword:                  Export Settings.     (line  44)
* sep, header argument:                  Results of Evaluation.
                                                              (line 154)
* sep, Texinfo attribute:                Plain lists in Texinfo export.
                                                              (line  30)
* SEQ_TODO, keyword:                     Per-file keywords.   (line   6)
* SEQ_TODO, keyword <1>:                 In-buffer Settings.  (line 196)
* session, header argument:              Environment of a Code Block.
                                                              (line 280)
* setting tags:                          Setting Tags.        (line   6)
* SETUPFILE, keyword:                    Export Settings.     (line  13)
* SETUPFILE, keyword <1>:                In-buffer Settings.  (line  54)
* sexp timestamps:                       Timestamps.          (line  39)
* shebang, header argument:              Extracting Source Code.
                                                              (line  83)
* shell links:                           External Links.      (line   6)
* shift-selection:                       Conflicts.           (line   6)
* shift-selection-mode:                  Plain Lists.         (line  95)
* show all, command:                     Global and local cycling.
                                                              (line  40)
* show all, global visibility state:     Global and local cycling.
                                                              (line  20)
* show branches, command:                Global and local cycling.
                                                              (line  52)
* show children, command:                Global and local cycling.
                                                              (line  55)
* show hidden text:                      Visibility Cycling.  (line   6)
* shy hyphen, special symbol:            Special Symbols.     (line  36)
* sitemap, of published pages:           Site map.            (line   6)
* slow:                                  Feedback.            (line  72)
* slowdown:                              Feedback.            (line  72)
* smartphone:                            Org Mobile.          (line   6)
* sorting, of agenda items:              Sorting of agenda items.
                                                              (line   6)
* sorting, of plain list:                Plain Lists.         (line 159)
* sorting, of subtrees:                  Structure Editing.   (line   6)
* source block:                          Literal Examples.    (line  38)
* source blocks, in LaTeX export:        Source blocks in LaTeX export.
                                                              (line   6)
* source code, batch execution:          Batch Execution.     (line   6)
* source code, block structure:          Structure of Code Blocks.
                                                              (line   6)
* source code, editing:                  Editing Source Code. (line   6)
* source code, evaluating:               Evaluating Code Blocks.
                                                              (line   6)
* source code, exporting:                Exporting Code Blocks.
                                                              (line   6)
* source code, extracting:               Extracting Source Code.
                                                              (line   6)
* source code, inline:                   Structure of Code Blocks.
                                                              (line  24)
* source code, languages:                Languages.           (line   6)
* source code, library:                  Library of Babel.    (line   6)
* source code, noweb reference:          Noweb Reference Syntax.
                                                              (line   6)
* source code, results of evaluation:    Results of Evaluation.
                                                              (line   6)
* source code, working with:             Working with Source Code.
                                                              (line   6)
* sparse tree, for deadlines:            Inserting deadline/schedule.
                                                              (line  26)
* sparse tree, for TODO:                 TODO Basics.         (line  35)
* sparse tree, tag based:                Tags.                (line   6)
* sparse trees:                          Sparse Trees.        (line   6)
* special blocks, in ASCII export:       ASCII/Latin-1/UTF-8 export.
                                                              (line  84)
* special blocks, in LaTeX export:       Special blocks in LaTeX export.
                                                              (line   6)
* special keywords:                      In-buffer Settings.  (line   6)
* special symbols:                       Special Symbols.     (line   6)
* special symbols, in-buffer display:    Special Symbols.     (line  27)
* speed keys:                            Speed Keys.          (line   6)
* speedbar.el:                           Cooperation.         (line  45)
* spreadsheet capabilities:              The Spreadsheet.     (line   6)
* square brackets, around links:         External Links.      (line 136)
* startup visibility:                    Global and local cycling.
                                                              (line  36)
* STARTUP, keyword:                      Initial visibility.  (line  11)
* STARTUP, keyword <1>:                  Blocks.              (line  14)
* STARTUP, keyword <2>:                  In-buffer Settings.  (line  70)
* statistics, for checkboxes:            Checkboxes.          (line  29)
* statistics, for TODO items:            Breaking Down Tasks. (line   6)
* store-link protocol:                   The store-link protocol.
                                                              (line   6)
* storing link, in a source code buffer: Literal Examples.    (line 111)
* storing links:                         Handling Links.      (line   9)
* strike-through text, markup rules:     Emphasis and Monospace.
                                                              (line   6)
* structure editing:                     Structure Editing.   (line   6)
* structure of document:                 Document Structure.  (line   6)
* STYLE, property:                       Tracking your habits.
                                                              (line   6)
* styles, custom:                        Applying custom styles.
                                                              (line   6)
* styles, custom <1>:                    Advanced topics in ODT export.
                                                              (line  34)
* SUBAUTHOR, keyword:                    Texinfo specific export settings.
                                                              (line  14)
* SUBAUTHOR, keyword <1>:                Texinfo title and copyright page.
                                                              (line  12)
* sublevels, inclusion into tags match:  Tag Inheritance.     (line   6)
* sublevels, inclusion into TODO list:   Global TODO list.    (line  38)
* subscript:                             Subscripts and Superscripts.
                                                              (line   6)
* SUBTITLE, keyword:                     ASCII/Latin-1/UTF-8 export.
                                                              (line  46)
* SUBTITLE, keyword <1>:                 Beamer specific export settings.
                                                              (line  44)
* SUBTITLE, keyword <2>:                 HTML specific export settings.
                                                              (line  56)
* SUBTITLE, keyword <3>:                 LaTeX specific export settings.
                                                              (line  70)
* SUBTITLE, keyword <4>:                 ODT specific export settings.
                                                              (line  26)
* SUBTITLE, keyword <5>:                 Texinfo specific export settings.
                                                              (line  11)
* subtree cycling:                       Global and local cycling.
                                                              (line   6)
* subtree visibility states:             Global and local cycling.
                                                              (line   6)
* subtree, cut and paste:                Structure Editing.   (line   6)
* subtree, subtree visibility state:     Global and local cycling.
                                                              (line   6)
* subtrees, cut and paste:               Structure Editing.   (line   6)
* summary:                               Summary.             (line   6)
* SUMMARY, property:                     iCalendar Export.    (line  55)
* superscript:                           Subscripts and Superscripts.
                                                              (line   6)
* switches, in code blocks:              Structure of Code Blocks.
                                                              (line  59)
* syntax checker:                        Org Syntax.          (line  24)
* syntax, noweb:                         Noweb Reference Syntax.
                                                              (line   6)
* syntax, of formulas:                   Formula syntax for Calc.
                                                              (line   6)
* table editor, built-in:                Built-in Table Editor.
                                                              (line   6)
* table editor, table.el:                Cooperation.         (line  53)
* table indirection:                     References.          (line 148)
* table lookup functions:                Lookup functions.    (line   6)
* table of contents:                     Table of Contents.   (line   6)
* table of contents, exclude entries:    Table of Contents.   (line  15)
* table syntax:                          Built-in Table Editor.
                                                              (line   6)
* table-type, Texinfo attribute:         Plain lists in Texinfo export.
                                                              (line  19)
* table.el:                              Cooperation.         (line  53)
* tables:                                Tables.              (line   6)
* tables, in HTML:                       Tables in HTML export.
                                                              (line   6)
* tables, in LaTeX export:               Tables in LaTeX export.
                                                              (line   6)
* tables, in ODT export:                 Tables in ODT export.
                                                              (line   6)
* tables, in ODT export <1>:             Advanced topics in ODT export.
                                                              (line 151)
* tables, in other modes:                Tables in Arbitrary Syntax.
                                                              (line   6)
* tag completion:                        Completion.          (line   6)
* tag filtering, in agenda:              Filtering/limiting agenda items.
                                                              (line  20)
* tag inheritance:                       Tag Inheritance.     (line   6)
* tag searches:                          Tag Searches.        (line   6)
* tags:                                  Tags.                (line   6)
* tags hierarchy:                        Tag Hierarchy.       (line   6)
* tags view:                             Matching tags and properties.
                                                              (line   6)
* tags, as an agenda view:               Storing searches.    (line  11)
* tags, groups:                          Tag Hierarchy.       (line   6)
* TAGS, keyword:                         Setting Tags.        (line  22)
* TAGS, keyword <1>:                     In-buffer Settings.  (line 191)
* tags, setting:                         Setting Tags.        (line   6)
* TAGS, special property:                Special Properties.  (line  13)
* tags-todo:                             Storing searches.    (line  11)
* tags-tree:                             Storing searches.    (line  11)
* tangle, header argument:               Extracting Source Code.
                                                              (line  23)
* tangle-mode, header argument:          Extracting Source Code.
                                                              (line  89)
* tangling:                              Extracting Source Code.
                                                              (line   6)
* targets, for links:                    Internal Links.      (line  17)
* targets, radio:                        Radio Targets.       (line   6)
* tasks, breaking down:                  Breaking Down Tasks. (line   6)
* tasks, repeated:                       Repeated tasks.      (line   6)
* TBLFM keywords, multiple:              Editing and debugging formulas.
                                                              (line  98)
* TBLFM, keyword:                        Field and range formulas.
                                                              (line  12)
* TBLFM, switching:                      Editing and debugging formulas.
                                                              (line  98)
* template expansion:                    Structure Templates. (line  21)
* template insertion:                    Structure Templates. (line   6)
* template, custom:                      Applying custom styles.
                                                              (line   6)
* template, custom <1>:                  Advanced topics in ODT export.
                                                              (line  34)
* templates, for Capture:                Capture templates.   (line   6)
* Tempo:                                 Structure Templates. (line  21)
* TeX interpretation:                    Embedded LaTeX.      (line   6)
* TeX symbol completion:                 Completion.          (line   6)
* TEXINFO, keyword:                      Quoting Texinfo code.
                                                              (line   9)
* TEXINFO_CLASS, keyword:                Texinfo specific export settings.
                                                              (line  20)
* TEXINFO_CLASS, keyword <1>:            Texinfo file header. (line  19)
* TEXINFO_CLASS, keyword <2>:            Headings and sectioning structure.
                                                              (line   6)
* TEXINFO_DIR_CATEGORY, keyword:         Texinfo specific export settings.
                                                              (line  30)
* TEXINFO_DIR_CATEGORY, keyword <1>:     Info directory file. (line   6)
* TEXINFO_DIR_DESC, keyword:             Texinfo specific export settings.
                                                              (line  36)
* TEXINFO_DIR_DESC, keyword <1>:         Info directory file. (line   6)
* TEXINFO_DIR_TITLE, keyword:            Texinfo specific export settings.
                                                              (line  33)
* TEXINFO_DIR_TITLE, keyword <1>:        Info directory file. (line   6)
* TEXINFO_FILENAME, keyword:             Texinfo specific export settings.
                                                              (line  17)
* TEXINFO_FILENAME, keyword <1>:         Texinfo file header. (line   6)
* TEXINFO_HEADER, keyword:               Texinfo specific export settings.
                                                              (line  24)
* TEXINFO_HEADER, keyword <1>:           Texinfo file header. (line  11)
* TEXINFO_POST_HEADER, keyword:          Texinfo specific export settings.
                                                              (line  27)
* TEXINFO_PRINTED_TITLE, keyword:        Texinfo specific export settings.
                                                              (line  39)
* TEXINFO_PRINTED_TITLE, keyword <1>:    Texinfo title and copyright page.
                                                              (line   6)
* text areas, in HTML:                   Text areas in HTML export.
                                                              (line   6)
* text search:                           Search view.         (line   6)
* time clocking:                         Clocking Work Time.  (line   6)
* time format, custom:                   Custom time format.  (line   6)
* time grid:                             Time-of-day specifications.
                                                              (line  31)
* time range:                            Timestamps.          (line  49)
* time range <1>:                        Timestamps.          (line  56)
* time, computing:                       Durations and time values.
                                                              (line   6)
* time, macro:                           Macro Replacement.   (line  56)
* time, reading in minibuffer:           The date/time prompt.
                                                              (line   6)
* time-of-day specification:             Time-of-day specifications.
                                                              (line   6)
* timerange:                             Timestamps.          (line  56)
* times:                                 Dates and Times.     (line   6)
* timestamp:                             Dates and Times.     (line   6)
* timestamp <1>:                         Timestamps.          (line  14)
* timestamp, inactive:                   Timestamps.          (line  68)
* TIMESTAMP, special property:           Special Properties.  (line  13)
* timestamp, with repeater interval:     Timestamps.          (line  29)
* timestamps:                            Timestamps.          (line   6)
* TIMESTAMP_IA, special property:        Special Properties.  (line  13)
* TIMEZONE, property:                    iCalendar Export.    (line  55)
* TINDEX, keyword:                       Indices.             (line   6)
* TITLE, keyword:                        Export Settings.     (line  60)
* title, macro:                          Macro Replacement.   (line  41)
* toc, in OPTIONS keyword:               Table of Contents.   (line   6)
* TOC, keyword:                          Table of Contents.   (line  24)
* TODO dependencies:                     TODO dependencies.   (line   6)
* TODO dependencies, NOBLOCKING:         TODO dependencies.   (line  29)
* TODO items:                            TODO Items.          (line   6)
* TODO keyword matching:                 Global TODO list.    (line  18)
* TODO keyword matching, with tags search: Matching tags and properties.
                                                              (line  65)
* TODO keyword sets:                     Multiple sets in one file.
                                                              (line   6)
* TODO keywords completion:              Completion.          (line   6)
* TODO list, global:                     Global TODO list.    (line   6)
* TODO types:                            TODO types.          (line   6)
* TODO workflow:                         Workflow states.     (line   6)
* todo, as an agenda view:               Storing searches.    (line  11)
* TODO, keyword:                         Per-file keywords.   (line   6)
* TODO, keyword <1>:                     In-buffer Settings.  (line 196)
* TODO, special property:                Special Properties.  (line  13)
* todo-tree:                             Storing searches.    (line  11)
* top headline filtering, in agenda:     Filtering/limiting agenda items.
                                                              (line  20)
* Top node, in Texinfo export:           Headings and sectioning structure.
                                                              (line  37)
* transient mark mode:                   Structure Editing.   (line  46)
* translator function:                   Translator functions.
                                                              (line   6)
* trees, sparse:                         Sparse Trees.        (line   6)
* trees, visibility:                     Visibility Cycling.  (line   6)
* tty key bindings:                      TTY Keys.            (line   6)
* two-column tables, in Texinfo export:  Plain lists in Texinfo export.
                                                              (line  19)
* types as TODO keywords:                TODO types.          (line   6)
* TYP_TODO, keyword:                     Per-file keywords.   (line   6)
* TYP_TODO, keyword <1>:                 In-buffer Settings.  (line 196)
* underlined text, markup rules:         Emphasis and Monospace.
                                                              (line   6)
* undoing remote-editing events:         Agenda Commands.     (line 228)
* unison:                                Uploading Files.     (line   6)
* UNNUMBERED, property:                  Export Settings.     (line 153)
* unoconv:                               Extending ODT export.
                                                              (line  12)
* updating, table:                       Updating the table.  (line   6)
* URL links:                             External Links.      (line   6)
* Usenet links:                          External Links.      (line   6)
* using sessions in code blocks:         Environment of a Code Block.
                                                              (line 280)
* UTF-8 export:                          ASCII/Latin-1/UTF-8 export.
                                                              (line   6)
* var, header argument:                  Environment of a Code Block.
                                                              (line   9)
* variable index, in Texinfo export:     Indices.             (line   6)
* vectors, in table calculations:        Formula syntax for Calc.
                                                              (line  14)
* verbatim blocks, in LaTeX export:      Example blocks in LaTeX export.
                                                              (line   6)
* verbatim text, markup rules:           Emphasis and Monospace.
                                                              (line   6)
* verse blocks:                          Paragraphs.          (line  13)
* verse blocks, in LaTeX export:         Verse blocks in LaTeX export.
                                                              (line   6)
* view file commands in agenda:          Agenda Commands.     (line  28)
* VINDEX, keyword:                       Indices.             (line   6)
* viper.el:                              Conflicts.           (line  51)
* visibility cycling:                    Visibility Cycling.  (line   6)
* visibility cycling, drawers:           Drawers.             (line   6)
* VISIBILITY, property:                  Initial visibility.  (line  20)
* visible text, printing:                Sparse Trees.        (line  52)
* VM links:                              External Links.      (line 109)
* Wanderlust links:                      External Links.      (line 109)
* weekly agenda:                         Weekly/daily agenda. (line   6)
* windmove.el:                           Conflicts.           (line  60)
* workflow states as TODO keywords:      Workflow states.     (line   6)
* working directory, in a code block:    Environment of a Code Block.
                                                              (line 310)
* wrap, header argument:                 Results of Evaluation.
                                                              (line 222)
* xelatex:                               LaTeX/PDF export commands.
                                                              (line  25)
* yasnippet.el:                          Conflicts.           (line  74)
* zero width space:                      Escape Character.    (line   6)
* zip:                                   Pre-requisites for ODT export.
                                                              (line   6)

