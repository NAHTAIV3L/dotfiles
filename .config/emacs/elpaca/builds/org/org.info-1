This is org.info, produced by makeinfo version 7.0.3 from org.texi.

This manual is for Org version 9.7.

   Copyright © 2004–2023 Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover Texts
     being “A GNU Manual,” and with the Back-Cover Texts as in (a)
     below.  A copy of the license is included in the section entitled
     “GNU Free Documentation License.”

     (a) The FSF’s Back-Cover Text is: “You have the freedom to copy and
     modify this GNU manual.”

INFO-DIR-SECTION Emacs editing modes
START-INFO-DIR-ENTRY
* Org Mode: (org).      Outline-based notes management and organizer.
END-INFO-DIR-ENTRY


File: org.info,  Node: Top,  Next: Introduction,  Up: (dir)

The Org Manual
**************

This manual is for Org version 9.7.

   Copyright © 2004–2023 Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover Texts
     being “A GNU Manual,” and with the Back-Cover Texts as in (a)
     below.  A copy of the license is included in the section entitled
     “GNU Free Documentation License.”

     (a) The FSF’s Back-Cover Text is: “You have the freedom to copy and
     modify this GNU manual.”

* Menu:

* Introduction::                 Getting started.
* Document Structure::           A tree works like your brain.
* Tables::                       Pure magic for quick formatting.
* Hyperlinks::                   Notes in context.
* TODO Items::                   Every tree branch can be a TODO item.
* Tags::                         Tagging headlines and matching sets of tags.
* Properties and Columns::       Storing information about an entry.
* Dates and Times::              Making items useful for planning.
* Refiling and Archiving::       Moving and copying information with ease.
* Capture and Attachments::      Dealing with external data.
* Agenda Views::                 Collecting information into views.
* Markup for Rich Contents::     Compose beautiful documents.
* Exporting::                    Sharing and publishing notes.
* Publishing::                   Create a web site of linked Org files.
* Citation handling::            create, follow and export citations.
* Working with Source Code::     Export, evaluate, and tangle code blocks.
* Miscellaneous::                All the rest which did not fit elsewhere.
* Hacking::                      How to hack your way around.
* History and Acknowledgments::  How Org came into being.
* GNU Free Documentation License:: The license for this documentation.
* Main Index::                   An index of Org’s concepts and features.
* Key Index::                    Key bindings and where they are described.
* Command and Function Index::   Command names and some internal functions.
* Variable Index::               Variables mentioned in the manual.

— The Detailed Node Listing —

Introduction

* Summary::                      Brief summary of what Org does.
* Installation::                 Installing Org.
* Activation::                   How to activate Org for certain buffers.
* Feedback::                     Bug reports, ideas, patches, etc.
* Conventions::                  Typesetting conventions used in this manual.

Document Structure

* Headlines::                    How to typeset Org tree headlines.
* Visibility Cycling::           Show and hide, much simplified.
* Motion::                       Jumping to other headlines.
* Structure Editing::            Changing sequence and level of headlines.
* Sparse Trees::                 Matches embedded in context.
* Plain Lists::                  Additional structure within an entry.
* Drawers::                      Tucking stuff away.
* Blocks::                       Folding blocks.

Visibility Cycling

* Global and local cycling::     Cycling through various visibility states.
* Initial visibility::           Setting the initial visibility state.
* Catching invisible edits::     Preventing mistakes when editing invisible parts.

Tables

* Built-in Table Editor::        Simple tables.
* Column Width and Alignment::   Overrule the automatic settings.
* Column Groups::                Grouping to trigger vertical lines.
* Orgtbl Mode::                  The table editor as minor mode.
* The Spreadsheet::              The table editor has spreadsheet capabilities.
* Org Plot::                     Plotting from Org tables.

The Spreadsheet

* References::                   How to refer to another field or range.
* Formula syntax for Calc::      Using Calc to compute stuff.
* Formula syntax for Lisp::      Writing formulas in Emacs Lisp.
* Durations and time values::    How to compute durations and time values.
* Field and range formulas::     Formula for specific (ranges of) fields.
* Column formulas::              Formulas valid for an entire column.
* Lookup functions::             Lookup functions for searching tables.
* Editing and debugging formulas:: Fixing formulas.
* Updating the table::           Recomputing all dependent fields.
* Advanced features::            Field and column names, automatic recalculation...

Hyperlinks

* Link Format::                  How links in Org are formatted.
* Internal Links::               Links to other places in the current file.
* Radio Targets::                Make targets trigger links in plain text.
* External Links::               URL-like links to the world.
* Handling Links::               Creating, inserting and following.
* Using Links Outside Org::      Linking from my C source code?
* Link Abbreviations::           Shortcuts for writing complex links.
* Search Options::               Linking to a specific location.
* Custom Searches::              When the default search is not enough.

TODO Items

* TODO Basics::                  Marking and displaying TODO entries.
* TODO Extensions::              Workflow and assignments.
* Progress Logging::             Dates and notes for progress.
* Priorities::                   Some things are more important than others.
* Breaking Down Tasks::          Splitting a task into manageable pieces.
* Checkboxes::                   Tick-off lists.

TODO Extensions

* Workflow states::              From TODO to DONE in steps.
* TODO types::                   I do this, Fred does the rest.
* Multiple sets in one file::    Mixing it all, still finding your way.
* Fast access to TODO states::   Single letter selection of state.
* Per-file keywords::            Different files, different requirements.
* Faces for TODO keywords::      Highlighting states.
* TODO dependencies::            When one task needs to wait for others.

Progress Logging

* Closing items::                When was this entry marked as done?
* Tracking TODO state changes::  When did the status change?
* Tracking your habits::         How consistent have you been?

Tags

* Tag Inheritance::              Tags use the tree structure of an outline.
* Setting Tags::                 How to assign tags to a headline.
* Tag Hierarchy::                Create a hierarchy of tags.
* Tag Searches::                 Searching for combinations of tags.

Properties and Columns

* Property Syntax::              How properties are spelled out.
* Special Properties::           Access to other Org mode features.
* Property Searches::            Matching property values.
* Property Inheritance::         Passing values down a tree.
* Column View::                  Tabular viewing and editing.

Column View

* Defining columns::             The COLUMNS format property.
* Using column view::            How to create and use column view.
* Capturing column view::        A dynamic block for column view.

Defining columns

* Scope of column definitions::  Where defined, where valid?
* Column attributes::            Appearance and content of a column.

Dates and Times

* Timestamps::                   Assigning a time to a tree entry.
* Creating Timestamps::          Commands to insert timestamps.
* Deadlines and Scheduling::     Planning your work.
* Clocking Work Time::           Tracking how long you spend on a task.
* Effort Estimates::             Planning work effort in advance.
* Timers::                       Notes with a running timer.

Creating Timestamps

* The date/time prompt::         How Org mode helps you enter dates and times.
* Custom time format::           Making dates look different.

Deadlines and Scheduling

* Inserting deadline/schedule::  Planning items.
* Repeated tasks::               Items that show up again and again.

Clocking Work Time

* Clocking commands::            Starting and stopping a clock.
* The clock table::              Detailed reports.
* Resolving idle time::          Resolving time when you’ve been idle.

Refiling and Archiving

* Refile and Copy::              Moving/copying a tree from one place to another.
* Archiving::                    What to do with finished products.

Archiving

* Moving subtrees::              Moving a tree to an archive file.
* Internal archiving::           Switch off a tree but keep it in the file.

Capture and Attachments

* Capture::                      Capturing new stuff.
* Attachments::                  Attach files to outlines.
* RSS Feeds::                    Getting input from RSS feeds.

Capture

* Setting up capture::           Where notes will be stored.
* Using capture::                Commands to invoke and terminate capture.
* Capture templates::            Define the outline of different note types.

Capture templates

* Template elements::            What is needed for a complete template entry.
* Template expansion::           Filling in information about time and context.
* Templates in contexts::        Only show a template in a specific context.

Attachments

* Attachment defaults and dispatcher:: How to access attachment commands
* Attachment options::           Configuring the attachment system
* Attachment links::             Hyperlink access to attachments
* Automatic version-control with Git:: Everything safely stored away
* Attach from Dired::            Using dired to select an attachment

Agenda Views

* Agenda Files::                 Files being searched for agenda information.
* Agenda Dispatcher::            Keyboard access to agenda views.
* Built-in Agenda Views::        What is available out of the box?
* Presentation and Sorting::     How agenda items are prepared for display.
* Agenda Commands::              Remote editing of Org trees.
* Custom Agenda Views::          Defining special searches and views.
* Exporting Agenda Views::       Writing a view to a file.
* Agenda Column View::           Using column view for collected entries.

Built-in Agenda Views

* Weekly/daily agenda::          The calendar page with current tasks.
* Global TODO list::             All unfinished action items.
* Matching tags and properties:: Structured information with fine-tuned search.
* Search view::                  Find entries by searching for text.
* Stuck projects::               Find projects you need to review.

Presentation and Sorting

* Categories::                   Not all tasks are equal.
* Time-of-day specifications::   How the agenda knows the time.
* Sorting of agenda items::      The order of things.
* Filtering/limiting agenda items:: Dynamically narrow the agenda.

Custom Agenda Views

* Storing searches::             Type once, use often.
* Block agenda::                 All the stuff you need in a single buffer.
* Setting options::              Changing the rules.

Markup for Rich Contents

* Paragraphs::                   The basic unit of text.
* Emphasis and Monospace::       Bold, italic, etc.
* Subscripts and Superscripts::  Simple syntax for raising/lowering text.
* Special Symbols::              Greek letters and other symbols.
* Embedded LaTeX::            LaTeX can be freely used inside Org documents.
* Literal Examples::             Source code examples with special formatting.
* Images::                       Display an image.
* Captions::                     Describe tables, images...
* Horizontal Rules::             Make a line.
* Creating Footnotes::           Edit and read footnotes.

Embedded LaTeX

* LaTeX fragments::           Complex formulas made easy.
* Previewing LaTeX fragments:: What will this snippet look like?
* CDLaTeX mode::              Speed up entering of formulas.

Exporting

* The Export Dispatcher::        The main interface.
* Export Settings::              Common export settings.
* Table of Contents::            The if and where of the table of contents.
* Include Files::                Include additional files into a document.
* Macro Replacement::            Use macros to create templates.
* Comment Lines::                What will not be exported.
* ASCII/Latin-1/UTF-8 export::   Exporting to flat files with encoding.
* Beamer Export::                Producing presentations and slides.
* HTML Export::                  Exporting to HTML.
* LaTeX Export::              Exporting to LaTeX and processing to PDF.
* Markdown Export::              Exporting to Markdown.
* OpenDocument Text Export::     Exporting to OpenDocument Text.
* Org Export::                   Exporting to Org.
* Texinfo Export::               Exporting to Texinfo.
* iCalendar Export::             Exporting to iCalendar.
* Other Built-in Backends::      Exporting to a man page.
* Advanced Export Configuration:: Fine-tuning the export output.
* Export Region::                Author tables and lists in Org syntax.

Beamer Export

* Beamer export commands::       For creating Beamer documents.
* Beamer specific export settings:: For customizing Beamer export.
* Frames and Blocks in Beamer::  For composing Beamer slides.
* Beamer specific syntax::       For using in Org documents.
* Editing support::              Editing support.
* A Beamer example::             A complete presentation.

HTML Export

* HTML export commands::         Invoking HTML export.
* HTML specific export settings:: Settings for HTML export.
* HTML doctypes::                Exporting various (X)HTML flavors.
* HTML preamble and postamble::  Inserting preamble and postamble.
* Bare HTML::                    Exporting HTML without CSS, Javascript, etc.
* Quoting HTML tags::            Using direct HTML in Org files.
* Headlines in HTML export::     Formatting headlines.
* Links in HTML export::         Inserting and formatting links.
* Tables in HTML export::        How to modify the formatting of tables.
* Images in HTML export::        How to insert figures into HTML output.
* Math formatting in HTML export:: Beautiful math also on the web.
* Text areas in HTML export::    An alternate way to show an example.
* CSS support::                  Changing the appearance of the output.
* JavaScript support::           Info and folding in a web browser.

LaTeX Export

* LaTeX/PDF export commands:: For producing LaTeX and PDF documents.
* LaTeX specific export settings:: Unique to this LaTeX backend.
* LaTeX header and sectioning:: Setting up the export file structure.
* Quoting LaTeX code::        Incorporating literal LaTeX code.
* Tables in LaTeX export::    Options for exporting tables to LaTeX.
* Images in LaTeX export::    How to insert figures into LaTeX output.
* Plain lists in LaTeX export:: Attributes specific to lists.
* Source blocks in LaTeX export:: Attributes specific to source code blocks.
* Example blocks in LaTeX export:: Attributes specific to example blocks.
* Special blocks in LaTeX export:: Attributes specific to special blocks.
* Horizontal rules in LaTeX export:: Attributes specific to horizontal rules.
* Verse blocks in LaTeX export:: Attributes specific to special blocks.
* Quote blocks in LaTeX export:: Attributes specific to quote blocks.

OpenDocument Text Export

* Pre-requisites for ODT export:: Required packages.
* ODT export commands::          Invoking export.
* ODT specific export settings:: Configuration options.
* Extending ODT export::         Producing DOC, PDF files.
* Applying custom styles::       Styling the output.
* Links in ODT export::          Handling and formatting links.
* Tables in ODT export::         Org tables conversions.
* Images in ODT export::         Inserting images.
* Math formatting in ODT export:: Formatting LaTeX fragments.
* Labels and captions in ODT export:: Rendering objects.
* Literal examples in ODT export:: For source code and example blocks.
* Advanced topics in ODT export:: For power users.

Math formatting in ODT export

* LaTeX math snippets::       Embedding in LaTeX format.
* MathML and OpenDocument formula files:: Embedding in native format.

Texinfo Export

* Texinfo export commands::      Invoking commands.
* Texinfo specific export settings:: Setting the environment.
* Texinfo file header::          Generating the header.
* Texinfo title and copyright page:: Creating preamble pages.
* Info directory file::          Installing a manual in Info file hierarchy.
* Headings and sectioning structure:: Building document structure.
* Indices::                      Creating indices.
* Quoting Texinfo code::         Incorporating literal Texinfo code.
* Plain lists in Texinfo export:: List attributes.
* Tables in Texinfo export::     Table attributes.
* Images in Texinfo export::     Image attributes.
* Quotations in Texinfo export:: Quote block attributes.
* Key bindings in Texinfo export:: @kbd Texinfo command.
* Special blocks in Texinfo export:: Special block attributes.
* A Texinfo example::            Processing Org to Texinfo.

Publishing

* Configuration::                Defining projects.
* Uploading Files::              How to get files up on the server.
* Sample Configuration::         Example projects.
* Triggering Publication::       Publication commands.

Configuration

* Project alist::                The central configuration variable.
* Sources and destinations::     From here to there.
* Selecting files::              What files are part of the project?
* Publishing action::            Setting the function doing the publishing.
* Publishing options::           Tweaking HTML/LaTeX export.
* Publishing links::             Which links keep working after publishing?
* Site map::                     Generating a list of all pages.
* Generating an index::          An index that reaches across pages.

Sample Configuration

* Simple example::               One-component publishing.
* Complex example::              A multi-component publishing example.

Citation handling

* Citations::
* Citation export processors::
* Bibliography printing::

Bibliography printing

* Bibliography options in the ``biblatex'' and ``csl'' export processors::

Working with Source Code

* Features Overview::            Enjoy the versatility of source blocks.
* Structure of Code Blocks::     Code block syntax described.
* Using Header Arguments::       Different ways to set header arguments.
* Environment of a Code Block::  Arguments, sessions, working directory...
* Evaluating Code Blocks::       Place results of evaluation in the Org buffer.
* Results of Evaluation::        Choosing a results type, post-processing...
* Exporting Code Blocks::        Export contents and/or results.
* Extracting Source Code::       Create pure source code files.
* Languages::                    List of supported code block languages.
* Editing Source Code::          Language major-mode editing.
* Noweb Reference Syntax::       Literate programming in Org mode.
* Library of Babel::             Use and contribute to a library of useful code blocks.
* Key bindings and Useful Functions:: Work quickly with code blocks.
* Batch Execution::              Call functions from the command line.

Miscellaneous

* Completion::                   ‘M-<TAB>’ guesses completions.
* Structure Templates::          Quick insertion of structural elements.
* Speed Keys::                   Electric commands at the beginning of a headline.
* Clean View::                   Getting rid of leading stars in the outline.
* Execute commands in the active region:: Execute commands on multiple items in Org or agenda view.
* Dynamic Headline Numbering::   Display and update outline numbering.
* The Very Busy C-c C-c Key:: When in doubt, press ‘C-c C-c’.
* In-buffer Settings::           Overview of keywords.
* Regular Expressions::          Elisp regular expressions.
* Org Syntax::                   Formal description of Org’s syntax.
* Documentation Access::         Read documentation about current syntax.
* Escape Character::             Prevent Org from interpreting your writing.
* Code Evaluation Security::     Org files evaluate in-line code.
* Interaction::                  With other Emacs packages.
* TTY Keys::                     Using Org on a tty.
* Protocols::                    External access to Emacs and Org.
* Org Crypt::                    Encrypting Org files.
* Org Mobile::                   Viewing and capture on a mobile device.

Clean View

* Org Indent Mode::
* Hard indentation::

Interaction

* Cooperation::                  Packages Org cooperates with.
* Conflicts::                    Packages that lead to conflicts.

Protocols

* The store-link protocol:: Store a link, push URL to kill-ring.
* The capture protocol::  Fill a buffer with external information.
* The open-source protocol:: Edit published contents.

Org Mobile

* Setting up the staging area::  For the mobile device.
* Pushing to the mobile application:: Uploading Org files and agendas.
* Pulling from the mobile application:: Integrating captured and flagged items.

Hacking

* Hooks::                        How to reach into Org’s internals.
* Add-on Packages::              Available extensions.
* Adding Hyperlink Types::       New custom link types.
* Adding Export Backends::       How to write new export backends.
* Tables in Arbitrary Syntax::   Orgtbl for LaTeX and other programs.
* Dynamic Blocks::               Automatically filled blocks.
* Special Agenda Views::         Customized views.
* Speeding Up Your Agendas::     Tips on how to speed up your agendas.
* Extracting Agenda Information:: Post-processing agenda information.
* Using the Property API::       Writing programs that use entry properties.
* Using the Mapping API::        Mapping over all or selected entries.

Tables in Arbitrary Syntax

* Radio tables::                 Sending and receiving radio tables.
* A LaTeX example::           Step by step, almost a tutorial.
* Translator functions::         Copy and modify.



File: org.info,  Node: Introduction,  Next: Document Structure,  Prev: Top,  Up: Top

1 Introduction
**************

* Menu:

* Summary::                      Brief summary of what Org does.
* Installation::                 Installing Org.
* Activation::                   How to activate Org for certain buffers.
* Feedback::                     Bug reports, ideas, patches, etc.
* Conventions::                  Typesetting conventions used in this manual.


File: org.info,  Node: Summary,  Next: Installation,  Up: Introduction

1.1 Summary
===========

Org Mode is an authoring tool and a TODO lists manager for GNU Emacs.
It relies on a lightweight plain-text markup language used in files with
the ‘.org’ extension.

   As an authoring tool, Org helps you write structured documents and
provides exporting facilities.  Org files can also be used for literate
programming and reproducible research.  As a TODO lists manager, Org
helps you organize your tasks in a flexible way, from daily needs to
detailed project-planning, allowing logging, multiple views on your
tasks, exporting your agendas, etc.

   Org mode is implemented on top of Outline mode, which makes it
possible to keep the content of large files well structured.  Visibility
cycling and structure editing help to work with the tree.  Tables are
easily created with a built-in table editor.  Plain text URL-like links
connect to websites, emails, Usenet messages, BBDB entries, and any
files related to the projects.

   Org develops organizational tasks around notes files that contain
lists or information about projects as plain text.  Project planning and
task management make use of metadata which is part of an outline node.
Based on this data, specific entries can be extracted in queries and
create dynamic _agenda views_ that also integrate the Emacs calendar and
diary.  Org can be used to implement many different project planning
schemes, such as David Allen’s GTD system.

   Org files can serve as a single source authoring system with export
to many different formats such as HTML, LaTeX, Open Document, and
Markdown.  New export backends can be derived from existing ones, or
defined from scratch.

   Org files can include source code blocks, which makes Org uniquely
suited for authoring technical documents with code examples.  Org source
code blocks are fully functional; they can be evaluated in place and
their results can be captured in the file.  This makes it possible to
create a single file reproducible research compendium.

   Org keeps simple things simple.  When first fired up, it should feel
like a straightforward, easy to use outliner.  Complexity is not
imposed, but a large amount of functionality is available when needed.
Org is a toolbox.  Many users actually run only a—very personal—fraction
of Org’s capabilities, and know that there is more whenever they need
it.

   All of this is achieved with strictly plain text files, the most
portable and future-proof file format.  Org runs in Emacs.  Emacs is one
of the most widely ported programs, so that Org mode is available on
every major platform.

   There is a website for Org which provides links to the newest version
of Org, as well as additional information, frequently asked questions
(FAQ), links to tutorials, etc.  This page is located at
<https://orgmode.org>.

   An earlier version (7.3) of this manual was available as a paperback
book from the Network Theory Ltd.  publishing company, closed in 2009.


File: org.info,  Node: Installation,  Next: Activation,  Prev: Summary,  Up: Introduction

1.2 Installation
================

Org is included in distributions of GNU Emacs, you probably do not need
to install it.  Most users will simply activate Org and begin exploring
its features.

   If, for one reason or another, you want to install Org on top of this
pre-packaged version, you can use the Emacs package system or clone
Org’s git repository.  We *strongly recommend* sticking to a single
installation method.

   When installing Org on top of the pre-packaged version, please note
that Org stable versions are meant to be fully compatible with the last
three stable versions of Emacs but not with older Emacsen.

   Some Org components also depend on third-party packages available
through package archives.  Org is only guaranteed to be compatible with
the latest stable versions of these third-party packages.

Using Emacs packaging system
----------------------------

Recent Emacs distributions include a packaging system which lets you
install Elisp libraries.  You can install Org from the “package menu”,
with ‘M-x list-packages’.  See *note Package Menu: (emacs)Package Menu.

     Important: You need to do this in a session where no ‘.org’ file
     has been visited, i.e., where no Org built-in function have been
     loaded.  Otherwise autoload Org functions will mess up the
     installation.

Using Org’s git repository
--------------------------

You can clone Org’s repository and install Org like this:

     $ cd ~/src/
     $ git clone https://git.savannah.gnu.org/git/emacs/org-mode.git
     $ cd org-mode/
     $ make autoloads

   Note that in this case, ‘make autoloads’ is mandatory: it defines
Org’s version in ‘org-version.el’ and Org’s autoloads in
‘org-loaddefs.el’.

   Make sure you set the load path correctly in your Emacs init file:

     (add-to-list 'load-path "~/src/org-mode/lisp")

   You can also compile with ‘make’, generate the documentation with
‘make doc’, create a local configuration with ‘make config’ and install
Org with ‘make install’.  Please run ‘make help’ to get the list of
compilation/installation options.

   For more detailed explanations on Org’s build system, please check
the Org Build System page on Worg
(https://orgmode.org/worg/dev/org-build-system.html).

Installing Org’s contributed packages
-------------------------------------

Org’s repository used to contain ‘contrib/’ directory for add-ons
contributed by others.  As of Org 9.5, the directory has been moved to
the dedicated org-contrib repository
(https://git.sr.ht/~bzg/org-contrib), which you can install separately
as a package (https://elpa.nongnu.org/nongnu/org-contrib.html) from
NonGNU ELPA.

   There are enough valuable packages maintained outside of the Org
repository.  Worg has a list of org-contrib and external packages
(https://orgmode.org/worg/org-contrib/index.html), certainly it is not
exhaustive.


File: org.info,  Node: Activation,  Next: Feedback,  Prev: Installation,  Up: Introduction

1.3 Activation
==============

Org mode buffers need Font Lock to be turned on: this is the default in
Emacs(1).

   There are compatibility issues between Org mode and some other Elisp
packages (see *note Conflicts::).  Please take the time to check the
list.

   For a better experience, the three Org commands ‘org-store-link’,
‘org-capture’ and ‘org-agenda’ ought to be accessible anywhere in Emacs,
not just in Org buffers.  To that effect, you need to bind them to
globally available keys, like the ones reserved for users (see *note
(elisp)Key Binding Conventions::).  Here are suggested bindings, please
modify the keys to your own liking in your *note personal init file:
(emacs)Init File.

     (global-set-key (kbd "C-c l") #'org-store-link)
     (global-set-key (kbd "C-c a") #'org-agenda)
     (global-set-key (kbd "C-c c") #'org-capture)

   Files with the ‘.org’ extension use Org mode by default.  To turn on
Org mode in a file that does not have the extension ‘.org’, make the
first line of a file look like this:

     MY PROJECTS    -*- mode: org; -*-

which selects Org mode for this buffer no matter what the file’s name
is.  See also the variable ‘org-insert-mode-line-in-empty-file’.

   Many commands in Org work on the region if the region is _active_.
To make use of this, you need to have Transient Mark mode turned on,
which is the default.  If you do not like it, you can create an active
region by using the mouse to select a region, or pressing ‘C-<SPC>’
twice before moving point.

   ---------- Footnotes ----------

   (1) If you do not use Font Lock globally turn it on in Org buffer
with ‘(add-hook 'org-mode-hook #'turn-on-font-lock)’.


File: org.info,  Node: Feedback,  Next: Conventions,  Prev: Activation,  Up: Introduction

1.4 Feedback
============

If you find problems with Org, or if you have questions, remarks, or
ideas about it, please send an email to the Org mailing list
<emacs-orgmode@gnu.org>.  You can subscribe to the list from this web
page (https://lists.gnu.org/mailman/listinfo/emacs-orgmode).  If you are
not a member of the mailing list, your mail will be passed to the list
after a moderator has approved it(1).  We ask you to read and respect
the GNU Kind Communications Guidelines
(https://www.gnu.org/philosophy/kind-communication.html) when sending
messages on this mailing list.  Please allow up to one month for the
response and followup if no response is received on the bug report.

   For bug reports, please first try to reproduce the bug with the
latest version of Org available—if you are running an outdated version,
it is quite possible that the bug has been fixed already.  If the bug
persists, prepare a report and provide as much information as possible,
including the version information of Emacs (‘M-x emacs-version’) and Org
(‘M-x org-version’), as well as the Org related setup in the Emacs init
file.  The easiest way to do this is to use the command

     M-x org-submit-bug-report <RET>

which puts all this information into an Emacs mail buffer so that you
only need to add your description.  If you are not sending the Email
from within Emacs, please copy and paste the content into your Email
program.

   Sometimes you might face a problem due to an error in your Emacs or
Org mode setup.  Before reporting a bug, it is very helpful to start
Emacs with minimal customizations and reproduce the problem.  Doing so
often helps you determine if the problem is with your customization or
with Org mode itself.  You can start a typical minimal session with a
command like the example below.

     $ emacs -Q -l /path/to/minimal-org.el

   However if you are using Org mode as distributed with Emacs, a
minimal setup is not necessary.  In that case it is sufficient to start
Emacs as ‘emacs -Q’.  The ‘minimal-org.el’ setup file can have contents
as shown below.

     ;;; Minimal setup to load latest `org-mode'.

     ;; Activate debugging.
     (setq debug-on-error t
           debug-on-signal nil
           debug-on-quit nil)

     ;; Add latest Org mode to load path.
     (add-to-list 'load-path (expand-file-name "/path/to/org-mode/lisp"))

   If you are using Org mode version from Git repository, you can start
minimal session using make.

     # Bare Emacs
     make repro
     # or pass extra arguments
     make repro REPRO_ARGS="-l /path/to/minimal/config.el /tmp/bug.org"

   If an error occurs, a “backtrace” can be very useful—see below on how
to create one.  Often a small example file helps, along with clear
information about:

  1. What exactly did you do?
  2. What did you expect to happen?
  3. What happened instead?

   If you experience degraded performance, you can record a “profile”
and share it on the Org mailing list.  See below for the instructions
how to record a useful profile.

   Thank you for helping to improve this program.

How to create a useful backtrace
--------------------------------

If working with Org produces an error with a message you do not
understand, you may have hit a bug.  The best way to report this is by
providing, in addition to what was mentioned above, a backtrace.  This
is information from the built-in debugger about where and how the error
occurred.  Here is how to produce a useful backtrace:

  1. Reload uncompiled versions of all Org mode Lisp files.  The
     backtrace contains much more information if it is produced with
     uncompiled code.  To do this, use

          C-u M-x org-reload <RET>

     or, from the menu: Org → Refresh/Reload → Reload Org uncompiled.

  2. Then, activate the debugger:

          M-x toggle-debug-on-error <RET>

     or, from the menu: Options → Enter Debugger on Error.

  3. Do whatever you have to do to hit the error.  Do not forget to
     document the steps you take.

  4. When you hit the error, a ‘*Backtrace*’ buffer appears on the
     screen.  Save this buffer to a file—for example using ‘C-x C-w’—and
     attach it to your bug report.

How to profile Org performance
------------------------------

Sometimes, Org is becoming slow for no apparent reason.  Such slowdown
is often caused by interaction between third-party packages and Org
mode.  However, identifying the root cause is not always
straightforward.

   Emacs is able to record performance statistics, which can then be
used to find out which functions are taking most of the time to execute.
To record the statistics, one can use so-called profiler.  To use the
Emacs profiler, we recommend the following steps:

  1. Make sure that no profiler is currently active:

          M-x profiler-stop <RET>

  2. Start a new CPU profiler session:

          M-x profiler-start <RET> cpu <RET>

  3. Use Emacs as usual, performing the actions that are deemed slow.

  4. Display and examine the recorded performance statistics:

          M-x profiler-report <RET>

     This command will display a summary of the commands and functions
     that have been executed between ‘profiler-start’ and
     ‘profiler-report’ invocations, with command taking most of the time
     displayed on top.

     ‘<TAB>’ key can be used to fold and unfold lines in the profiler
     buffer.  The child items revealed upon unfolding are the functions
     and commands called by the unfolded parent.

     The root causes are often buried deep inside sub-children items in
     the profiler.  You can press ‘B’
     (‘profiler-report-render-reversed-calltree’) to quickly reveal the
     actual function/command that takes most of the time to run.

     Pressing ‘C’ ‘profiler-report-render-calltree’ will recover the
     original view.

  5. If you need further help, you can share the statistics data.

     Just save the data by issuing

          M-x profiler-report-write-profile <RET>
          /path/to/profile-file-to-be-saved <RET>

     Then, you can attached the saved file to your email to the Org
     mailing list, alongside with details about what you did to trigger
     the slowdown.

     Note that the saved statistics will only contain the function names
     and how long their execution takes.  No private data will be
     recorded.

   ---------- Footnotes ----------

   (1) Please consider subscribing to the mailing list in order to
minimize the work the mailing list moderators have to do.


File: org.info,  Node: Conventions,  Prev: Feedback,  Up: Introduction

1.5 Typesetting Conventions Used in this Manual
===============================================

TODO keywords, tags, properties, etc.
-------------------------------------

Org uses various syntactical elements: TODO keywords, tags, property
names, keywords, blocks, etc.  In this manual we use the following
conventions:

‘TODO’
‘WAITING’
     TODO keywords are written with all capitals, even if they are
     user-defined.

‘boss’
‘ARCHIVE’
     Tags are case-sensitive.  User-defined tags are usually written in
     lowercase; built-in tags with special meaning are written as they
     should appear in the document, usually with all capitals.

‘Release’
‘PRIORITY’
     User-defined properties are capitalized; built-in properties with
     special meaning are written with all capitals.

‘TITLE’
‘BEGIN’ ... ‘END’
     Keywords and blocks are written in uppercase to enhance their
     readability, but you can use lowercase in your Org files.

Key bindings and commands
-------------------------

The manual lists both the keys and the corresponding commands for
accessing a functionality.  Org mode often uses the same key for
different functions, depending on context.  The command that is bound to
such keys has a generic name, like ‘org-metaright’.  In the manual we
will, wherever possible, give the function that is internally called by
the generic command.  For example, in the chapter on document structure,
‘M-<RIGHT>’ will be listed to call ‘org-do-demote’, while in the chapter
on tables, it will be listed to call ‘org-table-move-column-right’.


File: org.info,  Node: Document Structure,  Next: Tables,  Prev: Introduction,  Up: Top

2 Document Structure
********************

Org is an outliner.  Outlines allow a document to be organized in a
hierarchical structure, which, least for me, is the best representation
of notes and thoughts.  An overview of this structure is achieved by
folding, i.e., hiding large parts of the document to show only the
general document structure and the parts currently being worked on.  Org
greatly simplifies the use of outlines by compressing the entire show
and hide functionalities into a single command, ‘org-cycle’, which is
bound to the ‘<TAB>’ key.

* Menu:

* Headlines::                    How to typeset Org tree headlines.
* Visibility Cycling::           Show and hide, much simplified.
* Motion::                       Jumping to other headlines.
* Structure Editing::            Changing sequence and level of headlines.
* Sparse Trees::                 Matches embedded in context.
* Plain Lists::                  Additional structure within an entry.
* Drawers::                      Tucking stuff away.
* Blocks::                       Folding blocks.


File: org.info,  Node: Headlines,  Next: Visibility Cycling,  Up: Document Structure

2.1 Headlines
=============

Headlines define the structure of an outline tree.  Org headlines start
on the left margin(1) with one or more stars followed by a space.  For
example:

     * Top level headline
     ** Second level
     *** Third level
         some text
     *** Third level
         more text
     * Another top level headline

   The name defined in ‘org-footnote-section’ is reserved.  Do not use
it as a title for your own headings.

   Some people find the many stars too noisy and would prefer an outline
that has whitespace followed by a single star as headline starters.
This can be achieved using an Org Indent minor mode.  See *note Clean
View:: for more information.

   Headlines are not numbered.  However, you may want to dynamically
number some, or all, of them.  See *note Dynamic Headline Numbering::.

   An empty line after the end of a subtree is considered part of it and
is hidden when the subtree is folded.  However, if you leave at least
two empty lines, one empty line remains visible after folding the
subtree, in order to structure the collapsed view.  See the variable
‘org-cycle-separator-lines’ to modify this behavior.

   ---------- Footnotes ----------

   (1) See the variables ‘org-special-ctrl-a/e’, ‘org-special-ctrl-k’,
and ‘org-ctrl-k-protect-subtree’ to configure special behavior of ‘C-a’,
‘C-e’, and ‘C-k’ in headlines.  Note also that clocking only works with
headings indented less than 30 stars.


File: org.info,  Node: Visibility Cycling,  Next: Motion,  Prev: Headlines,  Up: Document Structure

2.2 Visibility Cycling
======================

* Menu:

* Global and local cycling::     Cycling through various visibility states.
* Initial visibility::           Setting the initial visibility state.
* Catching invisible edits::     Preventing mistakes when editing invisible parts.


File: org.info,  Node: Global and local cycling,  Next: Initial visibility,  Up: Visibility Cycling

2.2.1 Global and local cycling
------------------------------

Outlines make it possible to hide parts of the text in the buffer.  Org
uses just two commands, bound to ‘<TAB>’ and ‘S-<TAB>’ to change the
visibility in the buffer.

‘<TAB>’ (‘org-cycle’)
     _Subtree cycling_: Rotate current subtree among the states

          ,-> FOLDED -> CHILDREN -> SUBTREE --.
          '-----------------------------------'

     Point must be on a headline for this to work(1).

‘S-<TAB>’ (‘org-global-cycle’)
‘C-u <TAB>’
     _Global cycling_: Rotate the entire buffer among the states

          ,-> OVERVIEW -> CONTENTS -> SHOW ALL --.
          '--------------------------------------'

     When ‘S-<TAB>’ is called with a numeric prefix argument N, view
     contents only up to headlines of level N.

     Note that inside tables (see *note Tables::), ‘S-<TAB>’ jumps to
     the previous field instead.

     You can run global cycling using ‘<TAB>’ only if point is at the
     very beginning of the buffer, but not on a headline, and
     ‘org-cycle-global-at-bob’ is set to a non-‘nil’ value.

‘C-u C-u <TAB>’ (‘org-set-startup-visibility’)
     Switch back to the startup visibility of the buffer (see *note
     Initial visibility::).

‘C-u C-u C-u <TAB>’ (‘org-show-all’)
     Show all, including drawers.

‘C-c C-r’ (‘org-reveal’)
     Reveal context around point, showing the current entry, the
     following heading and the hierarchy above.  It is useful for
     working near a location that has been exposed by a sparse tree
     command (see *note Sparse Trees::) or an agenda command (see *note
     Agenda Commands::).  With a prefix argument, show, on each level,
     all sibling headings.  With a double prefix argument, also show the
     entire subtree of the parent.

‘C-c C-k’ (‘org-show-branches’)
     Expose all the headings of the subtree, but not their bodies.

‘C-c <TAB>’ (‘org-show-children’)
     Expose all direct children of the subtree.  With a numeric prefix
     argument N, expose all children down to level N.

‘C-c C-x b’ (‘org-tree-to-indirect-buffer’)
     Show the current subtree in an indirect buffer(2).  With a numeric
     prefix argument N, go up to level N and then take that tree.  If N
     is negative then go up that many levels.  With a ‘C-u’ prefix, do
     not remove the previously used indirect buffer.

‘C-c C-x v’ (‘org-copy-visible’)
     Copy the _visible_ text in the region into the kill ring.

   ---------- Footnotes ----------

   (1) See, however, the option ‘org-cycle-emulate-tab’.

   (2) The indirect buffer contains the entire buffer, but is narrowed
to the current tree.  Editing the indirect buffer also changes the
original buffer, but without affecting visibility in that buffer.  For
more information about indirect buffers, see *note GNU Emacs Manual:
(emacs)Indirect Buffers.


File: org.info,  Node: Initial visibility,  Next: Catching invisible edits,  Prev: Global and local cycling,  Up: Visibility Cycling

2.2.2 Initial visibility
------------------------

When Emacs first visits an Org file, the global state is set to
‘showeverything’, i.e., all file content is visible(1).  This can be
configured through the variable ‘org-startup-folded’, or on a per-file
basis by adding one of the following lines anywhere in the buffer:

     #+STARTUP: overview
     #+STARTUP: content
     #+STARTUP: showall
     #+STARTUP: show2levels
     #+STARTUP: show3levels
     #+STARTUP: show4levels
     #+STARTUP: show5levels
     #+STARTUP: showeverything

   Furthermore, any entries with a ‘VISIBILITY’ property (see *note
Properties and Columns::) get their visibility adapted accordingly.
Allowed values for this property are ‘folded’, ‘children’, ‘content’,
and ‘all’.

‘C-u C-u <TAB>’ (‘org-set-startup-visibility’)
     Switch back to the startup visibility of the buffer, i.e., whatever
     is requested by startup options and ‘VISIBILITY’ properties in
     individual entries.

   ---------- Footnotes ----------

   (1) When ‘org-agenda-inhibit-startup’ is non-‘nil’, Org does not
honor the default visibility state when first opening a file for the
agenda (see *note Speeding Up Your Agendas::).


File: org.info,  Node: Catching invisible edits,  Prev: Initial visibility,  Up: Visibility Cycling

2.2.3 Catching invisible edits
------------------------------

Sometimes you may inadvertently edit an invisible part of the buffer and
be confused on what has been edited and how to undo the mistake.  By
default, Org prevents such edits for a limited set of user commands.
Users can control which commands are affected by customizing
‘org-fold-catch-invisible-edits-commands’.

   The strategy used to decide if a given edit is dangerous is
controlled by ‘org-fold-catch-invisible-edits’.  See the docstring of
this option on the available strategies.  Set the option to ‘nil’ to
disable catching invisible edits completely.


File: org.info,  Node: Motion,  Next: Structure Editing,  Prev: Visibility Cycling,  Up: Document Structure

2.3 Motion
==========

The following commands jump to other headlines in the buffer.

‘C-c C-n’ (‘org-next-visible-heading’)
     Next heading.

‘C-c C-p’ (‘org-previous-visible-heading’)
     Previous heading.

‘C-c C-f’ (‘org-forward-heading-same-level’)
     Next heading same level.

‘C-c C-b’ (‘org-backward-heading-same-level’)
     Previous heading same level.

‘C-c C-u’ (‘outline-up-heading’)
     Backward to higher level heading.

‘C-c C-j’ (‘org-goto’)
     Jump to a different place without changing the current outline
     visibility.  Shows the document structure in a temporary buffer,
     where you can use the following keys to find your destination:

     ‘<TAB>’                Cycle visibility.
     ‘<DOWN>’ / ‘<UP>’      Next/previous visible headline.
     ‘<RET>’                Select this location.
     ‘/’                    Do a Sparse-tree search

     The following keys work if you turn off ‘org-goto-auto-isearch’

     ‘n’ / ‘p’              Next/previous visible headline.
     ‘f’ / ‘b’              Next/previous headline same level.
     ‘u’                    One level up.
     ‘0’ ... ‘9’            Digit argument.
     ‘q’                    Quit.

     See also the variable ‘org-goto-interface’.


File: org.info,  Node: Structure Editing,  Next: Sparse Trees,  Prev: Motion,  Up: Document Structure

2.4 Structure Editing
=====================

‘M-<RET>’ (‘org-meta-return’)
     Insert a new heading, item or row.

     If the command is used at the _beginning_ of a line, and if there
     is a heading or a plain list item (see *note Plain Lists::) at
     point, the new heading/item is created _before_ the current line.
     When used at the beginning of a regular line of text, turn that
     line into a heading.

     When this command is used in the middle of a line, the line is
     split and the rest of the line becomes the new item or headline.
     If you do not want the line to be split, customize
     ‘org-M-RET-may-split-line’.

     Calling the command with a ‘C-u’ prefix unconditionally inserts a
     new heading at the end of the current subtree, thus preserving its
     contents.  With a double ‘C-u C-u’ prefix, the new heading is
     created at the end of the parent subtree instead.

‘C-<RET>’ (‘org-insert-heading-respect-content’)
     Insert a new heading at the end of the current subtree.

‘M-S-<RET>’ (‘org-insert-todo-heading’)
     Insert new TODO entry with same level as current heading.  See also
     the variable ‘org-treat-insert-todo-heading-as-state-change’.

‘C-S-<RET>’ (‘org-insert-todo-heading-respect-content’)
     Insert new TODO entry with same level as current heading.  Like
     ‘C-<RET>’, the new headline is inserted after the current subtree.

‘<TAB>’ (‘org-cycle’)
     In a new entry with no text yet, the first ‘<TAB>’ demotes the
     entry to become a child of the previous one.  The next ‘<TAB>’
     makes it a parent, and so on, all the way to top level.  Yet
     another ‘<TAB>’, and you are back to the initial level.

‘M-<LEFT>’ (‘org-do-promote’)
‘M-<RIGHT>’ (‘org-do-demote’)
     Promote or demote current heading by one level.

     When there is an active region—i.e., when Transient Mark mode is
     active—promotion and demotion work on all headlines in the region.
     To select a region of headlines, it is best to place both point and
     mark at the beginning of a line, mark at the beginning of the first
     headline, and point at the line just after the last headline to
     change.

‘M-S-<LEFT>’ (‘org-promote-subtree’)
     Promote the current subtree by one level.

‘M-S-<RIGHT>’ (‘org-demote-subtree’)
     Demote the current subtree by one level.

‘M-<UP>’ (‘org-move-subtree-up’)
     Move subtree up, i.e., swap with previous subtree of same level.

‘M-<DOWN>’ (‘org-move-subtree-down’)
     Move subtree down, i.e., swap with next subtree of same level.

‘C-c @’ (‘org-mark-subtree’)
     Mark the subtree at point.  Hitting repeatedly marks subsequent
     subtrees of the same level as the marked subtree.

‘C-c C-x C-w’ (‘org-cut-subtree’)
     Kill subtree, i.e., remove it from buffer but save in kill ring.
     With a numeric prefix argument N, kill N sequential subtrees.

‘C-c C-x M-w’ (‘org-copy-subtree’)
     Copy subtree to kill ring.  With a numeric prefix argument N, copy
     the N sequential subtrees.

‘C-c C-x C-y’ (‘org-paste-subtree’)
     Yank subtree from kill ring.  This does modify the level of the
     subtree to make sure the tree fits in nicely at the yank position.
     The yank level can also be specified with a numeric prefix
     argument, or by yanking after a headline marker like ‘****’.

‘C-y’ (‘org-yank’)
     Depending on the variables ‘org-yank-adjusted-subtrees’ and
     ‘org-yank-folded-subtrees’, Org’s internal ‘yank’ command pastes
     subtrees folded and in a clever way, using the same command as ‘C-c
     C-x C-y’.  With the default settings, no level adjustment takes
     place, but the yanked tree is folded unless doing so would swallow
     text previously visible.  Any prefix argument to this command
     forces a normal ‘yank’ to be executed, with the prefix passed
     along.  A good way to force a normal yank is ‘C-u C-y’.  If you use
     ‘yank-pop’ after a yank, it yanks previous kill items plainly,
     without adjustment and folding.

‘C-c C-x c’ (‘org-clone-subtree-with-time-shift’)
     Clone a subtree by making a number of sibling copies of it.  You
     are prompted for the number of copies to make, and you can also
     specify if any timestamps in the entry should be shifted.  This can
     be useful, for example, to create a number of tasks related to a
     series of lectures to prepare.  For more details, see the docstring
     of the command ‘org-clone-subtree-with-time-shift’.

‘C-c C-w’ (‘org-refile’)
     Refile entry or region to a different location.  See *note Refile
     and Copy::.

‘C-c ^’ (‘org-sort’)
     Sort same-level entries.  When there is an active region, all
     entries in the region are sorted.  Otherwise the children of the
     current headline are sorted.  The command prompts for the sorting
     method, which can be alphabetically, numerically, by time—first
     timestamp with active preferred, creation time, scheduled time,
     deadline time—by priority, by TODO keyword—in the sequence the
     keywords have been defined in the setup—or by the value of a
     property.  Reverse sorting is possible as well.  You can also
     supply your own function to extract the sorting key.  With a ‘C-u’
     prefix, sorting is case-sensitive.

‘C-x n s’ (‘org-narrow-to-subtree’)
     Narrow buffer to current subtree.

‘C-x n b’ (‘org-narrow-to-block’)
     Narrow buffer to current block.

‘C-x n w’ (‘widen’)
     Widen buffer to remove narrowing.

‘C-c *’ (‘org-toggle-heading’)
     Turn a normal line or plain list item into a headline—so that it
     becomes a subheading at its location.  Also turn a headline into a
     normal line by removing the stars.  If there is an active region,
     turn all lines in the region into headlines.  If the first line in
     the region was an item, turn only the item lines into headlines.
     Finally, if the first line is a headline, remove the stars from all
     headlines in the region.

   Note that when point is inside a table (see *note Tables::), the
Meta-Cursor keys have different functionality.


File: org.info,  Node: Sparse Trees,  Next: Plain Lists,  Prev: Structure Editing,  Up: Document Structure

2.5 Sparse Trees
================

An important feature of Org mode is the ability to construct _sparse
trees_ for selected information in an outline tree, so that the entire
document is folded as much as possible, but the selected information is
made visible along with the headline structure above it(1).  Just try it
out and you will see immediately how it works.

   Org mode contains several commands creating such trees, all these
commands can be accessed through a dispatcher:

‘C-c /’ (‘org-sparse-tree’)
     This prompts for an extra key to select a sparse-tree creating
     command.

‘C-c / r’ or ‘C-c / /’ (‘org-occur’)
     Prompts for a regexp (see *note Regular Expressions::) and shows a
     sparse tree with all matches.  If the match is in a headline, the
     headline is made visible.  If the match is in the body of an entry,
     headline and body are made visible.  In order to provide minimal
     context, also the full hierarchy of headlines above the match is
     shown, as well as the headline following the match.  Each match is
     also highlighted; the highlights disappear when the buffer is
     changed by an editing command, or by pressing ‘C-c C-c’(2).  When
     called with a ‘C-u’ prefix argument, previous highlights are kept,
     so several calls to this command can be stacked.

‘M-g n’ or ‘M-g M-n’ (‘next-error’)
     Jump to the next sparse tree match in this buffer.

‘M-g p’ or ‘M-g M-p’ (‘previous-error’)
     Jump to the previous sparse tree match in this buffer.

   For frequently used sparse trees of specific search strings, you can
use the variable ‘org-agenda-custom-commands’ to define fast keyboard
access to specific sparse trees.  These commands will then be accessible
through the agenda dispatcher (see *note Agenda Dispatcher::).  For
example:

     (setq org-agenda-custom-commands
           '(("f" occur-tree "FIXME")))

defines the key ‘f’ as a shortcut for creating a sparse tree matching
the string ‘FIXME’.

   The other sparse tree commands select headings based on TODO
keywords, tags, or properties and are discussed later in this manual.

   To print a sparse tree, you can use the Emacs command
‘ps-print-buffer-with-faces’ which does not print invisible parts of the
document.  Or you can use the command ‘C-c C-e C-v’ to export only the
visible part of the document and print the resulting file.

   ---------- Footnotes ----------

   (1) See also the variable ‘org-show-context-detail’ to decide how
much context is shown around each match.

   (2) This depends on the option ‘org-remove-highlights-with-change’.


File: org.info,  Node: Plain Lists,  Next: Drawers,  Prev: Sparse Trees,  Up: Document Structure

2.6 Plain Lists
===============

Within an entry of the outline tree, hand-formatted lists can provide
additional structure.  They also provide a way to create lists of
checkboxes (see *note Checkboxes::).  Org supports editing such lists,
and every exporter (see *note Exporting::) can parse and format them.

   Org knows ordered lists, unordered lists, and description lists.

   • _Unordered_ list items start with ‘-’, ‘+’, or ‘*’(1) as bullets.

   • _Ordered_ list items start with a numeral followed by either a
     period or a right parenthesis(2), such as ‘1.’ or ‘1)’(3) If you
     want a list to start with a different value—e.g., 20—start the text
     of the item with ‘[@20]’(4).  Those constructs can be used in any
     item of the list in order to enforce a particular numbering.

   • _Description_ list items are unordered list items, and contain the
     separator ‘::’ to distinguish the description _term_ from the
     description.

   Items belonging to the same list must have the same indentation on
the first line.  In particular, if an ordered list reaches number ‘10.’,
then the 2-digit numbers must be written left-aligned with the other
numbers in the list.  An item ends before the next line that is less or
equally indented than its bullet/number.

   A list ends whenever every item has ended, which means before any
line less or equally indented than items at top level.  It also ends
before two blank lines.  In that case, all items are closed.  Here is an
example:

     * Lord of the Rings
     My favorite scenes are (in this order)
     1. The attack of the Rohirrim
     2. Eowyn's fight with the witch king
        + this was already my favorite scene in the book
        + I really like Miranda Otto.
     3. Peter Jackson being shot by Legolas
        - on DVD only
        He makes a really funny face when it happens.
     But in the end, no individual scenes matter but the film as a whole.
     Important actors in this film are:
     - Elijah Wood :: He plays Frodo
     - Sean Astin :: He plays Sam, Frodo's friend.  I still remember him
          very well from his role as Mikey Walsh in /The Goonies/.

   Org supports these lists by tuning filling and wrapping commands to
deal with them correctly, and by exporting them properly (see *note
Exporting::).  Since indentation is what governs the structure of these
lists, many structural constructs like ‘#+BEGIN_’ blocks can be indented
to signal that they belong to a particular item.

   If you find that using a different bullet for a sub-list—than that
used for the current list-level—improves readability, customize the
variable ‘org-list-demote-modify-bullet’.  To get a greater difference
of indentation between items and theirs sub-items, customize
‘org-list-indent-offset’.

   The following commands act on items when point is in the first line
of an item—the line with the bullet or number.  Some of them imply the
application of automatic rules to keep list structure intact.  If some
of these actions get in your way, configure ‘org-list-automatic-rules’
to disable them individually.

‘<TAB>’ (‘org-cycle’)
     Items can be folded just like headline levels.  Normally this works
     only if point is on a plain list item.  For more details, see the
     variable ‘org-cycle-include-plain-lists’.  If this variable is set
     to ‘integrate’, plain list items are treated like low-level
     headlines.  The level of an item is then given by the indentation
     of the bullet/number.  Items are always subordinate to real
     headlines, however; the hierarchies remain completely separated.
     In a new item with no text yet, the first ‘<TAB>’ demotes the item
     to become a child of the previous one.  Subsequent ‘<TAB>’s move
     the item to meaningful levels in the list and eventually get it
     back to its initial position.

‘M-<RET>’ (‘org-insert-heading’)
     Insert new item at current level.  With a prefix argument, force a
     new heading (see *note Structure Editing::).  If this command is
     used in the middle of an item, that item is _split_ in two, and the
     second part becomes the new item(5).  If this command is executed
     _before item’s body_, the new item is created _before_ the current
     one.

‘M-S-<RET>’
     Insert a new item with a checkbox (see *note Checkboxes::).

‘S-<UP>’
‘S-<DOWN>’
     Jump to the previous/next item in the current list, but only if
     ‘org-support-shift-select’ is off(6).  If not, you can still use
     paragraph jumping commands like ‘C-<UP>’ and ‘C-<DOWN>’ to quite
     similar effect.

‘M-<UP>’
‘M-<DOWN>’
     Move the item including subitems up/down(7), i.e., swap with
     previous/next item of same indentation.  If the list is ordered,
     renumbering is automatic.

‘M-<LEFT>’
‘M-<RIGHT>’
     Decrease/increase the indentation of an item, leaving children
     alone.

‘M-S-<LEFT>’
‘M-S-<RIGHT>’
     Decrease/increase the indentation of the item, including subitems.
     Initially, the item tree is selected based on current indentation.
     When these commands are executed several times in direct
     succession, the initially selected region is used, even if the new
     indentation would imply a different hierarchy.  To use the new
     hierarchy, break the command chain by moving point.

     As a special case, using this command on the very first item of a
     list moves the whole list.  This behavior can be disabled by
     configuring ‘org-list-automatic-rules’.  The global indentation of
     a list has no influence on the text _after_ the list.

‘C-c C-c’
     If there is a checkbox (see *note Checkboxes::) in the item line,
     toggle the state of the checkbox.  In any case, verify bullets and
     indentation consistency in the whole list.

‘C-c -’
     Cycle the entire list level through the different itemize/enumerate
     bullets (‘-’, ‘+’, ‘*’, ‘1.’, ‘1)’) or a subset of them, depending
     on ‘org-plain-list-ordered-item-terminator’, the type of list, and
     its indentation.  With a numeric prefix argument N, select the Nth
     bullet from this list.  If there is an active region when calling
     this, all lines are converted to list items.  With a prefix
     argument, the selected text is changed into a single item.  If the
     first line already was a list item, any item marker is removed from
     the list.  Finally, even without an active region, a normal line is
     converted into a list item.

‘C-c *’
     Turn a plain list item into a headline—so that it becomes a
     subheading at its location.  See *note Structure Editing::, for a
     detailed explanation.

‘C-c C-*’
     Turn the whole plain list into a subtree of the current heading.
     Checkboxes (see *note Checkboxes::) become ‘TODO’, respectively
     ‘DONE’, keywords when unchecked, respectively checked.

‘S-<LEFT>’
‘S-<RIGHT>’
     This command also cycles bullet styles when point is in on the
     bullet or anywhere in an item line, details depending on
     ‘org-support-shift-select’.

‘C-c ^’
     Sort the plain list.  Prompt for the sorting method: numerically,
     alphabetically, by time, or by custom function.

   ---------- Footnotes ----------

   (1) When using ‘*’ as a bullet, lines must be indented so that they
are not interpreted as headlines.  Also, when you are hiding leading
stars to get a clean outline view, plain list items starting with a star
may be hard to distinguish from true headlines.  In short: even though
‘*’ is supported, it may be better to not use it for plain list items.

   (2) You can filter out any of them by configuring
‘org-plain-list-ordered-item-terminator’.

   (3) You can also get ‘a.’, ‘A.’, ‘a)’ and ‘A)’ by configuring
‘org-list-allow-alphabetical’.  To minimize confusion with normal text,
those are limited to one character only.  Beyond that limit, bullets
automatically become numbers.

   (4) If there’s a checkbox in the item, the cookie must be put
_before_ the checkbox.  If you have activated alphabetical lists, you
can also use counters like ‘[@b]’.

   (5) If you do not want the item to be split, customize the variable
‘org-M-RET-may-split-line’.

   (6) If you want to cycle around items that way, you may customize
‘org-list-use-circular-motion’.

   (7) See ‘org-list-use-circular-motion’ for a cyclic behavior.


File: org.info,  Node: Drawers,  Next: Blocks,  Prev: Plain Lists,  Up: Document Structure

2.7 Drawers
===========

Sometimes you want to keep information associated with an entry, but you
normally do not want to see it.  For this, Org mode has _drawers_.  They
can contain anything but a headline and another drawer.  Drawers look
like this:

     ** This is a headline
     Still outside the drawer
     :DRAWERNAME:
     This is inside the drawer.
     :END:
     After the drawer.

   You can interactively insert a drawer at point by calling
‘org-insert-drawer’, which is bound to ‘C-c C-x d’.  With an active
region, this command puts the region inside the drawer.  With a prefix
argument, this command calls non-interactive function
‘org-insert-property-drawer’, which creates a ‘PROPERTIES’ drawer right
below the current headline.  Org mode uses this special drawer for
storing properties (see *note Properties and Columns::).  You cannot use
it for anything else.

   Completion over drawer keywords is also possible using ‘M-<TAB>’(1).

   Visibility cycling (see *note Visibility Cycling::) on the headline
hides and shows the entry, but keep the drawer collapsed to a single
line.  In order to look inside the drawer, you need to move point to the
drawer line and press ‘<TAB>’ there.

   You can also arrange for state change notes (see *note Tracking TODO
state changes::) and clock times (see *note Clocking Work Time::) to be
stored in a ‘LOGBOOK’ drawer.  If you want to store a quick note there,
in a similar way to state changes, use

‘C-c C-z’
     Add a time-stamped note to the ‘LOGBOOK’ drawer.

   ---------- Footnotes ----------

   (1) Many desktops intercept ‘M-<TAB>’ to switch windows.  Use ‘C-M-i’
or ‘<ESC> <TAB>’ instead.


File: org.info,  Node: Blocks,  Prev: Drawers,  Up: Document Structure

2.8 Blocks
==========

Org mode uses ‘#+BEGIN’ ... ‘#+END’ blocks for various purposes from
including source code examples (see *note Literal Examples::) to
capturing time logging information (see *note Clocking Work Time::).
These blocks can be folded and unfolded by pressing ‘<TAB>’ in the
‘#+BEGIN’ line.  You can also get all blocks folded at startup by
configuring the variable ‘org-hide-block-startup’ or on a per-file basis
by using

     #+STARTUP: hideblocks
     #+STARTUP: nohideblocks


File: org.info,  Node: Tables,  Next: Hyperlinks,  Prev: Document Structure,  Up: Top

3 Tables
********

Org comes with a fast and intuitive table editor.  Spreadsheet-like
calculations are supported using the Emacs Calc package (see *note GNU
Emacs Calculator Manual: (calc)Top.).

* Menu:

* Built-in Table Editor::        Simple tables.
* Column Width and Alignment::   Overrule the automatic settings.
* Column Groups::                Grouping to trigger vertical lines.
* Orgtbl Mode::                  The table editor as minor mode.
* The Spreadsheet::              The table editor has spreadsheet capabilities.
* Org Plot::                     Plotting from Org tables.


File: org.info,  Node: Built-in Table Editor,  Next: Column Width and Alignment,  Up: Tables

3.1 Built-in Table Editor
=========================

Org makes it easy to format tables in plain ASCII.  Any line with ‘|’ as
the first non-whitespace character is considered part of a table.  ‘|’
is also the column separator(1).  Moreover, a line starting with ‘|-’ is
a horizontal rule.  It separates rows explicitly.  Rows before the first
horizontal rule are header lines.  A table might look like this:

     | Name  | Phone | Age |
     |-------+-------+-----|
     | Peter |  1234 |  17 |
     | Anna  |  4321 |  25 |

   A table is re-aligned automatically each time you press ‘<TAB>’,
‘<RET>’ or ‘C-c C-c’ inside the table.  ‘<TAB>’ also moves to the next
field—‘<RET>’ to the next row—and creates new table rows at the end of
the table or before horizontal lines.  The indentation of the table is
set by the first line.  Horizontal rules are automatically expanded on
every re-align to span the whole table width.  So, to create the above
table, you would only type

     |Name|Phone|Age|
     |-

and then press ‘<TAB>’ to align the table and start filling in fields.
Even faster would be to type ‘|Name|Phone|Age’ followed by ‘C-c <RET>’.

   When typing text into a field, Org treats ‘<DEL>’, ‘Backspace’, and
all character keys in a special way, so that inserting and deleting
avoids shifting other fields.  Also, when typing _immediately_ after
point was moved into a new field with ‘<TAB>’, ‘S-<TAB>’ or ‘<RET>’, the
field is automatically made blank.  If this behavior is too
unpredictable for you, configure the option
‘org-table-auto-blank-field’.

Creation and conversion
-----------------------

‘C-c |’ (‘org-table-create-or-convert-from-region’)
     Convert the active region to table.  If every line contains at
     least one ‘<TAB>’ character, the function assumes that the material
     is tab separated.  If every line contains a comma, comma-separated
     values (CSV) are assumed.  If not, lines are split at whitespace
     into fields.  You can use a prefix argument to force a specific
     separator: ‘C-u’ forces CSV, ‘C-u C-u’ forces ‘<TAB>’, ‘C-u C-u
     C-u’ prompts for a regular expression to match the separator, and a
     numeric argument N indicates that at least N consecutive spaces, or
     alternatively a ‘<TAB>’ will be the separator.

     If there is no active region, this command creates an empty Org
     table.  But it is easier just to start typing, like ‘| N a m e | P
     h o n e | A g e <RET> | - <TAB>’.

Re-aligning and field motion
----------------------------

‘C-c C-c’ (‘org-table-align’)
     Re-align the table without moving point.

‘<TAB>’ (‘org-table-next-field’)
     Re-align the table, move to the next field.  Creates a new row if
     necessary.

‘M-x org-table-blank-field’
     Blank the current table field or active region.

‘S-<TAB>’ (‘org-table-previous-field’)
     Re-align, move to previous field.

‘<RET>’ (‘org-table-next-row’)
     Re-align the table and move down to next row.  Creates a new row if
     necessary.  At the beginning or end of a line, ‘<RET>’ still
     inserts a new line, so it can be used to split a table.

‘M-a’ (‘org-table-beginning-of-field’)
     Move to beginning of the current table field, or on to the previous
     field.

‘M-e’ (‘org-table-end-of-field’)
     Move to end of the current table field, or on to the next field.

Column and row editing
----------------------

‘M-<LEFT>’ (‘org-table-move-column-left’)
     Move the current column left.

‘M-<RIGHT>’ (‘org-table-move-column-right’)
     Move the current column right.

‘M-S-<LEFT>’ (‘org-table-delete-column’)
     Kill the current column.

‘M-S-<RIGHT>’ (‘org-table-insert-column’)
     Insert a new column at point position.  Move the recent column and
     all cells to the right of this column to the right.

‘M-<UP>’ (‘org-table-move-row-up’)
     Move the current row up.

‘M-<DOWN>’ (‘org-table-move-row-down’)
     Move the current row down.

‘M-S-<UP>’ (‘org-table-kill-row’)
     Kill the current row or horizontal line.

‘S-<UP>’ (‘org-table-move-cell-up’)
     Move cell up by swapping with adjacent cell.

‘S-<DOWN>’ (‘org-table-move-cell-down’)
     Move cell down by swapping with adjacent cell.

‘S-<LEFT>’ (‘org-table-move-cell-left’)
     Move cell left by swapping with adjacent cell.

‘S-<RIGHT>’ (‘org-table-move-cell-right’)
     Move cell right by swapping with adjacent cell.

‘M-S-<DOWN>’ (‘org-table-insert-row’)
     Insert a new row above the current row.  With a prefix argument,
     the line is created below the current one.

‘C-c -’ (‘org-table-insert-hline’)
     Insert a horizontal line below current row.  With a prefix
     argument, the line is created above the current line.

‘C-c <RET>’ (‘org-table-hline-and-move’)
     Insert a horizontal line below current row, and move point into the
     row below that line.

‘C-c ^’ (‘org-table-sort-lines’)
     Sort the table lines in the region.  The position of point
     indicates the column to be used for sorting, and the range of lines
     is the range between the nearest horizontal separator lines, or the
     entire table.  If point is before the first column, you are
     prompted for the sorting column.  If there is an active region, the
     mark specifies the first line and the sorting column, while point
     should be in the last line to be included into the sorting.  The
     command prompts for the sorting type, alphabetically, numerically,
     or by time.  You can sort in normal or reverse order.  You can also
     supply your own key extraction and comparison functions.  When
     called with a prefix argument, alphabetic sorting is
     case-sensitive.

Regions
-------

‘C-c C-x M-w’ (‘org-table-copy-region’)
     Copy a rectangular region from a table to a special clipboard.
     Point and mark determine edge fields of the rectangle.  If there is
     no active region, copy just the current field.  The process ignores
     horizontal separator lines.

‘C-c C-x C-w’ (‘org-table-cut-region’)
     Copy a rectangular region from a table to a special clipboard, and
     blank all fields in the rectangle.  So this is the “cut” operation.

‘C-c C-x C-y’ (‘org-table-paste-rectangle’)
     Paste a rectangular region into a table.  The upper left corner
     ends up in the current field.  All involved fields are overwritten.
     If the rectangle does not fit into the present table, the table is
     enlarged as needed.  The process ignores horizontal separator
     lines.

‘M-<RET>’ (‘org-table-wrap-region’)
     Split the current field at point position and move the rest to the
     line below.  If there is an active region, and both point and mark
     are in the same column, the text in the column is wrapped to
     minimum width for the given number of lines.  A numeric prefix
     argument may be used to change the number of desired lines.  If
     there is no region, but you specify a prefix argument, the current
     field is made blank, and the content is appended to the field
     above.

Calculations
------------

‘C-c +’ (‘org-table-sum’)
     Sum the numbers in the current column, or in the rectangle defined
     by the active region.  The result is shown in the echo area and can
     be inserted with ‘C-y’.

‘S-<RET>’ (‘org-table-copy-down’)
     When current field is empty, copy from first non-empty field above.
     When not empty, copy current field down to next row and move point
     along with it.

     Depending on the variable ‘org-table-copy-increment’, integer and
     time stamp field values, and fields prefixed or suffixed with a
     whole number, can be incremented during copy.  Also, a ‘0’ prefix
     argument temporarily disables the increment.

     This key is also used by shift-selection and related modes (see
     *note Conflicts::).

Miscellaneous
-------------

‘C-c `’ (‘org-table-edit-field’)
     Edit the current field in a separate window.  This is useful for
     fields that are not fully visible (see *note Column Width and
     Alignment::).  When called with a ‘C-u’ prefix, just make the full
     field visible, so that it can be edited in place.  When called with
     two ‘C-u’ prefixes, make the editor window follow point through the
     table and always show the current field.  The follow mode exits
     automatically when point leaves the table, or when you repeat this
     command with ‘C-u C-u C-c `’.

‘M-x org-table-import’
     Import a file as a table.  The table should be TAB or whitespace
     separated.  Use, for example, to import a spreadsheet table or data
     from a database, because these programs generally can write
     TAB-separated text files.  This command works by inserting the file
     into the buffer and then converting the region to a table.  Any
     prefix argument is passed on to the converter, which uses it to
     determine the separator.

‘C-c |’ (‘org-table-create-or-convert-from-region’)
     Tables can also be imported by pasting tabular text into the Org
     buffer, selecting the pasted text with ‘C-x C-x’ and then using the
     ‘C-c |’ command (see *note Creation and conversion::).

‘M-x org-table-export’
     Export the table, by default as a TAB-separated file.  Use for data
     exchange with, for example, spreadsheet or database programs.  The
     format used to export the file can be configured in the variable
     ‘org-table-export-default-format’.  You may also use properties
     ‘TABLE_EXPORT_FILE’ and ‘TABLE_EXPORT_FORMAT’ to specify the file
     name and the format for table export in a subtree.  Org supports
     quite general formats for exported tables.  The exporter format is
     the same as the format used by Orgtbl radio tables, see *note
     Translator functions::, for a detailed description.

‘M-x org-table-header-line-mode’
     Turn on the display of the first data row of the table at point in
     the window header line when this first row is not visible anymore
     in the buffer.  You can activate this minor mode by default by
     setting the option ‘org-table-header-line-p’ to ‘t’.

‘M-x org-table-transpose-table-at-point’
     Transpose the table at point and eliminate hlines.

   ---------- Footnotes ----------

   (1) To insert a vertical bar into a table field, use ‘\vert’ or,
inside a word ‘abc\vert{}def’.


File: org.info,  Node: Column Width and Alignment,  Next: Column Groups,  Prev: Built-in Table Editor,  Up: Tables

3.2 Column Width and Alignment
==============================

The width of columns is automatically determined by the table editor.
The alignment of a column is determined automatically from the fraction
of number-like versus non-number fields in the column.

   Editing a field may modify alignment of the table.  Moving a
contiguous row or column—i.e., using ‘<TAB>’ or ‘<RET>’—automatically
re-aligns it.  If you want to disable this behavior, set
‘org-table-automatic-realign’ to ‘nil’.  In any case, you can always
align manually a table:

‘C-c C-c’ (‘org-table-align’)
     Align the current table.

   Setting the option ‘org-startup-align-all-tables’ re-aligns all
tables in a file upon visiting it.  You can also set this option on a
per-file basis with:

     #+STARTUP: align
     #+STARTUP: noalign

   Sometimes a single field or a few fields need to carry more text,
leading to inconveniently wide columns.  Maybe you want to hide away
several columns or display them with a fixed width, regardless of
content, as shown in the following example.

     |---+---------------------+--------|           |---+-------…+…|
     |   | <6>                 |        |           |   | <6>   …|…|
     | 1 | one                 | some   |   ----\   | 1 | one   …|…|
     | 2 | two                 | boring |   ----/   | 2 | two   …|…|
     | 3 | This is a long text | column |           | 3 | This i…|…|
     |---+---------------------+--------|           |---+-------…+…|

   To set the width of a column, one field anywhere in the column may
contain just the string ‘<N>’ where N specifies the width as a number of
characters.  You control displayed width of columns with the following
tools:

‘C-c <TAB>’ (‘org-table-toggle-column-width’)
     Shrink or expand current column.

     If a width cookie specifies a width W for the column, shrinking it
     displays the first W visible characters only.  Otherwise, the
     column is shrunk to a single character.

     When called before the first column or after the last one, ask for
     a list of column ranges to operate on.

‘C-u C-c <TAB>’ (‘org-table-shrink’)
     Shrink all columns with a column width.  Expand the others.

‘C-u C-u C-c <TAB>’ (‘org-table-expand’)
     Expand all columns.

   To see the full text of a shrunk field, hold the mouse over it: a
tool-tip window then shows the full contents of the field.
Alternatively, ‘C-h .’ (‘display-local-help’) reveals them, too.  For
convenience, any change near the shrunk part of a column expands it.

   Setting the option ‘org-startup-shrink-all-tables’ shrinks all
columns containing a width cookie in a file the moment it is visited.
You can also set this option on a per-file basis with:

     #+STARTUP: shrink

   If you would like to overrule the automatic alignment of number-rich
columns to the right and of string-rich columns to the left, you can use
‘<r>’, ‘<c>’ or ‘<l>’ in a similar fashion.  You may also combine
alignment and field width like this: ‘<r10>’.

   Lines which only contain these formatting cookies are removed
automatically upon exporting the document.


File: org.info,  Node: Column Groups,  Next: Orgtbl Mode,  Prev: Column Width and Alignment,  Up: Tables

3.3 Column Groups
=================

When Org exports tables, it does so by default without vertical lines
because that is visually more satisfying in general.  Occasionally
however, vertical lines can be useful to structure a table into groups
of columns, much like horizontal lines can do for groups of rows.  In
order to specify column groups, you can use a special row where the
first field contains only ‘/’.  The further fields can either contain
‘<’ to indicate that this column should start a group, ‘>’ to indicate
the end of a column, or ‘<>’ (no space between ‘<’ and ‘>’) to make a
column a group of its own.  Upon export, boundaries between column
groups are marked with vertical lines.  Here is an example:

     | N | N^2 | N^3 | N^4 | sqrt(n) | sqrt[4](N) |
     |---+-----+-----+-----+---------+------------|
     | / |  <  |     |  >  |       < |          > |
     | 1 |  1  |  1  |  1  |       1 |          1 |
     | 2 |  4  |  8  | 16  |  1.4142 |     1.1892 |
     | 3 |  9  | 27  | 81  |  1.7321 |     1.3161 |
     |---+-----+-----+-----+---------+------------|
     #+TBLFM: $2=$1^2::$3=$1^3::$4=$1^4::$5=sqrt($1)::$6=sqrt(sqrt(($1)))

   It is also sufficient to just insert the column group starters after
every vertical line you would like to have:

     | N | N^2 | N^3 | N^4 | sqrt(n) | sqrt[4](N) |
     |---+-----+-----+-----+---------+------------|
     | / | <   |     |     | <       |            |


File: org.info,  Node: Orgtbl Mode,  Next: The Spreadsheet,  Prev: Column Groups,  Up: Tables

3.4 The Orgtbl Minor Mode
=========================

If you like the intuitive way the Org table editor works, you might also
want to use it in other modes like Text mode or Mail mode.  The minor
mode Orgtbl mode makes this possible.  You can always toggle the mode
with ‘M-x orgtbl-mode’.  To turn it on by default, for example in
Message mode, use

     (add-hook 'message-mode-hook #'turn-on-orgtbl)

   Furthermore, with some special setup, it is possible to maintain
tables in arbitrary syntax with Orgtbl mode.  For example, it is
possible to construct LaTeX tables with the underlying ease and power of
Orgtbl mode, including spreadsheet capabilities.  For details, see *note
Tables in Arbitrary Syntax::.


File: org.info,  Node: The Spreadsheet,  Next: Org Plot,  Prev: Orgtbl Mode,  Up: Tables

3.5 The Spreadsheet
===================

The table editor makes use of the Emacs Calc package to implement
spreadsheet-like capabilities.  It can also evaluate Emacs Lisp forms to
derive fields from other fields.  While fully featured, Org’s
implementation is not identical to other spreadsheets.  For example, Org
knows the concept of a _column formula_ that will be applied to all
non-header fields in a column without having to copy the formula to each
relevant field.  There is also a formula debugger, and a formula editor
with features for highlighting fields in the table corresponding to the
references at point in the formula, moving these references by arrow
keys.

* Menu:

* References::                   How to refer to another field or range.
* Formula syntax for Calc::      Using Calc to compute stuff.
* Formula syntax for Lisp::      Writing formulas in Emacs Lisp.
* Durations and time values::    How to compute durations and time values.
* Field and range formulas::     Formula for specific (ranges of) fields.
* Column formulas::              Formulas valid for an entire column.
* Lookup functions::             Lookup functions for searching tables.
* Editing and debugging formulas:: Fixing formulas.
* Updating the table::           Recomputing all dependent fields.
* Advanced features::            Field and column names, automatic recalculation...


File: org.info,  Node: References,  Next: Formula syntax for Calc,  Up: The Spreadsheet

3.5.1 References
----------------

To compute fields in the table from other fields, formulas must
reference other fields or ranges.  In Org, fields can be referenced by
name, by absolute coordinates, and by relative coordinates.  To find out
what the coordinates of a field are, press ‘C-c ?’ in that field, or
press ‘C-c }’ to toggle the display of a grid.

Field references
................

Formulas can reference the value of another field in two ways.  Like in
any other spreadsheet, you may reference fields with a letter/number
combination like ‘B3’, meaning the second field in the third row.
However, Org prefers to use another, more general representation that
looks like this:(1)

     @ROW$COLUMN

   Column specifications can be absolute like ‘$1’, ‘$2’, ..., ‘$N’, or
relative to the current column, i.e., the column of the field which is
being computed, like ‘$+1’ or ‘$-2’.  ‘$<’ and ‘$>’ are immutable
references to the first and last column, respectively, and you can use
‘$>>>’ to indicate the third column from the right.

   The row specification only counts data lines and ignores horizontal
separator lines, or “hlines”.  Like with columns, you can use absolute
row numbers ‘@1’, ‘@2’, ..., ‘@N’, and row numbers relative to the
current row like ‘@+3’ or ‘@-1’.  ‘@<’ and ‘@>’ are immutable references
the first and last row in the table, respectively.  You may also specify
the row relative to one of the hlines: ‘@I’ refers to the first hline,
‘@II’ to the second, etc.  ‘@-I’ refers to the first such line above the
current line, ‘@+I’ to the first such line below the current line.  You
can also write ‘@III+2’ which is the second data line after the third
hline in the table.

   ‘@0’ and ‘$0’ refer to the current row and column, respectively,
i.e., to the row/column for the field being computed.  Also, if you omit
either the column or the row part of the reference, the current
row/column is implied.

   Org’s references with _unsigned_ numbers are fixed references in the
sense that if you use the same reference in the formula for two
different fields, the same field is referenced each time.  Org’s
references with _signed_ numbers are floating references because the
same reference operator can reference different fields depending on the
field being calculated by the formula.

   Here are a few examples:

‘@2$3’         2nd row, 3rd column (same as ‘C2’)
‘$5’           column 5 in the current row (same as ‘E&’)
‘@2’           current column, row 2
‘@-1$-3’       field one row up, three columns to the left
‘@-I$2’        field just under hline above current row, column 2
‘@>$5’         field in the last row, in column 5

Range references
................

You may reference a rectangular range of fields by specifying two field
references connected by two dots ‘..’.  The ends are included in the
range.  If both fields are in the current row, you may simply use
‘$2..$7’, but if at least one field is in a different row, you need to
use the general ‘@ROW$COLUMN’ format at least for the first field, i.e.,
the reference must start with ‘@’ in order to be interpreted correctly.
Examples:

‘$1..$3’       first three fields in the current row
‘$P..$Q’       range, using column names (see
               *note Advanced features::)
‘$<<<..$>>’    start in third column, continue to the last but one
‘@2$1..@4$3’   nine fields between these two fields (same as ‘A2..C4’)
‘@-1$-2..@-1’  3 fields in the row above, starting from 2 columns on
               the left
‘@I..II’       between first and second hline, short for ‘@I..@II’

Range references return a vector of values that can be fed into Calc
vector functions.  Empty fields in ranges are normally suppressed, so
that the vector contains only the non-empty fields.  For other options
with the mode switches ‘E’, ‘N’ and examples, see *note Formula syntax
for Calc::.

Field coordinates in formulas
.............................

One of the very first actions during evaluation of Calc formulas and
Lisp formulas is to substitute ‘@#’ and ‘$#’ in the formula with the row
or column number of the field where the current result will go to.  The
traditional Lisp formula equivalents are ‘org-table-current-dline’ and
‘org-table-current-column’.  Examples:

‘if(@# % 2, $#, string(""))’
     Insert column number on odd rows, set field to empty on even rows.

‘$2 = '(identity remote(FOO, @@#$1))’
     Copy text or values of each row of column 1 of the table named FOO
     into column 2 of the current table.

‘@3 = 2 * remote(FOO, @1$$#)’
     Insert the doubled value of each column of row 1 of the table named
     FOO into row 3 of the current table.

For the second and third examples, table FOO must have at least as many
rows or columns as the current table.  Note that this is inefficient(2)
for large number of rows.

Named references
................

‘$name’ is interpreted as the name of a column, parameter or constant.
Constants are defined globally through the variable
‘org-table-formula-constants’, and locally—for the file—through a line
like this example:

     #+CONSTANTS: c=299792458. pi=3.14 eps=2.4e-6

   Also, properties (see *note Properties and Columns::) can be used as
constants in table formulas: for a property ‘Xyz’ use the name
‘$PROP_Xyz’, and the property will be searched in the current outline
entry and in the hierarchy above it.  If you have the ‘constants.el’
package, it will also be used to resolve constants, including natural
constants like ‘$h’ for Planck’s constant, and units like ‘$km’ for
kilometers(3).  Column names and parameters can be specified in special
table lines.  These are described below, see *note Advanced features::.
All names must start with a letter, and further consist of letters and
numbers.

Remote references
.................

You may also reference constants, fields and ranges from a different
table, either in the current file or even in a different file.  The
syntax is

     remote(NAME,REF)

where NAME can be the name of a table in the current file as set by a
‘#+NAME:’ line before the table.  It can also be the ID of an entry,
even in a different file, and the reference then refers to the first
table in that entry.  REF is an absolute field or range reference as
described above for example ‘@3$3’ or ‘$somename’, valid in the
referenced table.

   When NAME has the format ‘@ROW$COLUMN’, it is substituted with the
name or ID found in this field of the current table.  For example
‘remote($1, @@>$2)’ ⇒ ‘remote(year_2013, @@>$1)’.  The format ‘B3’ is
not supported because it can not be distinguished from a plain table
name or ID.

   ---------- Footnotes ----------

   (1) Org understands references typed by the user as ‘B4’, but it does
not use this syntax when offering a formula for editing.  You can
customize this behavior using the variable
‘org-table-use-standard-references’.

   (2) The computation time scales as O(N^2) because table FOO is parsed
for each field to be copied.

   (3) The file ‘constants.el’ can supply the values of constants in two
different unit systems, ‘SI’ and ‘cgs’.  Which one is used depends on
the value of the variable ‘constants-unit-system’.  You can use the
‘STARTUP’ options ‘constSI’ and ‘constcgs’ to set this value for the
current buffer.


File: org.info,  Node: Formula syntax for Calc,  Next: Formula syntax for Lisp,  Prev: References,  Up: The Spreadsheet

3.5.2 Formula syntax for Calc
-----------------------------

A formula can be any algebraic expression understood by the Emacs Calc
package.  Note that Calc has the non-standard convention that ‘/’ has
lower precedence than ‘*’, so that ‘a/b*c’ is interpreted as
‘(a/(b*c))’.  Before evaluation by ‘calc-eval’ (see *note Calling Calc
from Your Lisp Programs: (calc)Calling Calc from Your Programs.),
variable substitution takes place according to the rules described
above.

   The range vectors can be directly fed into the Calc vector functions
like ‘vmean’ and ‘vsum’.

   A formula can contain an optional mode string after a semicolon.
This string consists of flags to influence Calc and other modes during
execution.  By default, Org uses the standard Calc modes (precision 12,
angular units degrees, fraction and symbolic modes off).  The display
format, however, has been changed to ‘(float 8)’ to keep tables compact.
The default settings can be configured using the variable
‘org-calc-default-modes’.

‘p20’
     Set the internal Calc calculation precision to 20 digits.

‘n3’, ‘s3’, ‘e2’, ‘f4’
     Normal, scientific, engineering or fixed format of the result of
     Calc passed back to Org.  Calc formatting is unlimited in precision
     as long as the Calc calculation precision is greater.

‘D’, ‘R’
     Degree and radian angle modes of Calc.

‘F’, ‘S’
     Fraction and symbolic modes of Calc.

‘u’
     Units simplification mode of Calc.  Calc is also a symbolic
     calculator and is capable of working with values having a unit,
     represented with numerals followed by a unit string in Org table
     cells.  This mode instructs Calc to simplify the units in the
     computed expression before returning the result.

‘T’, ‘t’, ‘U’
     Duration computations in Calc or Lisp, *note Durations and time
     values::.

‘E’
     If and how to consider empty fields.  Without ‘E’ empty fields in
     range references are suppressed so that the Calc vector or Lisp
     list contains only the non-empty fields.  With ‘E’ the empty fields
     are kept.  For empty fields in ranges or empty field references the
     value ‘nan’ (not a number) is used in Calc formulas and the empty
     string is used for Lisp formulas.  Add ‘N’ to use 0 instead for
     both formula types.  For the value of a field the mode ‘N’ has
     higher precedence than ‘E’.

‘N’
     Interpret all fields as numbers, use 0 for non-numbers.  See the
     next section to see how this is essential for computations with
     Lisp formulas.  In Calc formulas it is used only occasionally
     because there number strings are already interpreted as numbers
     without ‘N’.

‘L’
     Literal, for Lisp formulas only.  See the next section.

   Unless you use large integer numbers or high-precision calculation
and display for floating point numbers you may alternatively provide a
‘printf’ format specifier to reformat the Calc result after it has been
passed back to Org instead of letting Calc already do the formatting(1).
A few examples:

‘$1+$2’              Sum of first and second field
‘$1+$2;%.2f’         Same, format result to two decimals
‘exp($2)+exp($1)’    Math functions can be used
‘$0;%.1f’            Reformat current cell to 1 decimal
‘($3-32)*5/9’        Degrees F → C conversion
‘$c/$1/$cm’          Hz → cm conversion, using ‘constants.el’
‘tan($1);Dp3s1’      Compute in degrees, precision 3, display SCI 1
‘sin($1);Dp3%.1e’    Same, but use ‘printf’ specifier for display
‘vmean($2..$7)’      Compute column range mean, using vector function
‘vmean($2..$7);EN’   Same, but treat empty fields as 0
‘taylor($3,x=7,2)’   Taylor series of $3, at x=7, second degree

   Calc also contains a complete set of logical operations (see *note
Logical Operations: (calc)Logical Operations.).  For example

‘if($1 < 20, teen, string(""))’
     ‘"teen"’ if age ‘$1’ is less than 20, else the Org table result
     field is set to empty with the empty string.

‘if("$1" =​= "nan" || "$2" =​= "nan", string(""), $1 + $2); E f-1’
     Sum of the first two columns.  When at least one of the input
     fields is empty the Org table result field is set to empty.  ‘E’ is
     required to not convert empty fields to 0.  ‘f-1’ is an optional
     Calc format string similar to ‘%.1f’ but leaves empty results
     empty.

‘if(typeof(vmean($1..$7)) =​= 12, string(""), vmean($1..$7)); E’
     Mean value of a range unless there is any empty field.  Every field
     in the range that is empty is replaced by ‘nan’ which lets ‘vmean’
     result in ‘nan’.  Then ‘typeof =’ 12= detects the ‘nan’ from
     ‘vmean’ and the Org table result field is set to empty.  Use this
     when the sample set is expected to never have missing values.

‘if("$1..$7" =​= "[]", string(""), vmean($1..$7))’
     Mean value of a range with empty fields skipped.  Every field in
     the range that is empty is skipped.  When all fields in the range
     are empty the mean value is not defined and the Org table result
     field is set to empty.  Use this when the sample set can have a
     variable size.

‘vmean($1..$7); EN’
     To complete the example before: Mean value of a range with empty
     fields counting as samples with value 0.  Use this only when
     incomplete sample sets should be padded with 0 to the full size.

   You can add your own Calc functions defined in Emacs Lisp with
‘defmath’ and use them in formula syntax for Calc.

   ---------- Footnotes ----------

   (1) The printf reformatting is limited in precision because the value
passed to it is converted into an “integer” or “double”.  The “integer”
is limited in size by truncating the signed value to 32 bits.  The
“double” is limited in precision to 64 bits overall which leaves
approximately 16 significant decimal digits.


File: org.info,  Node: Formula syntax for Lisp,  Next: Durations and time values,  Prev: Formula syntax for Calc,  Up: The Spreadsheet

3.5.3 Emacs Lisp forms as formulas
----------------------------------

It is also possible to write a formula in Emacs Lisp.  This can be
useful for string manipulation and control structures, if Calc’s
functionality is not enough.

   A formula is evaluated as a Lisp form when it starts with a
single-quote followed by an opening parenthesis.  Cell table references
are interpolated into the Lisp form before execution.  The evaluation
should return either a string or a number.  Evaluation modes and a
‘printf’ format used to render the returned values can be specified
after a semicolon.

   By default, references are interpolated as literal Lisp strings: the
field content is replaced in the Lisp form stripped of leading and
trailing white space and surrounded in double-quotes.  For example:

     '(concat $1 $2)

concatenates the content of columns 1 and column 2.

   When the ‘N’ flag is used, all referenced elements are parsed as
numbers and interpolated as Lisp numbers, without quotes.  Fields that
cannot be parsed as numbers are interpolated as zeros.  For example:

     '(+ $1 $2);N

adds columns 1 and 2, equivalent to Calc’s ‘$1+$2’.  Ranges are inserted
as space-separated fields, so they can be embedded in list or vector
syntax.  For example:

     '(apply '+ '($1..$4));N

computes the sum of columns 1 to 4, like Calc’s ‘vsum($1..$4)’.

   When the ‘L’ flag is used, all fields are interpolated literally: the
cell content is replaced in the Lisp form stripped of leading and
trailing white space and without quotes.  If a reference is intended to
be interpreted as a string by the Lisp form, the reference operator
itself should be enclosed in double-quotes, like ‘"$3"’.  The ‘L’ flag
is useful when strings and numbers are used in the same Lisp form.  For
example:

     '(substring "$1" $2 $3);L

extracts the part of the string in column 1 between the character
positions specified in the integers in column 2 and 3 and it is easier
to read than the equivalent:

     '(substring $1 (string-to-number $2) (string-to-number $3))


File: org.info,  Node: Durations and time values,  Next: Field and range formulas,  Prev: Formula syntax for Lisp,  Up: The Spreadsheet

3.5.4 Durations and time values
-------------------------------

If you want to compute time values use the ‘T’, ‘t’, or ‘U’ flag, either
in Calc formulas or Elisp formulas:

     |  Task 1 |   Task 2 |    Total |
     |---------+----------+----------|
     |    2:12 |     1:47 | 03:59:00 |
     |    2:12 |     1:47 |    03:59 |
     | 3:02:20 | -2:07:00 |     0.92 |
     #+TBLFM: @2$3=$1+$2;T::@3$3=$1+$2;U::@4$3=$1+$2;t

   Input duration values must be of the form ‘HH:MM[:SS]’, where seconds
are optional.  With the ‘T’ flag, computed durations are displayed as
‘HH:MM:SS’ (see the first formula above).  With the ‘U’ flag, seconds
are omitted so that the result is only ‘HH:MM’ (see second formula
above).  Zero-padding of the hours field depends upon the value of the
variable ‘org-table-duration-hour-zero-padding’.

   With the ‘t’ flag, computed durations are displayed according to the
value of the option ‘org-table-duration-custom-format’, which defaults
to ‘hours’ and displays the result as a fraction of hours (see the third
formula in the example above).

   Negative duration values can be manipulated as well, and integers are
considered as seconds in addition and subtraction.


File: org.info,  Node: Field and range formulas,  Next: Column formulas,  Prev: Durations and time values,  Up: The Spreadsheet

3.5.5 Field and range formulas
------------------------------

To assign a formula to a particular field, type it directly into the
field, preceded by ‘:=’, for example ‘vsum(@II..III)’.  When you press
‘<TAB>’ or ‘<RET>’ or ‘C-c C-c’ with point still in the field, the
formula is stored as the formula for this field, evaluated, and the
current field is replaced with the result.

   Formulas are stored in a special ‘TBLFM’ keyword located directly
below the table.  If you type the equation in the fourth field of the
third data line in the table, the formula looks like ‘@3$4=$1+$2’.  When
inserting/deleting/swapping column and rows with the appropriate
commands, _absolute references_ (but not relative ones) in stored
formulas are modified in order to still reference the same field.  To
avoid this from happening, in particular in range references, anchor
ranges at the table borders (using ‘@<’, ‘@>’, ‘$<’, ‘$>’), or at hlines
using the ‘@I’ notation.  Automatic adaptation of field references does
not happen if you edit the table structure with normal editing
commands—you must fix the formulas yourself.

   Instead of typing an equation into the field, you may also use the
following command

‘C-u C-c =’ (‘org-table-eval-formula’)
     Install a new formula for the current field.  The command prompts
     for a formula with default taken from the ‘TBLFM’ keyword, applies
     it to the current field, and stores it.

   The left-hand side of a formula can also be a special expression in
order to assign the formula to a number of different fields.  There is
no keyboard shortcut to enter such range formulas.  To add them, use the
formula editor (see *note Editing and debugging formulas::) or edit the
‘TBLFM’ keyword directly.

‘$2=’
     Column formula, valid for the entire column.  This is so common
     that Org treats these formulas in a special way, see *note Column
     formulas::.

‘@3=’
     Row formula, applies to all fields in the specified row.  ‘@>=’
     means the last row.

‘@1$2..@4$3=’
     Range formula, applies to all fields in the given rectangular
     range.  This can also be used to assign a formula to some but not
     all fields in a row.

‘$NAME=’
     Named field, see *note Advanced features::.


File: org.info,  Node: Column formulas,  Next: Lookup functions,  Prev: Field and range formulas,  Up: The Spreadsheet

3.5.6 Column formulas
---------------------

When you assign a formula to a simple column reference like ‘$3=’, the
same formula is used in all fields of that column, with the following
very convenient exceptions: (i) If the table contains horizontal
separator hlines with rows above and below, everything before the first
such hline is considered part of the table _header_ and is not modified
by column formulas.  Therefore a header is mandatory when you use column
formulas and want to add hlines to group rows, like for example to
separate a total row at the bottom from the summand rows above.  (ii)
Fields that already get a value from a field/range formula are left
alone by column formulas.  These conditions make column formulas very
easy to use.

   To assign a formula to a column, type it directly into any field in
the column, preceded by an equal sign, like ‘=$1+$2’.  When you press
‘<TAB>’ or ‘<RET>’ or ‘C-c C-c’ with point still in the field, the
formula is stored as the formula for the current column, evaluated and
the current field replaced with the result.  If the field contains only
‘=’, the previously stored formula for this column is used.  For each
column, Org only remembers the most recently used formula.  In the
‘TBLFM’ keyword, column formulas look like ‘$4=$1+$2’.  The left-hand
side of a column formula can not be the name of column, it must be the
numeric column reference or ‘$>’.

   Instead of typing an equation into the field, you may also use the
following command:

‘C-c =’ (‘org-table-eval-formula’)
     Install a new formula for the current column and replace current
     field with the result of the formula.  The command prompts for a
     formula, with default taken from the ‘TBLFM’ keyword, applies it to
     the current field and stores it.  With a numeric prefix argument,
     e.g., ‘C-5 C-c =’, the command applies it to that many consecutive
     fields in the current column.


File: org.info,  Node: Lookup functions,  Next: Editing and debugging formulas,  Prev: Column formulas,  Up: The Spreadsheet

3.5.7 Lookup functions
----------------------

Org has three predefined Emacs Lisp functions for lookups in tables.

‘(org-lookup-first VAL S-LIST R-LIST &optional PREDICATE)’
     Searches for the first element S in list S-LIST for which
          (PREDICATE VAL S)
     is non-‘nil’; returns the value from the corresponding position in
     list R-LIST.  The default PREDICATE is ‘equal’.  Note that the
     parameters VAL and S are passed to PREDICATE in the same order as
     the corresponding parameters are in the call to ‘org-lookup-first’,
     where VAL precedes S-LIST.  If R-LIST is ‘nil’, the matching
     element S of S-LIST is returned.

‘(org-lookup-last VAL S-LIST R-LIST &optional PREDICATE)’
     Similar to ‘org-lookup-first’ above, but searches for the _last_
     element for which PREDICATE is non-‘nil’.

‘(org-lookup-all VAL S-LIST R-LIST &optional PREDICATE)’
     Similar to ‘org-lookup-first’, but searches for _all_ elements for
     which PREDICATE is non-‘nil’, and returns _all_ corresponding
     values.  This function can not be used by itself in a formula,
     because it returns a list of values.  However, powerful lookups can
     be built when this function is combined with other Emacs Lisp
     functions.

   If the ranges used in these functions contain empty fields, the ‘E’
mode for the formula should usually be specified: otherwise empty fields
are not included in S-LIST and/or R-LIST which can, for example, result
in an incorrect mapping from an element of S-LIST to the corresponding
element of R-LIST.

   These three functions can be used to implement associative arrays,
count matching cells, rank results, group data, etc.  For practical
examples see this tutorial on Worg
(https://orgmode.org/worg/org-tutorials/org-lookups.html).


File: org.info,  Node: Editing and debugging formulas,  Next: Updating the table,  Prev: Lookup functions,  Up: The Spreadsheet

3.5.8 Editing and debugging formulas
------------------------------------

You can edit individual formulas in the minibuffer or directly in the
field.  Org can also prepare a special buffer with all active formulas
of a table.  When offering a formula for editing, Org converts
references to the standard format (like ‘B3’ or ‘D&’) if possible.  If
you prefer to only work with the internal format (like ‘@3$2’ or ‘$4’),
configure the variable ‘org-table-use-standard-references’.

‘C-c =’ or ‘C-u C-c =’ (‘org-table-eval-formula’)
     Edit the formula associated with the current column/field in the
     minibuffer.  See *note Column formulas::, and *note Field and range
     formulas::.

‘C-u C-u C-c =’ (‘org-table-eval-formula’)
     Re-insert the active formula (either a field formula, or a column
     formula) into the current field, so that you can edit it directly
     in the field.  The advantage over editing in the minibuffer is that
     you can use the command ‘C-c ?’.

‘C-c ?’ (‘org-table-field-info’)
     While editing a formula in a table field, highlight the field(s)
     referenced by the reference at point position in the formula.

‘C-c }’ (‘org-table-toggle-coordinate-overlays’)
     Toggle the display of row and column numbers for a table, using
     overlays.  These are updated each time the table is aligned; you
     can force it with ‘C-c C-c’.

‘C-c {’ (‘org-table-toggle-formula-debugger’)
     Toggle the formula debugger on and off.  See below.

‘C-c '’ (‘org-table-edit-formulas’)
     Edit all formulas for the current table in a special buffer, where
     the formulas are displayed one per line.  If the current field has
     an active formula, point in the formula editor marks it.  While
     inside the special buffer, Org automatically highlights any field
     or range reference at point position.  You may edit, remove and add
     formulas, and use the following commands:

     ‘C-c C-c’ or ‘C-x C-s’ (‘org-table-fedit-finish’)
          Exit the formula editor and store the modified formulas.  With
          ‘C-u’ prefix, also apply the new formulas to the entire table.

     ‘C-c C-q’ (‘org-table-fedit-abort’)
          Exit the formula editor without installing changes.

     ‘C-c C-r’ (‘org-table-fedit-toggle-ref-type’)
          Toggle all references in the formula editor between standard
          (like ‘B3’) and internal (like ‘@3$2’).

     ‘<TAB>’ (‘org-table-fedit-lisp-indent’)
          Pretty-print or indent Lisp formula at point.  When in a line
          containing a Lisp formula, format the formula according to
          Emacs Lisp rules.  Another ‘<TAB>’ collapses the formula back
          again.  In the open formula, ‘<TAB>’ re-indents just like in
          Emacs Lisp mode.

     ‘M-<TAB>’ (‘lisp-complete-symbol’)
          Complete Lisp symbols, just like in Emacs Lisp mode.

     ‘S-<UP>’, ‘S-<DOWN>’, ‘S-<LEFT>’, ‘S-<RIGHT>’
          Shift the reference at point.  For example, if the reference
          is ‘B3’ and you press ‘S-<RIGHT>’, it becomes ‘C3’.  This also
          works for relative references and for hline references.

     ‘M-S-<UP>’ (‘org-table-fedit-line-up’)
          Move the test line for column formulas up in the Org buffer.

     ‘M-S-<DOWN>’ (‘org-table-fedit-line-down’)
          Move the test line for column formulas down in the Org buffer.

     ‘M-<UP>’ (‘org-table-fedit-scroll-up’)
          Scroll up the window displaying the table.

     ‘M-<DOWN>’ (‘org-table-fedit-scroll-down’)
          Scroll down the window displaying the table.

     ‘C-c }’
          Turn the coordinate grid in the table on and off.

   Making a table field blank does not remove the formula associated
with the field, because that is stored in a different line—the ‘TBLFM’
keyword line.  During the next recalculation, the field will be filled
again.  To remove a formula from a field, you have to give an empty
reply when prompted for the formula, or to edit the ‘TBLFM’ keyword.

   You may edit the ‘TBLFM’ keyword directly and re-apply the changed
equations with ‘C-c C-c’ in that line or with the normal recalculation
commands in the table.

Using multiple ‘TBLFM’ lines
............................

You may apply the formula temporarily.  This is useful when you want to
switch the formula applied to the table.  Place multiple ‘TBLFM’
keywords right after the table, and then press ‘C-c C-c’ on the formula
to apply.  Here is an example:

     | x | y |
     |---+---|
     | 1 |   |
     | 2 |   |
     #+TBLFM: $2=$1*1
     #+TBLFM: $2=$1*2

Pressing ‘C-c C-c’ in the line of ‘#+TBLFM: $2=$1*2’ yields:

     | x | y |
     |---+---|
     | 1 | 2 |
     | 2 | 4 |
     #+TBLFM: $2=$1*1
     #+TBLFM: $2=$1*2

If you recalculate this table, with ‘C-u C-c *’, for example, you get
the following result from applying only the first ‘TBLFM’ keyword.

     | x | y |
     |---+---|
     | 1 | 1 |
     | 2 | 2 |
     #+TBLFM: $2=$1*1
     #+TBLFM: $2=$1*2

Debugging formulas
..................

When the evaluation of a formula leads to an error, the field content
becomes the string ‘#ERROR’.  If you want to see what is going on during
variable substitution and calculation in order to find a bug, turn on
formula debugging in the Tbl menu and repeat the calculation, for
example by pressing ‘C-u C-u C-c = <RET>’ in a field.  Detailed
information are displayed.


File: org.info,  Node: Updating the table,  Next: Advanced features,  Prev: Editing and debugging formulas,  Up: The Spreadsheet

3.5.9 Updating the table
------------------------

Recalculation of a table is normally not automatic, but needs to be
triggered by a command.  To make recalculation at least semi-automatic,
see *note Advanced features::.

   In order to recalculate a line of a table or the entire table, use
the following commands:

‘C-c *’ (‘org-table-recalculate’)
     Recalculate the current row by first applying the stored column
     formulas from left to right, and all field/range formulas in the
     current row.

‘C-u C-c *’ or ‘C-u C-c C-c’
     Recompute the entire table, line by line.  Any lines before the
     first hline are left alone, assuming that these are part of the
     table header.

‘C-u C-u C-c *’ or ‘C-u C-u C-c C-c’ (‘org-table-iterate’)
     Iterate the table by recomputing it until no further changes occur.
     This may be necessary if some computed fields use the value of
     other fields that are computed _later_ in the calculation sequence.

‘M-x org-table-recalculate-buffer-tables’
     Recompute all tables in the current buffer.

‘M-x org-table-iterate-buffer-tables’
     Iterate all tables in the current buffer, in order to converge
     table-to-table dependencies.


File: org.info,  Node: Advanced features,  Prev: Updating the table,  Up: The Spreadsheet

3.5.10 Advanced features
------------------------

If you want the recalculation of fields to happen automatically, or if
you want to be able to assign _names_(1) to fields and columns, you need
to reserve the first column of the table for special marking characters.

‘C-#’ (‘org-table-rotate-recalc-marks’)
     Rotate the calculation mark in first column through the states ‘#’,
     ‘*’, ‘!’, ‘$’.  When there is an active region, change all marks in
     the region.

   Here is an example of a table that collects exam results of students
and makes use of these features:

     |---+---------+--------+--------+--------+-------+------|
     |   | Student | Prob 1 | Prob 2 | Prob 3 | Total | Note |
     |---+---------+--------+--------+--------+-------+------|
     | ! |         |     P1 |     P2 |     P3 |   Tot |      |
     | # | Maximum |     10 |     15 |     25 |    50 | 10.0 |
     | ^ |         |     m1 |     m2 |     m3 |    mt |      |
     |---+---------+--------+--------+--------+-------+------|
     | # | Peter   |     10 |      8 |     23 |    41 |  8.2 |
     | # | Sam     |      2 |      4 |      3 |     9 |  1.8 |
     |---+---------+--------+--------+--------+-------+------|
     |   | Average |        |        |        |  25.0 |      |
     | ^ |         |        |        |        |    at |      |
     | $ | max=50  |        |        |        |       |      |
     |---+---------+--------+--------+--------+-------+------|
     #+TBLFM: $6=vsum($P1..$P3)::$7=10*$Tot/$max;%.1f::$at=vmean(@-II..@-I);%.1f

     Important: Please note that for these special tables, recalculating
     the table with ‘C-u C-c *’ only affects rows that are marked ‘#’ or
     ‘*’, and fields that have a formula assigned to the field itself.
     The column formulas are not applied in rows with empty first field.

   The marking characters have the following meaning:

‘!’
     The fields in this line define names for the columns, so that you
     may refer to a column as ‘$Tot’ instead of ‘$6’.

‘^’
     This row defines names for the fields _above_ the row.  With such a
     definition, any formula in the table may use ‘$m1’ to refer to the
     value ‘10’.  Also, if you assign a formula to a names field, it is
     stored as ‘$name = ...’.

‘_’
     Similar to ‘^’, but defines names for the fields in the row
     _below_.

‘$’
     Fields in this row can define _parameters_ for formulas.  For
     example, if a field in a ‘$’ row contains ‘max=50’, then formulas
     in this table can refer to the value 50 using ‘$max’.  Parameters
     work exactly like constants, only that they can be defined on a
     per-table basis.

‘#’
     Fields in this row are automatically recalculated when pressing
     ‘<TAB>’ or ‘<RET>’ or ‘S-<TAB>’ in this row.  Also, this row is
     selected for a global recalculation with ‘C-u C-c *’.  Unmarked
     lines are left alone by this command.

‘*’
     Selects this line for global recalculation with ‘C-u C-c *’, but
     not for automatic recalculation.  Use this when automatic
     recalculation slows down editing too much.

‘/’
     Do not export this line.  Useful for lines that contain the
     narrowing ‘<N>’ markers or column group markers.

   Finally, just to whet your appetite for what can be done with the
fantastic Calc package, here is a table that computes the Taylor series
of degree n at location x for a couple of functions.

     |---+-------------+---+-----+--------------------------------------|
     |   | Func        | n | x   | Result                               |
     |---+-------------+---+-----+--------------------------------------|
     | # | exp(x)      | 1 | x   | 1 + x                                |
     | # | exp(x)      | 2 | x   | 1 + x + x^2 / 2                      |
     | # | exp(x)      | 3 | x   | 1 + x + x^2 / 2 + x^3 / 6            |
     | # | x^2+sqrt(x) | 2 | x=0 | x*(0.5 / 0) + x^2 (2 - 0.25 / 0) / 2 |
     | # | x^2+sqrt(x) | 2 | x=1 | 2 + 2.5 x - 2.5 + 0.875 (x - 1)^2    |
     | * | tan(x)      | 3 | x   | 0.0175 x + 1.77e-6 x^3               |
     |---+-------------+---+-----+--------------------------------------|
     #+TBLFM: $5=taylor($2,$4,$3);n3

   ---------- Footnotes ----------

   (1) Such names must start with an alphabetic character and use only
alphanumeric/underscore characters.


File: org.info,  Node: Org Plot,  Prev: The Spreadsheet,  Up: Tables

3.6 Org Plot
============

Org Plot can produce graphs of information stored in Org tables, either
graphically or in ASCII art.

Graphical plots using Gnuplot
-----------------------------

Org Plot can produce 2D and 3D graphs of information stored in Org
tables using Gnuplot (https://www.gnuplot.info/) and Gnuplot mode
(http://cars9.uchicago.edu/~ravel/software/gnuplot-mode.html).  To see
this in action, ensure that you have both Gnuplot and Gnuplot mode
installed on your system, then call ‘C-c " g’ or ‘M-x org-plot/gnuplot’
on the following table.

     #+PLOT: title:"Citas" ind:1 deps:(3) type:2d with:histograms set:"yrange [0:]"
     | Sede      | Max cites | H-index |
     |-----------+-----------+---------|
     | Chile     |    257.72 |   21.39 |
     | Leeds     |    165.77 |   19.68 |
     | Sao Paolo |     71.00 |   11.50 |
     | Stockholm |    134.19 |   14.33 |
     | Morelia   |    257.56 |   17.67 |

   Org Plot supports a range of plot types, and provides the ability to
add more.  For example, a radar plot can be generated like so:
     #+PLOT: title:"An evaluation of plaintext document formats" transpose:yes type:radar min:0 max:4
     | Format            | Fine-grained-control | Initial Effort | Syntax simplicity | Editor Support | Integrations | Ease-of-referencing | Versatility |
     |-------------------+----------------------+----------------+-------------------+----------------+--------------+---------------------+-------------|
     | Word              |                    2 |              4 |                 4 |              2 |            3 |                   2 |           2 |
     | LaTeX             |                    4 |              1 |                 1 |              3 |            2 |                   4 |           3 |
     | Org Mode          |                    4 |              2 |               3.5 |              1 |            4 |                   4 |           4 |
     | Markdown          |                    1 |              3 |                 3 |              4 |            3 |                   3 |           1 |
     | Markdown + Pandoc |                  2.5 |            2.5 |               2.5 |              3 |            3 |                   3 |           2 |

   Notice that Org Plot is smart enough to apply the table’s headers as
labels.  Further control over the labels, type, content, and appearance
of plots can be exercised through the ‘PLOT’ keyword preceding a table.
See below for a complete list of Org Plot options.  For more information
and examples see the Org Plot tutorial
(https://orgmode.org/worg/org-tutorials/org-plot.html).

Plot options
............

‘set’
     Specify any Gnuplot option to be set when graphing.

‘title’
     Specify the title of the plot.

‘ind’
     Specify which column of the table to use as the ‘x’ axis.

‘deps’
     Specify the columns to graph as a Lisp style list, surrounded by
     parentheses and separated by spaces for example ‘dep:(3 4)’ to
     graph the third and fourth columns.  Defaults to graphing all other
     columns aside from the ‘ind’ column.

transpose
     When ‘y’, ‘yes’, or ‘t’ attempt to transpose the table data before
     plotting.  Also recognizes the shorthand option ‘trans’.

‘type’
     Specify the type of the plot, by default one of ‘2d’, ‘3d’,
     ‘radar’, or ‘grid’.  Available types can be customized with
     ‘org-plot/preset-plot-types’.

‘with’
     Specify a ‘with’ option to be inserted for every column being
     plotted, e.g., ‘lines’, ‘points’, ‘boxes’, ‘impulses’.  Defaults to
     ‘lines’.

‘file’
     If you want to plot to a file, specify
     ‘"path/to/desired/output-file"’.

‘labels’
     List of labels to be used for the ‘deps’.  Defaults to the column
     headers if they exist.

‘line’
     Specify an entire line to be inserted in the Gnuplot script.

‘map’
     When plotting ‘3d’ or ‘grid’ types, set this to ‘t’ to graph a flat
     mapping rather than a ‘3d’ slope.

min
     Provides a minimum axis value that may be used by a plot type.
     Implicitly assumes the ‘y’ axis is being referred to.  Can
     explicitly provide a value for a either the ‘x’ or ‘y’ axis with
     ‘xmin’ and ‘ymin’.

max
     Provides a maximum axis value that may be used by a plot type.
     Implicitly assumes the ‘y’ axis is being referred to.  Can
     explicitly provide a value for a either the ‘x’ or ‘y’ axis with
     ‘xmax’ and ‘ymax’.

ticks
     Provides a desired number of axis ticks to display, that may be
     used by a plot type.  If none is given a plot type that requires
     ticks will use ‘org--plot/sensible-tick-num’ to try to determine a
     good value.

‘timefmt’
     Specify format of Org mode timestamps as they will be parsed by
     Gnuplot.  Defaults to ‘%Y-%m-%d-%H:%M:%S’.

‘script’
     If you want total control, you can specify a script file—place the
     file name between double-quotes—which will be used to plot.  Before
     plotting, every instance of ‘$datafile’ in the specified script
     will be replaced with the path to the generated data file.  Note:
     even if you set this option, you may still want to specify the plot
     type, as that can impact the content of the data file.

ASCII bar plots
---------------

While point is on a column, typing ‘C-c `` a’ or ‘M-x orgtbl-ascii-plot’
create a new column containing an ASCII-art bars plot.  The plot is
implemented through a regular column formula.  When the source column
changes, the bar plot may be updated by refreshing the table, for
example typing ‘C-u C-c *’.

     | Sede          | Max cites |              |
     |---------------+-----------+--------------|
     | Chile         |    257.72 | WWWWWWWWWWWW |
     | Leeds         |    165.77 | WWWWWWWh     |
     | Sao Paolo     |     71.00 | WWW;         |
     | Stockholm     |    134.19 | WWWWWW:      |
     | Morelia       |    257.56 | WWWWWWWWWWWH |
     | Rochefourchat |      0.00 |              |
     #+TBLFM: $3='(orgtbl-ascii-draw $2 0.0 257.72 12)

   The formula is an Elisp call.

 -- Function: orgtbl-ascii-draw value min max &optional width
     Draw an ASCII bar in a table.

     VALUE is the value to plot.

     MIN is the value displayed as an empty bar.  MAX is the value
     filling all the WIDTH.  Sources values outside this range are
     displayed as ‘too small’ or ‘too large’.

     WIDTH is the number of characters of the bar plot.  It defaults to
     ‘12’.


File: org.info,  Node: Hyperlinks,  Next: TODO Items,  Prev: Tables,  Up: Top

4 Hyperlinks
************

Like HTML, Org provides support for links inside a file, external links
to other files, Usenet articles, emails, and much more.

* Menu:

* Link Format::                  How links in Org are formatted.
* Internal Links::               Links to other places in the current file.
* Radio Targets::                Make targets trigger links in plain text.
* External Links::               URL-like links to the world.
* Handling Links::               Creating, inserting and following.
* Using Links Outside Org::      Linking from my C source code?
* Link Abbreviations::           Shortcuts for writing complex links.
* Search Options::               Linking to a specific location.
* Custom Searches::              When the default search is not enough.


File: org.info,  Node: Link Format,  Next: Internal Links,  Up: Hyperlinks

4.1 Link Format
===============

Org recognizes plain URIs, possibly wrapped within angle brackets(1),
and activate them as clickable links.

   The general link format, however, looks like this:

     [[LINK][DESCRIPTION]]

or alternatively

     [[LINK]]

   Some ‘\’, ‘[’ and ‘]’ characters in the LINK part need to be
“escaped”, i.e., preceded by another ‘\’ character.  More specifically,
the following characters, and only them, must be escaped:

  1. all ‘[’ and ‘]’ characters,
  2. every ‘\’ character preceding either ‘]’ or ‘[’,
  3. every ‘\’ character at the end of the link.

   Functions inserting links (see *note Handling Links::) properly
escape ambiguous characters.  You only need to bother about the rules
above when inserting directly, or yanking, a URI within square brackets.
When in doubt, you may use the function ‘org-link-escape’, which turns a
link string into its escaped form.

   Once a link in the buffer is complete, with all brackets present, Org
changes the display so that ‘DESCRIPTION’ is displayed instead of
‘[[LINK][DESCRIPTION]]’ and ‘LINK’ is displayed instead of ‘[[LINK]]’.
Links are highlighted in the ‘org-link’ face, which, by default, is an
underlined face.

   You can directly edit the visible part of a link.  This can be either
the LINK part, if there is no description, or the DESCRIPTION part
otherwise.  To also edit the invisible LINK part, use ‘C-c C-l’ with
point on the link (see *note Handling Links::).

   If you place point at the beginning or just behind the end of the
displayed text and press ‘<BS>’, you remove the—invisible—bracket at
that location(2).  This makes the link incomplete and the internals are
again displayed as plain text.  Inserting the missing bracket hides the
link internals again.  To show the internal structure of all links, use
the menu: Org → Hyperlinks → Literal links.

   ---------- Footnotes ----------

   (1) Plain URIs are recognized only for a well-defined set of schemes.
See *note External Links::.  Unlike URI syntax, they cannot contain
parenthesis or white spaces, either.  URIs within angle brackets have no
such limitation.

   (2) More accurately, the precise behavior depends on how point
arrived there—see *note Invisible Text: (elisp)Invisible Text.


File: org.info,  Node: Internal Links,  Next: Radio Targets,  Prev: Link Format,  Up: Hyperlinks

4.2 Internal Links
==================

A link that does not look like a URL—i.e., does not start with a known
scheme or a file name—refers to the current document.  You can follow it
with ‘C-c C-o’ when point is on the link, or with a mouse click (see
*note Handling Links::).

   Org provides several refinements to internal navigation within a
document.  Most notably, a construct like ‘[[#my-custom-id]]’
specifically targets the entry with the ‘CUSTOM_ID’ property set to
‘my-custom-id’.  Also, an internal link looking like ‘[[*Some section]]’
points to a headline with the name ‘Some section’(1).

   When the link does not belong to any of the cases above, Org looks
for a _dedicated target_: the same string in double angular brackets,
like ‘<<My Target>>’.

   If no dedicated target exists, the link tries to match the exact name
of an element within the buffer.  Naming is done, unsurprisingly, with
the ‘NAME’ keyword, which has to be put in the line before the element
it refers to, as in the following example

     #+NAME: My Target
     | a  | table      |
     |----+------------|
     | of | four cells |

   Ultimately, if none of the above succeeds, Org searches for a
headline that is exactly the link text but may also include a TODO
keyword and tags, or initiates a plain text search, according to the
value of ‘org-link-search-must-match-exact-headline’.

   Note that you must make sure custom IDs, dedicated targets, and names
are unique throughout the document.  Org provides a linter to assist you
in the process, if needed.  See *note Org Syntax::.

   During export, internal links are used to mark objects and assign
them a number.  Marked objects are then referenced by links pointing to
them.  In particular, links without a description appear as the number
assigned to the marked object(2).  In the following excerpt from an Org
buffer

     1. one item
     2. <<target>>another item
     Here we refer to item [[target]].

The last sentence will appear as ‘Here we refer to item 2’ when
exported.

   In non-Org files, the search looks for the words in the link text.
In the above example the search would be for ‘target’.

   Following a link pushes a mark onto Org’s own mark ring.  You can
return to the previous position with ‘C-c &’.  Using this command
several times in direct succession goes back to positions recorded
earlier.

   ---------- Footnotes ----------

   (1) To insert a link targeting a headline, in-buffer completion can
be used.  Just type a star followed by a few optional letters into the
buffer and press ‘M-<TAB>’.  All headlines in the current buffer are
offered as completions.

   (2) When targeting a ‘NAME’ keyword, the ‘CAPTION’ keyword is
mandatory in order to get proper numbering (see *note Captions::).


File: org.info,  Node: Radio Targets,  Next: External Links,  Prev: Internal Links,  Up: Hyperlinks

4.3 Radio Targets
=================

Org can automatically turn any occurrences of certain target names in
normal text into a link.  So without explicitly creating a link, the
text connects to the target radioing its position.  Radio targets are
enclosed by triple angular brackets.  For example, a target ‘<<<My
Target>>>’ causes each occurrence of ‘my target’ in normal text to
become activated as a link.  The Org file is scanned automatically for
radio targets only when the file is first loaded into Emacs.  To update
the target list during editing, press ‘C-c C-c’ with point on or at a
target.


File: org.info,  Node: External Links,  Next: Handling Links,  Prev: Radio Targets,  Up: Hyperlinks

4.4 External Links
==================

Org supports links to files, websites, Usenet and email messages, BBDB
database entries and links to both IRC conversations and their logs.
External links are URL-like locators.  They start with a short
identifying string followed by a colon.  There can be no space after the
colon.

   Here is the full set of built-in link types:

‘file’
     File links.  File name may be remote, absolute, or relative.

     Additionally, you can specify a line number, or a text search.  In
     Org files, you may link to a headline name, a custom ID, or a code
     reference instead.

     As a special case, “file” prefix may be omitted if the file name is
     complete, e.g., it starts with ‘./’, or ‘/’.

‘attachment’
     Same as file links but for files and folders attached to the
     current node (see *note Attachments::).  Attachment links are
     intended to behave exactly as file links but for files relative to
     the attachment directory.

‘bbdb’
     Link to a BBDB record, with possible regexp completion.

‘docview’
     Link to a document opened with DocView mode.  You may specify a
     page number.

‘doi’
     Link to an electronic resource, through its handle.

‘elisp’
     Execute an Elisp command upon activation.

‘gnus’, ‘rmail’, ‘mhe’
     Link to messages or folders from a given Emacs’ MUA.

‘help’
     Display documentation of a symbol in ‘*Help*’ buffer.

‘http’, ‘https’
     Web links.

‘id’
     Link to a specific headline by its ID property, in an Org file.

‘info’
     Link to an Info manual, or to a specific node.

‘irc’
     Link to an IRC channel.

‘mailto’
     Link to message composition.

‘news’
     Usenet links.

‘shell’
     Execute a shell command upon activation.

   The following table illustrates the link types above, along with
their options:

Link Type    Example
------------------------------------------------------------------------
http         ‘http://staff.science.uva.nl/c.dominik/’
https        ‘https://orgmode.org/’
doi          ‘doi:10.1000/182’
file         ‘file:/home/dominik/images/jupiter.jpg’
             ‘/home/dominik/images/jupiter.jpg’ (same as above)
             ‘file:papers/last.pdf’
             ‘./papers/last.pdf’ (same as above)
             ‘file:/ssh:me@some.where:papers/last.pdf’ (remote)
             ‘/ssh:me@some.where:papers/last.pdf’ (same as above)
             ‘file:sometextfile::NNN’ (jump to line number)
             ‘file:projects.org’
             ‘file:projects.org::some words’ (text search)(1)
             ‘file:projects.org::*task title’ (headline search)
             ‘file:projects.org::#custom-id’ (headline search)
attachment   ‘attachment:projects.org’
             ‘attachment:projects.org::some words’ (text search)
docview      ‘docview:papers/last.pdf::NNN’
id           ‘id:B7423F4D-2E8A-471B-8810-C40F074717E9’
news         ‘news:comp.emacs’
mailto       ‘mailto:adent@galaxy.net’
mhe          ‘mhe:folder’ (folder link)
             ‘mhe:folder#id’ (message link)
rmail        ‘rmail:folder’ (folder link)
             ‘rmail:folder#id’ (message link)
gnus         ‘gnus:group’ (group link)
             ‘gnus:group#id’ (article link)
bbdb         ‘bbdb:R.*Stallman’ (record with regexp)
irc          ‘irc:/irc.com/#emacs/bob’
help         ‘help:org-store-link’
info         ‘info:org#External links’
shell        ‘shell:ls *.org’
elisp        ‘elisp:(find-file "Elisp.org")’ (Elisp form to evaluate)
             ‘elisp:org-agenda’ (interactive Elisp command)

   On top of these built-in link types, additional ones are available
through the ‘org-contrib’ repository (see *note Installation::).  For
example, these links to VM or Wanderlust messages are available when you
load the corresponding libraries from the ‘org-contrib’ repository:

‘vm:folder’                              VM folder link
‘vm:folder#id’                           VM message link
‘vm://myself@some.where.org/folder#id’   VM on remote machine
‘vm-imap:account:folder’                 VM IMAP folder link
‘vm-imap:account:folder#id’              VM IMAP message link
‘wl:folder’                              Wanderlust folder link
‘wl:folder#id’                           Wanderlust message link

   For information on customizing Org to add new link types, see *note
Adding Hyperlink Types::.

   A link should be enclosed in double brackets and may contain
descriptive text to be displayed instead of the URL (see *note Link
Format::), for example:

     [[https://www.gnu.org/software/emacs/][GNU Emacs]]

   If the description is a file name or URL that points to an image,
HTML export (see *note HTML Export::) inlines the image as a clickable
button.  If there is no description at all and the link points to an
image, that image is inlined into the exported HTML file.

   Org also recognizes external links amid normal text and activates
them as links.  If spaces must be part of the link (for example in
‘bbdb:R.*Stallman’), or if you need to remove ambiguities about the end
of the link, enclose the link in square or angular brackets.

   ---------- Footnotes ----------

   (1) The actual behavior of the search depends on the value of the
variable ‘org-link-search-must-match-exact-headline’.  If its value is
‘nil’, then a fuzzy text search is done.  If it is ‘t’, then only the
exact headline is matched, ignoring spaces and statistic cookies.  If
the value is ‘query-to-create’, then an exact headline is searched; if
it is not found, then the user is queried to create it.


File: org.info,  Node: Handling Links,  Next: Using Links Outside Org,  Prev: External Links,  Up: Hyperlinks

4.5 Handling Links
==================

Org provides methods to create a link in the correct syntax, to insert
it into an Org file, and to follow the link.

   The main function is ‘org-store-link’, called with ‘M-x
org-store-link’.  Because of its importance, we suggest to bind it to a
widely available key (see *note Activation::).  It stores a link to the
current location.  The link is stored for later insertion into an Org
buffer—see below.  The kind of link that is created depends on the
current buffer:

_Org mode buffers_
     For Org files, if there is a ‘<<target>>’ at point, the link points
     to the target.  Otherwise it points to the current headline, which
     is also the description.

     If the headline has a ‘CUSTOM_ID’ property, store a link to this
     custom ID.  In addition or alternatively, depending on the value of
     ‘org-id-link-to-org-use-id’, create and/or use a globally unique
     ‘ID’ property for the link(1).  So using this command in Org
     buffers potentially creates two links: a human-readable link from
     the custom ID, and one that is globally unique and works even if
     the entry is moved from file to file.  The ‘ID’ property can be
     either a UUID (default) or a timestamp, depending on
     ‘org-id-method’.  Later, when inserting the link, you need to
     decide which one to use.

_Email/News clients: VM, Rmail, Wanderlust, MH-E, Gnus_
     Pretty much all Emacs mail clients are supported.  The link points
     to the current article, or, in some Gnus buffers, to the group.
     The description is constructed according to the variable
     ‘org-link-email-description-format’.  By default, it refers to the
     addressee and the subject.

_Web browsers: W3M and EWW_
     Here the link is the current URL, with the page title as the
     description.

_Contacts: BBDB_
     Links created in a BBDB buffer point to the current entry.

_Chat: IRC_
     For IRC links, if the variable ‘org-irc-link-to-logs’ is non-‘nil’,
     create a ‘file’ style link to the relevant point in the logs for
     the current conversation.  Otherwise store an ‘irc’ style link to
     the user/channel/server under the point.

_Other files_
     For any other file, the link points to the file, with a search
     string (see *note Search Options::) pointing to the contents of the
     current line.  If there is an active region, the selected words
     form the basis of the search string.  You can write custom Lisp
     functions to select the search string and perform the search for
     particular file types (see *note Custom Searches::).

     You can also define dedicated links to other files.  See *note
     Adding Hyperlink Types::.

_Agenda view_
     When point is in an agenda view, the created link points to the
     entry referenced by the current line.

   From an Org buffer, the following commands create, navigate or, more
generally, act on links.

‘C-c C-l’ (‘org-insert-link’)
     Insert a link(2).  This prompts for a link to be inserted into the
     buffer.  You can just type a link, using text for an internal link,
     or one of the link type prefixes mentioned in the examples above.
     The link is inserted into the buffer, along with a descriptive
     text(3).  If some text was selected at this time, it becomes the
     default description.

     _Inserting stored links_
          All links stored during the current session are part of the
          history for this prompt, so you can access them with ‘<UP>’
          and ‘<DOWN>’ (or ‘M-p’, ‘M-n’).

     _Completion support_
          Completion with ‘<TAB>’ helps you to insert valid link
          prefixes like ‘http’ or ‘ftp’, including the prefixes defined
          through link abbreviations (see *note Link Abbreviations::).
          If you press ‘<RET>’ after inserting only the prefix, Org
          offers specific completion support for some link types(4).
          For example, if you type ‘f i l e <RET>’—alternative access:
          ‘C-u C-c C-l’, see below—Org offers file name completion, and
          after ‘b b d b <RET>’ you can complete contact names.

‘C-u C-c C-l’
     When ‘C-c C-l’ is called with a ‘C-u’ prefix argument, insert a
     link to a file.  You may use file name completion to select the
     name of the file.  The path to the file is inserted relative to the
     directory of the current Org file, if the linked file is in the
     current directory or in a sub-directory of it, or if the path is
     written relative to the current directory using ‘../’.  Otherwise
     an absolute path is used, if possible with ‘~/’ for your home
     directory.  You can force an absolute path with two ‘C-u’ prefixes.

‘C-c C-l’ (with point on existing link)
     When point is on an existing link, ‘C-c C-l’ allows you to edit the
     link and description parts of the link.

‘C-c C-o’ (‘org-open-at-point’)
     Open link at point.  This launches a web browser for URL (using
     ‘browse-url-at-point’), run VM/MH-E/Wanderlust/Rmail/Gnus/BBDB for
     the corresponding links, and execute the command in a shell link.
     When point is on an internal link, this command runs the
     corresponding search.  When point is on the tags part of a
     headline, it creates the corresponding tags view (see *note
     Matching tags and properties::).  If point is on a timestamp, it
     compiles the agenda for that date.  Furthermore, it visits text and
     remote files in ‘file’ links with Emacs and select a suitable
     application for local non-text files.  Classification of files is
     based on file extension only.  See option ‘org-file-apps’.  If you
     want to override the default application and visit the file with
     Emacs, use a ‘C-u’ prefix.  If you want to avoid opening in Emacs,
     use a ‘C-u C-u’ prefix.

     If point is on a headline, but not on a link, offer all links in
     the headline and entry text.  If you want to setup the frame
     configuration for following links, customize
     ‘org-link-frame-setup’.

‘<RET>’
     When ‘org-return-follows-link’ is set, ‘<RET>’ also follows the
     link at point.

‘mouse-2’ or ‘mouse-1’
     On links, ‘mouse-1’ and ‘mouse-2’ opens the link just as ‘C-c C-o’
     does.

‘mouse-3’
     Like ‘mouse-2’, but force file links to be opened with Emacs, and
     internal links to be displayed in another window(5).

‘C-c %’ (‘org-mark-ring-push’)
     Push the current position onto the Org mark ring, to be able to
     return easily.  Commands following an internal link do this
     automatically.

‘C-c &’ (‘org-mark-ring-goto’)
     Jump back to a recorded position.  A position is recorded by the
     commands following internal links, and by ‘C-c %’.  Using this
     command several times in direct succession moves through a ring of
     previously recorded positions.

‘C-c C-x C-n’ (‘org-next-link’)
‘C-c C-x C-p’ (‘org-previous-link’)
     Move forward/backward to the next link in the buffer.  At the limit
     of the buffer, the search fails once, and then wraps around.  The
     key bindings for this are really too long; you might want to bind
     this also to ‘M-n’ and ‘M-p’.

          (with-eval-after-load 'org
            (define-key org-mode-map (kbd "M-n") #'org-next-link)
            (define-key org-mode-map (kbd "M-p") #'org-previous-link))

   ---------- Footnotes ----------

   (1) The Org Id library must first be loaded, either through
‘org-customize’, by enabling ‘id’ in ‘org-modules’, or by adding
‘(require 'org-id)’ in your Emacs init file.

   (2) Note that you do not have to use this command to insert a link.
Links in Org are plain text, and you can type or paste them straight
into the buffer.  By using this command, the links are automatically
enclosed in double brackets, and you will be asked for the optional
descriptive text.

   (3) After insertion of a stored link, the link will be removed from
the list of stored links.  To keep it in the list for later use, use a
triple ‘C-u’ prefix argument to ‘C-c C-l’, or configure the option
‘org-link-keep-stored-after-insertion’.

   (4) This works if a function has been defined in the ‘:complete’
property of a link in ‘org-link-parameters’.

   (5) See the variable ‘org-link-use-indirect-buffer-for-internals’.


File: org.info,  Node: Using Links Outside Org,  Next: Link Abbreviations,  Prev: Handling Links,  Up: Hyperlinks

4.6 Using Links Outside Org
===========================

You can insert and follow links that have Org syntax not only in Org,
but in any Emacs buffer.  For this, Org provides two functions:
‘org-insert-link-global’ and ‘org-open-at-point-global’.

   You might want to bind them to globally available keys.  See *note
Activation:: for some advice.


File: org.info,  Node: Link Abbreviations,  Next: Search Options,  Prev: Using Links Outside Org,  Up: Hyperlinks

4.7 Link Abbreviations
======================

Long URL can be cumbersome to type, and often many similar links are
needed in a document.  For this you can use link abbreviations.  An
abbreviated link looks like this

     [[linkword:tag][description]]

where the tag is optional.  The _linkword_ must be a word, starting with
a letter, followed by letters, numbers, ‘-’, and ‘_’.  Abbreviations are
resolved according to the information in the variable
‘org-link-abbrev-alist’ that relates the linkwords to replacement text.
Here is an example:

     (setq org-link-abbrev-alist
           '(("bugzilla"        . "http://10.1.2.9/bugzilla/show_bug.cgi?id=")
             ("Nu Html Checker" . "https://validator.w3.org/nu/?doc=%h")
             ("duckduckgo"      . "https://duckduckgo.com/?q=%s")
             ("omap"            . "https://nominatim.openstreetmap.org/search?q=%s&polygon=1")
             ("ads"             . "https://ui.adsabs.harvard.edu/search/q=%20author%3A\"%s\"")))

   If the replacement text contains the string ‘%s’, it is replaced with
the tag.  Using ‘%h’ instead of ‘%s’ percent-encodes the tag (see the
example above, where we need to encode the URL parameter).  Using
‘%(my-function)’ passes the tag to a custom Lisp function, and replace
it by the resulting string.

   If the replacement text do not contain any specifier, it is simply
appended to the string in order to create the link.

   Instead of a string, you may also specify a Lisp function to create
the link.  Such a function will be called with the tag as the only
argument.

   With the above setting, you could link to a specific bug with
‘[[bugzilla:129]]’, search the web for ‘OrgMode’ with
‘[[duckduckgo:OrgMode]]’, show the map location of the Free Software
Foundation ‘[[gmap:51 Franklin Street, Boston]]’ or of Carsten office
‘[[omap:Science Park 904, Amsterdam, The Netherlands]]’ and find out
what the Org author is doing besides Emacs hacking with
‘[[ads:Dominik,C]]’.

   If you need special abbreviations just for a single Org buffer, you
can define them in the file with

     #+LINK: bugzilla  https://10.1.2.9/bugzilla/show_bug.cgi?id=
     #+LINK: duckduckgo https://duckduckgo.com/?q=%s
     #+LINK: "Nu Html Checker" https://validator.w3.org/nu/?doc=%h

   The abbreviations containing spaces must be quoted.

   In-buffer completion (see *note Completion::) can be used after ‘[’
to complete link abbreviations.  You may also define a Lisp function
that implements special (e.g., completion) support for inserting such a
link with ‘C-c C-l’.  Such a function should not accept any arguments,
and should return the full link with a prefix.  You can set the link
completion function like this:

     (org-link-set-parameter "type" :complete #'some-completion-function)


File: org.info,  Node: Search Options,  Next: Custom Searches,  Prev: Link Abbreviations,  Up: Hyperlinks

4.8 Search Options in File Links
================================

File links can contain additional information to make Emacs jump to a
particular location in the file when following a link.  This can be a
line number or a search option after a double colon(1).  For example,
when the command ‘org-store-link’ creates a link (see *note Handling
Links::) to a file, it encodes the words in the current line as a search
string that can be used to find this line back later when following the
link with ‘C-c C-o’.

   Note that all search options apply for Attachment links in the same
way that they apply for File links.

   Here is the syntax of the different ways to attach a search to a file
link, together with explanations for each:

     [[file:~/code/main.c::255]]
     [[file:~/xx.org::My Target]]
     [[file:~/xx.org::*My Target]]
     [[file:~/xx.org::#my-custom-id]]
     [[file:~/xx.org::/regexp/]]
     [[attachment:main.c::255]]

‘255’
     Jump to line 255.

‘My Target’
     Search for a link target ‘<<My Target>>’, or do a text search for
     ‘my target’, similar to the search in internal links, see *note
     Internal Links::.  In HTML export (see *note HTML Export::), such a
     file link becomes a HTML reference to the corresponding named
     anchor in the linked file.

‘*My Target’
     In an Org file, restrict search to headlines.

‘#my-custom-id’
     Link to a heading with a ‘CUSTOM_ID’ property

‘/REGEXP/’
     Do a regular expression search for REGEXP (see *note Regular
     Expressions::).  This uses the Emacs command ‘occur’ to list all
     matches in a separate window.  If the target file is in Org mode,
     ‘org-occur’ is used to create a sparse tree with the matches.

   As a degenerate case, a file link with an empty file name can be used
to search the current file.  For example, ‘[[file:::find me]]’ does a
search for ‘find me’ in the current file, just as ‘[[find me]]’ would.

   ---------- Footnotes ----------

   (1) For backward compatibility, line numbers can also follow a single
colon.


File: org.info,  Node: Custom Searches,  Prev: Search Options,  Up: Hyperlinks

4.9 Custom Searches
===================

The default mechanism for creating search strings and for doing the
actual search related to a file link may not work correctly in all
cases.  For example, BibTeX database files have many entries like
‘year="1993"’ which would not result in good search strings, because the
only unique identification for a BibTeX entry is the citation key.

   If you come across such a problem, you can write custom functions to
set the right search string for a particular file type, and to do the
search for the string in the file.  Using ‘add-hook’, these functions
need to be added to the hook variables
‘org-create-file-search-functions’ and
‘org-execute-file-search-functions’.  See the docstring for these
variables for more information.  Org actually uses this mechanism for
BibTeX database files, and you can use the corresponding code as an
implementation example.  See the file ‘ol-bibtex.el’.


File: org.info,  Node: TODO Items,  Next: Tags,  Prev: Hyperlinks,  Up: Top

5 TODO Items
************

Org mode does not maintain TODO lists as separate documents(1).
Instead, TODO items are an integral part of the notes file, because TODO
items usually come up while taking notes!  With Org mode, simply mark
any entry in a tree as being a TODO item.  In this way, information is
not duplicated, and the entire context from which the TODO item emerged
is always present.

   Of course, this technique for managing TODO items scatters them
throughout your notes file.  Org mode compensates for this by providing
methods to give you an overview of all the things that you have to do.

* Menu:

* TODO Basics::                  Marking and displaying TODO entries.
* TODO Extensions::              Workflow and assignments.
* Progress Logging::             Dates and notes for progress.
* Priorities::                   Some things are more important than others.
* Breaking Down Tasks::          Splitting a task into manageable pieces.
* Checkboxes::                   Tick-off lists.

   ---------- Footnotes ----------

   (1) Of course, you can make a document that contains only long lists
of TODO items, but this is not required.


File: org.info,  Node: TODO Basics,  Next: TODO Extensions,  Up: TODO Items

5.1 Basic TODO Functionality
============================

Any headline becomes a TODO item when it starts with the word ‘TODO’,
for example:

     *** TODO Write letter to Sam Fortune

   The most important commands to work with TODO entries are:

‘C-c C-t’ (‘org-todo’)
     Rotate the TODO state of the current item among

          ,-> (unmarked) -> TODO -> DONE --.
          '--------------------------------'

     If TODO keywords have fast access keys (see *note Fast access to
     TODO states::), prompt for a TODO keyword through the fast
     selection interface; this is the default behavior when
     ‘org-use-fast-todo-selection’ is non-‘nil’.

     The same state changing can also be done “remotely” from the agenda
     buffer with the ‘t’ command key (see *note Agenda Commands::).

‘S-<RIGHT>’ ‘S-<LEFT>’
     Select the following/preceding TODO state, similar to cycling.
     Useful mostly if more than two TODO states are possible (see *note
     TODO Extensions::).  See also *note Conflicts::, for a discussion
     of the interaction with shift-selection.  See also the variable
     ‘org-treat-S-cursor-todo-selection-as-state-change’.

‘C-c / t’ (‘org-show-todo-tree’)
     View TODO items in a _sparse tree_ (see *note Sparse Trees::).
     Folds the entire buffer, but shows all TODO items—with not-DONE
     state—and the headings hierarchy above them.  With a prefix
     argument, or by using ‘C-c / T’, search for a specific TODO.  You
     are prompted for the keyword, and you can also give a list of
     keywords like ‘KWD1|KWD2|...’ to list entries that match any one of
     these keywords.  With a numeric prefix argument N, show the tree
     for the Nth keyword in the variable ‘org-todo-keywords’.  With two
     prefix arguments, find all TODO states, both un-done and done.

‘M-x org-agenda t’ (‘org-todo-list’)
     Show the global TODO list.  Collects the TODO items (with not-DONE
     states) from all agenda files (see *note Agenda Views::) into a
     single buffer.  The new buffer is in Org Agenda mode, which
     provides commands to examine and manipulate the TODO entries from
     the new buffer (see *note Agenda Commands::).  See *note Global
     TODO list::, for more information.

‘S-M-<RET>’ (‘org-insert-todo-heading’)
     Insert a new TODO entry below the current one.

   Changing a TODO state can also trigger tag changes.  See the
docstring of the option ‘org-todo-state-tags-triggers’ for details.


File: org.info,  Node: TODO Extensions,  Next: Progress Logging,  Prev: TODO Basics,  Up: TODO Items

5.2 Extended Use of TODO Keywords
=================================

By default, marked TODO entries have one of only two states: TODO and
DONE.  Org mode allows you to classify TODO items in more complex ways
with _TODO keywords_ (stored in ‘org-todo-keywords’).  With special
setup, the TODO keyword system can work differently in different files.

   Note that _tags_ are another way to classify headlines in general and
TODO items in particular (see *note Tags::).

* Menu:

* Workflow states::              From TODO to DONE in steps.
* TODO types::                   I do this, Fred does the rest.
* Multiple sets in one file::    Mixing it all, still finding your way.
* Fast access to TODO states::   Single letter selection of state.
* Per-file keywords::            Different files, different requirements.
* Faces for TODO keywords::      Highlighting states.
* TODO dependencies::            When one task needs to wait for others.


File: org.info,  Node: Workflow states,  Next: TODO types,  Up: TODO Extensions

5.2.1 TODO keywords as workflow states
--------------------------------------

You can use TODO keywords to indicate different, possibly _sequential_
states in the process of working on an item, for example(1):

     (setq org-todo-keywords
           '((sequence "TODO" "FEEDBACK" "VERIFY" "|" "DONE" "DELEGATED")))

   The vertical bar separates the TODO keywords (states that _need
action_) from the DONE states (which need _no further action_).  If you
do not provide the separator bar, the last state is used as the DONE
state.

   With this setup, the command ‘C-c C-t’ cycles an entry from ‘TODO’ to
‘FEEDBACK’, then to ‘VERIFY’, and finally to ‘DONE’ and ‘DELEGATED’.
You may also use a numeric prefix argument to quickly select a specific
state.  For example ‘C-3 C-c C-t’ changes the state immediately to
‘VERIFY’.  Or you can use ‘S-<RIGHT>’ and ‘S-<LEFT>’ to go forward and
backward through the states.  If you define many keywords, you can use
in-buffer completion (see *note Completion::) or a special one-key
selection scheme (see *note Fast access to TODO states::) to insert
these words into the buffer.  Changing a TODO state can be logged with a
timestamp, see *note Tracking TODO state changes::, for more
information.

   ---------- Footnotes ----------

   (1) Changing the variable ‘org-todo-keywords’ only becomes effective
after restarting Org mode in a buffer.


File: org.info,  Node: TODO types,  Next: Multiple sets in one file,  Prev: Workflow states,  Up: TODO Extensions

5.2.2 TODO keywords as types
----------------------------

The second possibility is to use TODO keywords to indicate different
_types_ of action items.  For example, you might want to indicate that
items are for “work” or “home”.  Or, when you work with several people
on a single project, you might want to assign action items directly to
persons, by using their names as TODO keywords.  This type of
functionality is actually much better served by using tags (see *note
Tags::), so the TODO implementation is kept just for backward
compatibility.

   Using TODO types, it would be set up like this:

     (setq org-todo-keywords '((type "Fred" "Sara" "Lucy" "|" "DONE")))

   In this case, different keywords do not indicate states, but rather
different types.  So the normal work flow would be to assign a task to a
person, and later to mark it DONE.  Org mode supports this style by
adapting the workings of the command ‘C-c C-t’(1).  When used several
times in succession, it still cycles through all names, in order to
first select the right type for a task.  But when you return to the item
after some time and execute ‘C-c C-t’ again, it will switch from any
name directly to ‘DONE’.  Use prefix arguments or completion to quickly
select a specific name.  You can also review the items of a specific
TODO type in a sparse tree by using a numeric prefix to ‘C-c / t’.  For
example, to see all things Lucy has to do, you would use ‘C-3 C-c / t’.
To collect Lucy’s items from all agenda files into a single buffer, you
would use the numeric prefix argument as well when creating the global
TODO list: ‘C-3 M-x org-agenda t’.

   ---------- Footnotes ----------

   (1) This is also true for the ‘t’ command in the agenda buffer.


File: org.info,  Node: Multiple sets in one file,  Next: Fast access to TODO states,  Prev: TODO types,  Up: TODO Extensions

5.2.3 Multiple keyword sets in one file
---------------------------------------

Sometimes you may want to use different sets of TODO keywords in
parallel.  For example, you may want to have the basic TODO/DONE, but
also a workflow for bug fixing, and a separate state indicating that an
item has been canceled—so it is not DONE, but also does not require
action.  Your setup would then look like this:

     (setq org-todo-keywords
           '((sequence "TODO" "|" "DONE")
             (sequence "REPORT" "BUG" "KNOWNCAUSE" "|" "FIXED")
             (sequence "|" "CANCELED")))

   The keywords should all be different, this helps Org mode keep track
of which subsequence should be used for a given entry.  In this setup,
‘C-c C-t’ only operates within a sub-sequence, so it switches from
‘DONE’ to (nothing) to ‘TODO’, and from ‘FIXED’ to (nothing) to
‘REPORT’.  Therefore you need a mechanism to initially select the
correct sequence.  In addition to typing a keyword or using completion
(see *note Completion::), you may also apply the following commands:

‘C-u C-u C-c C-t’
‘C-S-<RIGHT>’
‘C-S-<LEFT>’
     These keys jump from one TODO sub-sequence to the next.  In the
     above example, ‘C-u C-u C-c C-t’ or ‘C-S-<RIGHT>’ would jump from
     ‘TODO’ or ‘DONE’ to ‘REPORT’, and any of the words in the second
     row to ‘CANCELED’.  Note that the ‘C-S-’ key binding conflict with
     shift-selection (see *note Conflicts::).

‘S-<RIGHT>’
‘S-<LEFT>’
     ‘S-<LEFT>’ and ‘S-<RIGHT>’ walk through _all_ keywords from all
     sub-sequences, so for example ‘S-<RIGHT>’ would switch from ‘DONE’
     to ‘REPORT’ in the example above.  For a discussion of the
     interaction with shift-selection, see *note Conflicts::.


File: org.info,  Node: Fast access to TODO states,  Next: Per-file keywords,  Prev: Multiple sets in one file,  Up: TODO Extensions

5.2.4 Fast access to TODO states
--------------------------------

If you would like to quickly change an entry to an arbitrary TODO state
instead of cycling through the states, you can set up keys for
single-letter access to the states.  This is done by adding the
selection character after each keyword, in parentheses(1).  For example:

     (setq org-todo-keywords
           '((sequence "TODO(t)" "|" "DONE(d)")
             (sequence "REPORT(r)" "BUG(b)" "KNOWNCAUSE(k)" "|" "FIXED(f)")
             (sequence "|" "CANCELED(c)")))

   If you then press ‘C-c C-t’ followed by the selection key, the entry
is switched to this state.  ‘<SPC>’ can be used to remove any TODO
keyword from an entry(2).

   ---------- Footnotes ----------

   (1) All characters are allowed except ‘@’, ‘^’ and ‘!’, which have a
special meaning here.

   (2) Check also the variable ‘org-fast-tag-selection-include-todo’, it
allows you to change the TODO state through the tags interface (see
*note Setting Tags::), in case you like to mingle the two concepts.
Note that this means you need to come up with unique keys across both
sets of keywords.


File: org.info,  Node: Per-file keywords,  Next: Faces for TODO keywords,  Prev: Fast access to TODO states,  Up: TODO Extensions

5.2.5 Setting up keywords for individual files
----------------------------------------------

It can be very useful to use different aspects of the TODO mechanism in
different files.  For file-local settings, you need to add special lines
to the file which set the keywords and interpretation for that file
only.  For example, to set one of the two examples discussed above, you
need one of the following lines, starting in column zero anywhere in the
file:

     #+TODO: TODO FEEDBACK VERIFY | DONE CANCELED

   You may also write ‘#+SEQ_TODO’ to be explicit about the
interpretation, but it means the same as ‘#+TODO’, or

     #+TYP_TODO: Fred Sara Lucy Mike | DONE

   A setup for using several sets in parallel would be:

     #+TODO: TODO(t) | DONE(d)
     #+TODO: REPORT(r) BUG(b) KNOWNCAUSE(k) | FIXED(f)
     #+TODO: | CANCELED(c)

   To make sure you are using the correct keyword, type ‘#+’ into the
buffer and then use ‘M-<TAB>’ to complete it (see *note Completion::).

   Remember that the keywords after the vertical bar—or the last keyword
if no bar is there—must always mean that the item is DONE, although you
may use a different word.  After changing one of these lines, use ‘C-c
C-c’ with point still in the line to make the changes known to Org
mode(1).

   ---------- Footnotes ----------

   (1) Org mode parses these lines only when Org mode is activated after
visiting a file.  ‘C-c C-c’ with point in a line starting with ‘#+’ is
simply restarting Org mode for the current buffer.


File: org.info,  Node: Faces for TODO keywords,  Next: TODO dependencies,  Prev: Per-file keywords,  Up: TODO Extensions

5.2.6 Faces for TODO keywords
-----------------------------

Org mode highlights TODO keywords with special faces: ‘org-todo’ for
keywords indicating that an item still has to be acted upon, and
‘org-done’ for keywords indicating that an item is finished.  If you are
using more than two different states, you might want to use special
faces for some of them.  This can be done using the variable
‘org-todo-keyword-faces’.  For example:

     (setq org-todo-keyword-faces
           '(("TODO" . org-warning) ("STARTED" . "yellow")
             ("CANCELED" . (:foreground "blue" :weight bold))))

   While using a list with face properties as shown for ‘CANCELED’
_should_ work, this does not always seem to be the case.  If necessary,
define a special face and use that.  A string is interpreted as a color.
The variable ‘org-faces-easy-properties’ determines if that color is
interpreted as a foreground or a background color.


File: org.info,  Node: TODO dependencies,  Prev: Faces for TODO keywords,  Up: TODO Extensions

5.2.7 TODO dependencies
-----------------------

The structure of Org files—hierarchy and lists—makes it easy to define
TODO dependencies.  Usually, a parent TODO task should not be marked as
done until all TODO subtasks, or children tasks, are marked as done.
Sometimes there is a logical sequence to (sub)tasks, so that one subtask
cannot be acted upon before all siblings above it have been marked as
done.  If you customize the variable ‘org-enforce-todo-dependencies’,
Org blocks entries from changing state to DONE while they have TODO
children that are not DONE.  Furthermore, if an entry has a property
‘ORDERED’, each of its TODO children is blocked until all earlier
siblings are marked as done.  Here is an example:

     * TODO Blocked until (two) is done
     ** DONE one
     ** TODO two

     * Parent
     :PROPERTIES:
     :ORDERED:  t
     :END:
     ** TODO a
     ** TODO b, needs to wait for (a)
     ** TODO c, needs to wait for (a) and (b)

   You can ensure an entry is never blocked by using the ‘NOBLOCKING’
property (see *note Properties and Columns::):

     * This entry is never blocked
     :PROPERTIES:
     :NOBLOCKING: t
     :END:

‘C-c C-x o’ (‘org-toggle-ordered-property’)
     Toggle the ‘ORDERED’ property of the current entry.  A property is
     used for this behavior because this should be local to the current
     entry, not inherited from entries above like a tag (see *note
     Tags::).  However, if you would like to _track_ the value of this
     property with a tag for better visibility, customize the variable
     ‘org-track-ordered-property-with-tag’.

‘C-u C-u C-u C-c C-t’
     Change TODO state, regardless of any state blocking.

   If you set the variable ‘org-agenda-dim-blocked-tasks’, TODO entries
that cannot be marked as done because of unmarked children are shown in
a dimmed font or even made invisible in agenda views (see *note Agenda
Views::).

   You can also block changes of TODO states by using checkboxes (see
*note Checkboxes::).  If you set the variable
‘org-enforce-todo-checkbox-dependencies’, an entry that has unchecked
checkboxes is blocked from switching to DONE.

   If you need more complex dependency structures, for example
dependencies between entries in different trees or files, check out the
module ‘org-depend.el’ in the ‘org-contrib’ repository.


File: org.info,  Node: Progress Logging,  Next: Priorities,  Prev: TODO Extensions,  Up: TODO Items

5.3 Progress Logging
====================

To record a timestamp and a note when changing a TODO state, call the
command ‘org-todo’ with a prefix argument.

‘C-u C-c C-t’ (‘org-todo’)
     Prompt for a note and record a the time of the TODO state change.
     The note is inserted as a list item below the headline, but can
     also be placed into a drawer, see *note Tracking TODO state
     changes::.

   If you want to be more systematic, Org mode can automatically record
a timestamp and optionally a note when you mark a TODO item as DONE, or
even each time you change the state of a TODO item.  This system is
highly configurable, settings can be on a per-keyword basis and can be
localized to a file or even a subtree.  For information on how to clock
working time for a task, see *note Clocking Work Time::.

* Menu:

* Closing items::                When was this entry marked as done?
* Tracking TODO state changes::  When did the status change?
* Tracking your habits::         How consistent have you been?


File: org.info,  Node: Closing items,  Next: Tracking TODO state changes,  Up: Progress Logging

5.3.1 Closing items
-------------------

The most basic automatic logging is to keep track of _when_ a certain
TODO item was marked as done.  This can be achieved with(1)

     (setq org-log-done 'time)

Then each time you turn an entry from a TODO (not-done) state into any
of the DONE states, a line ‘CLOSED: [timestamp]’ is inserted just after
the headline.  If you turn the entry back into a TODO item through
further state cycling, that line is removed again.  If you turn the
entry back to a non-TODO state (by pressing ‘C-c C-t <SPC>’ for
example), that line is also removed, unless you set
‘org-closed-keep-when-no-todo’ to non-‘nil’.  If you want to record a
note along with the timestamp, use(2)

     (setq org-log-done 'note)

You are then prompted for a note, and that note is stored below the
entry with a ‘Closing Note’ heading.

   ---------- Footnotes ----------

   (1) The corresponding in-buffer setting is: ‘#+STARTUP: logdone’.

   (2) The corresponding in-buffer setting is: ‘#+STARTUP: lognotedone’.


File: org.info,  Node: Tracking TODO state changes,  Next: Tracking your habits,  Prev: Closing items,  Up: Progress Logging

5.3.2 Tracking TODO state changes
---------------------------------

You might want to automatically keep track of when a state change
occurred and maybe take a note about this change.  You can either record
just a timestamp, or a time-stamped note.  These records are inserted
after the headline as an itemized list, newest first(1).  When taking a
lot of notes, you might want to get the notes out of the way into a
drawer (see *note Drawers::).  Customize the variable
‘org-log-into-drawer’ to get this behavior—the recommended drawer for
this is called ‘LOGBOOK’(2).  You can also overrule the setting of this
variable for a subtree by setting a ‘LOG_INTO_DRAWER’ property.

   Since it is normally too much to record a note for every state, Org
mode expects configuration on a per-keyword basis for this.  This is
achieved by adding special markers ‘!’ (for a timestamp) or ‘@’ (for a
note with timestamp) in parentheses after each keyword.  For example,
with the setting

     (setq org-todo-keywords
           '((sequence "TODO(t)" "WAIT(w@/!)" "|" "DONE(d!)" "CANCELED(c@)")))

   You not only define global TODO keywords and fast access keys, but
also request that a time is recorded when the entry is set to ‘DONE’,
and that a note is recorded when switching to ‘WAIT’ or ‘CANCELED’(3).
The setting for ‘WAIT’ is even more special: the ‘!’ after the slash
means that in addition to the note taken when entering the state, a
timestamp should be recorded when _leaving_ the ‘WAIT’ state, if and
only if the _target_ state does not configure logging for entering it.
So it has no effect when switching from ‘WAIT’ to ‘DONE’, because ‘DONE’
is configured to record a timestamp only.  But when switching from
‘WAIT’ back to ‘TODO’, the ‘/!’ in the ‘WAIT’ setting now triggers a
timestamp even though ‘TODO’ has no logging configured.

   You can use the exact same syntax for setting logging preferences
local to a buffer:

     #+TODO: TODO(t) WAIT(w@/!) | DONE(d!) CANCELED(c@)

   To record a timestamp without a note for TODO keywords configured
with ‘@’, just type ‘C-c C-c’ to enter a blank note when prompted.

   In order to define logging settings that are local to a subtree or a
single item, define a ‘LOGGING’ property in this entry.  Any non-empty
‘LOGGING’ property resets all logging settings to ‘nil’.  You may then
turn on logging for this specific tree using ‘STARTUP’ keywords like
‘lognotedone’ or ‘logrepeat’, as well as adding state specific settings
like ‘TODO(!)’.  For example:

     * TODO Log each state with only a time
       :PROPERTIES:
       :LOGGING: TODO(!) WAIT(!) DONE(!) CANCELED(!)
       :END:
     * TODO Only log when switching to WAIT, and when repeating
       :PROPERTIES:
       :LOGGING: WAIT(@) logrepeat
       :END:
     * TODO No logging at all
       :PROPERTIES:
       :LOGGING: nil
       :END:

   ---------- Footnotes ----------

   (1) See the variable ‘org-log-states-order-reversed’.

   (2) Note that the ‘LOGBOOK’ drawer is unfolded when pressing ‘<SPC>’
in the agenda to show an entry—use ‘C-u <SPC>’ to keep it folded here.

   (3) It is possible that Org mode records two timestamps when you are
using both ‘org-log-done’ and state change logging.  However, it never
prompts for two notes: if you have configured both, the state change
recording note takes precedence and cancel the closing note.


File: org.info,  Node: Tracking your habits,  Prev: Tracking TODO state changes,  Up: Progress Logging

5.3.3 Tracking your habits
--------------------------

Org has the ability to track the consistency of a special category of
TODO, called “habits.” To use habits, you have to enable the ‘habit’
module by customizing the variable ‘org-modules’.

   A habit has the following properties:

  1. The habit is a TODO item, with a TODO keyword representing an open
     state.

  2. The property ‘STYLE’ is set to the value ‘habit’ (see *note
     Properties and Columns::).

  3. The TODO has a scheduled date, usually with a ‘.+’ style repeat
     interval.  A ‘++’ style may be appropriate for habits with time
     constraints, e.g., must be done on specific days of week (‘++1w’),
     or a ‘+’ style for an unusual habit that can have a backlog, e.g.,
     weekly reports.  See *note Repeated tasks:: for more details about
     repeat intervals.

  4. The TODO may also have minimum and maximum ranges specified by
     using the syntax ‘.+2d/3d’, which says that you want to do the task
     at least every three days, but at most every two days.

  5. State logging for the DONE state is enabled (see *note Tracking
     TODO state changes::), in order for historical data to be
     represented in the consistency graph.  If it is not enabled it is
     not an error, but the consistency graphs are largely meaningless.

   To give you an idea of what the above rules look like in action,
here’s an actual habit with some history:

     ** TODO Shave
        SCHEDULED: <2009-10-17 Sat .+2d/4d>
        :PROPERTIES:
        :STYLE:    habit
        :LAST_REPEAT: [2009-10-19 Mon 00:36]
        :END:
        - State "DONE"       from "TODO"       [2009-10-15 Thu]
        - State "DONE"       from "TODO"       [2009-10-12 Mon]
        - State "DONE"       from "TODO"       [2009-10-10 Sat]
        - State "DONE"       from "TODO"       [2009-10-04 Sun]
        - State "DONE"       from "TODO"       [2009-10-02 Fri]
        - State "DONE"       from "TODO"       [2009-09-29 Tue]
        - State "DONE"       from "TODO"       [2009-09-25 Fri]
        - State "DONE"       from "TODO"       [2009-09-19 Sat]
        - State "DONE"       from "TODO"       [2009-09-16 Wed]
        - State "DONE"       from "TODO"       [2009-09-12 Sat]

   What this habit says is: I want to shave at most every 2 days—given
by the ‘SCHEDULED’ date and repeat interval—and at least every 4 days.
If today is the 15th, then the habit first appears in the agenda (see
*note Agenda Views::) on Oct 17, after the minimum of 2 days has
elapsed, and will appear overdue on Oct 19, after four days have
elapsed.

   What’s really useful about habits is that they are displayed along
with a consistency graph, to show how consistent you’ve been at getting
that task done in the past.  This graph shows every day that the task
was done over the past three weeks, with colors for each day.  The
colors used are:

Blue
     If the task was not to be done yet on that day.
Green
     If the task could have been done on that day.
Yellow
     If the task was going to be overdue the next day.
Red
     If the task was overdue on that day.

   In addition to coloring each day, the day is also marked with an
asterisk if the task was actually done that day, and an exclamation mark
to show where the current day falls in the graph.

   There are several configuration variables that can be used to change
the way habits are displayed in the agenda.

‘org-habit-graph-column’
     The buffer column at which the consistency graph should be drawn.
     This overwrites any text in that column, so it is a good idea to
     keep your habits’ titles brief and to the point.

‘org-habit-preceding-days’
     The amount of history, in days before today, to appear in
     consistency graphs.

‘org-habit-following-days’
     The number of days after today that appear in consistency graphs.

‘org-habit-show-habits-only-for-today’
     If non-‘nil’, only show habits in today’s agenda view.  The default
     value is ‘t’.  Pressing ‘C-u K’ in the agenda toggles this
     variable.

   Lastly, pressing ‘K’ in the agenda buffer causes habits to
temporarily be disabled and do not appear at all.  Press ‘K’ again to
bring them back.  They are also subject to tag filtering, if you have
habits which should only be done in certain contexts, for example.


File: org.info,  Node: Priorities,  Next: Breaking Down Tasks,  Prev: Progress Logging,  Up: TODO Items

5.4 Priorities
==============

If you use Org mode extensively, you may end up with enough TODO items
that it starts to make sense to prioritize them.  Prioritizing can be
done by placing a _priority cookie_ into the headline of a TODO item
right after the TODO keyword, like this:

     *** TODO [#A] Write letter to Sam Fortune

   By default, Org mode supports three priorities: ‘A’, ‘B’, and ‘C’.
‘A’ is the highest priority.  An entry without a cookie is treated as
equivalent if it had priority ‘B’.  Priorities make a difference only
for sorting in the agenda (see *note Weekly/daily agenda::).  Outside
the agenda, they have no inherent meaning to Org mode.  The cookies are
displayed with the face defined by the variable ‘org-priority-faces’,
which can be customized.

   You can also use numeric values for priorities, such as

     *** TODO [#1] Write letter to Sam Fortune

   When using numeric priorities, you need to set
‘org-priority-highest’, ‘org-priority-lowest’ and ‘org-priority-default’
to integers, which must all be strictly inferior to 65.

   Priorities can be attached to any outline node; they do not need to
be TODO items.

‘C-c ,’ (‘org-priority’)
     Set the priority of the current headline.  The command prompts for
     a priority character ‘A’, ‘B’ or ‘C’.  When you press ‘<SPC>’
     instead, the priority cookie, if one is set, is removed from the
     headline.  The priorities can also be changed “remotely” from the
     agenda buffer with the ‘,’ command (see *note Agenda Commands::).

‘S-<UP>’ (‘org-priority-up’)
‘S-<DOWN>’ (‘org-priority-down’)
     Increase/decrease the priority of the current headline(1).  Note
     that these keys are also used to modify timestamps (see *note
     Creating Timestamps::).  See also *note Conflicts::, for a
     discussion of the interaction with shift-selection.

   You can change the range of allowed priorities by setting the
variables ‘org-priority-highest’, ‘org-priority-lowest’, and
‘org-priority-default’.  For an individual buffer, you may set these
values (highest, lowest, default) like this (please make sure that the
highest priority is earlier in the alphabet than the lowest priority):

     #+PRIORITIES: A C B

   Or, using numeric values:

     #+PRIORITIES: 1 10 5

   ---------- Footnotes ----------

   (1) See also the option ‘org-priority-start-cycle-with-default’.


File: org.info,  Node: Breaking Down Tasks,  Next: Checkboxes,  Prev: Priorities,  Up: TODO Items

5.5 Breaking Down Tasks into Subtasks
=====================================

It is often advisable to break down large tasks into smaller, manageable
subtasks.  You can do this by creating an outline tree below a TODO
item, with detailed subtasks on the tree(1).  To keep an overview of the
fraction of subtasks that have already been marked as done, insert
either ‘[/]’ or ‘[%]’ anywhere in the headline.  These cookies are
updated each time the TODO status of a child changes, or when pressing
‘C-c C-c’ on the cookie.  For example:

     * Organize Party [33%]
     ** TODO Call people [1/2]
     *** TODO Peter
     *** DONE Sarah
     ** TODO Buy food
     ** DONE Talk to neighbor

   If a heading has both checkboxes and TODO children below it, the
meaning of the statistics cookie become ambiguous.  Set the property
‘COOKIE_DATA’ to either ‘checkbox’ or ‘todo’ to resolve this issue.

   If you would like to have the statistics cookie count any TODO
entries in the subtree (not just direct children), configure the
variable ‘org-hierarchical-todo-statistics’.  To do this for a single
subtree, include the word ‘recursive’ into the value of the
‘COOKIE_DATA’ property.

     * Parent capturing statistics [2/20]
       :PROPERTIES:
       :COOKIE_DATA: todo recursive
       :END:

   If you would like a TODO entry to automatically change to DONE when
all children are done, you can use the following setup:

     (defun org-summary-todo (n-done n-not-done)
       "Switch entry to DONE when all subentries are done, to TODO otherwise."
       (let (org-log-done org-todo-log-states)   ; turn off logging
         (org-todo (if (= n-not-done 0) "DONE" "TODO"))))

     (add-hook 'org-after-todo-statistics-hook #'org-summary-todo)

   Another possibility is the use of checkboxes to identify (a hierarchy
of) a large number of subtasks (see *note Checkboxes::).

   ---------- Footnotes ----------

   (1) To keep subtasks out of the global TODO list, see the option
‘org-agenda-todo-list-sublevels’.


File: org.info,  Node: Checkboxes,  Prev: Breaking Down Tasks,  Up: TODO Items

5.6 Checkboxes
==============

Every item in a plain list(1) (see *note Plain Lists::) can be made into
a checkbox by starting it with the string ‘[ ]’.  This feature is
similar to TODO items (see *note TODO Items::), but is more lightweight.
Checkboxes are not included into the global TODO list, so they are often
great to split a task into a number of simple steps.  Or you can use
them in a shopping list.

   Here is an example of a checkbox list.

     * TODO Organize party [2/4]
       - [-] call people [1/3]
         - [ ] Peter
         - [X] Sarah
         - [ ] Sam
       - [X] order food
       - [ ] think about what music to play
       - [X] talk to the neighbors

   Checkboxes work hierarchically, so if a checkbox item has children
that are checkboxes, toggling one of the children checkboxes makes the
parent checkbox reflect if none, some, or all of the children are
checked.

   The ‘[2/4]’ and ‘[1/3]’ in the first and second line are cookies
indicating how many checkboxes present in this entry have been checked
off, and the total number of checkboxes present.  This can give you an
idea on how many checkboxes remain, even without opening a folded entry.
The cookies can be placed into a headline or into (the first line of) a
plain list item.  Each cookie covers checkboxes of direct children
structurally below the headline/item on which the cookie appears(2).
You have to insert the cookie yourself by typing either ‘[/]’ or ‘[%]’.
With ‘[/]’ you get an ‘n out of m’ result, as in the examples above.
With ‘[%]’ you get information about the percentage of checkboxes
checked (in the above example, this would be ‘[50%]’ and ‘[33%]’,
respectively).  In a headline, a cookie can count either checkboxes
below the heading or TODO states of children, and it displays whatever
was changed last.  Set the property ‘COOKIE_DATA’ to either ‘checkbox’
or ‘todo’ to resolve this issue.

   If the current outline node has an ‘ORDERED’ property, checkboxes
must be checked off in sequence, and an error is thrown if you try to
check off a box while there are unchecked boxes above it.

   The following commands work with checkboxes:

‘C-c C-c’ (‘org-toggle-checkbox’)
     Toggle checkbox status or—with prefix argument—checkbox presence at
     point.  With a single prefix argument, add an empty checkbox or
     remove the current one(3).  With a double prefix argument, set it
     to ‘[-]’, which is considered to be an intermediate state.

‘C-c C-x C-b’ (‘org-toggle-checkbox’)
     Toggle checkbox status or—with prefix argument—checkbox presence at
     point.  With double prefix argument, set it to ‘[-]’, which is
     considered to be an intermediate state.

        • If there is an active region, toggle the first checkbox in the
          region and set all remaining boxes to the same status as the
          first.  With a prefix argument, add or remove the checkbox for
          all items in the region.

        • If point is in a headline, toggle checkboxes in the region
          between this headline and the next—so _not_ the entire
          subtree.

        • If there is no active region, just toggle the checkbox at
          point.

‘C-c C-x C-r’ (‘org-toggle-radio-button’)
     Toggle checkbox status by using the checkbox of the item at point
     as a radio button: when the checkbox is turned on, all other
     checkboxes on the same level will be turned off.  With a universal
     prefix argument, toggle the presence of the checkbox.  With a
     double prefix argument, set it to ‘[-]’.

     ‘C-c C-c’ can be told to consider checkboxes as radio buttons by
     setting ‘#+ATTR_ORG: :radio t’ right before the list or by calling
     ‘M-x org-list-checkbox-radio-mode’ to activate this minor mode.

‘M-S-<RET>’ (‘org-insert-todo-heading’)
     Insert a new item with a checkbox.  This works only if point is
     already in a plain list item (see *note Plain Lists::).

‘C-c C-x o’ (‘org-toggle-ordered-property’)
     Toggle the ‘ORDERED’ property of the entry, to toggle if checkboxes
     must be checked off in sequence.  A property is used for this
     behavior because this should be local to the current entry, not
     inherited like a tag.  However, if you would like to _track_ the
     value of this property with a tag for better visibility, customize
     ‘org-track-ordered-property-with-tag’.

‘C-c #’ (‘org-update-statistics-cookies’)
     Update the statistics cookie in the current outline entry.  When
     called with a ‘C-u’ prefix, update the entire file.  Checkbox
     statistic cookies are updated automatically if you toggle
     checkboxes with ‘C-c C-c’ and make new ones with ‘M-S-<RET>’.  TODO
     statistics cookies update when changing TODO states.  If you delete
     boxes/entries or add/change them by hand, use this command to get
     things back into sync.

   ---------- Footnotes ----------

   (1) With the exception of description lists.  But you can allow it by
modifying ‘org-list-automatic-rules’ accordingly.

   (2) Set the variable ‘org-hierarchical-checkbox-statistics’ if you
want such cookies to count all checkboxes below the cookie, not just
those belonging to direct children.

   (3) ‘C-u C-c C-c’ on the _first_ item of a list with no checkbox adds
checkboxes to the rest of the list.


File: org.info,  Node: Tags,  Next: Properties and Columns,  Prev: TODO Items,  Up: Top

6 Tags
******

An excellent way to implement labels and contexts for cross-correlating
information is to assign _tags_ to headlines.  Org mode has extensive
support for tags.

   Every headline can contain a list of tags; they occur at the end of
the headline.  Tags are normal words containing letters, numbers, ‘_’,
and ‘@’.  Tags must be preceded and followed by a single colon, e.g.,
‘:work:’.  Several tags can be specified, as in ‘:work:urgent:’.  Tags
by default are in bold face with the same color as the headline.  You
may specify special faces for specific tags using the variable
‘org-tag-faces’, in much the same way as you can for TODO keywords (see
*note Faces for TODO keywords::).

* Menu:

* Tag Inheritance::              Tags use the tree structure of an outline.
* Setting Tags::                 How to assign tags to a headline.
* Tag Hierarchy::                Create a hierarchy of tags.
* Tag Searches::                 Searching for combinations of tags.


File: org.info,  Node: Tag Inheritance,  Next: Setting Tags,  Up: Tags

6.1 Tag Inheritance
===================

_Tags_ make use of the hierarchical structure of outline trees.  If a
heading has a certain tag, all subheadings inherit the tag as well.  For
example, in the list

     * Meeting with the French group      :work:
     ** Summary by Frank                  :boss:notes:
     *** TODO Prepare slides for him      :action:

the final heading has the tags ‘work’, ‘boss’, ‘notes’, and ‘action’
even though the final heading is not explicitly marked with those tags.
You can also set tags that all entries in a file should inherit just as
if these tags were defined in a hypothetical level zero that surrounds
the entire file.  Use a line like this(1)

     #+FILETAGS: :Peter:Boss:Secret:

   To limit tag inheritance to specific tags, or to turn it off
entirely, use the variables ‘org-use-tag-inheritance’ and
‘org-tags-exclude-from-inheritance’.

   When a headline matches during a tags search while tag inheritance is
turned on, all the sublevels in the same tree—for a simple match
form—match as well(2).  The list of matches may then become very long.
If you only want to see the first tags match in a subtree, configure the
variable ‘org-tags-match-list-sublevels’ (not recommended).

   Tag inheritance is relevant when the agenda search tries to match a
tag, either in the ‘tags’ or ‘tags-todo’ agenda types.  In other agenda
types, ‘org-use-tag-inheritance’ has no effect.  Still, you may want to
have your tags correctly set in the agenda, so that tag filtering works
fine, with inherited tags.  Set ‘org-agenda-use-tag-inheritance’ to
control this: the default value includes all agenda types, but setting
this to ‘nil’ can really speed up agenda generation.

   ---------- Footnotes ----------

   (1) As with all these in-buffer settings, pressing ‘C-c C-c’
activates any changes in the line.

   (2) This is only true if the search does not involve more complex
tests including properties (see *note Property Searches::).


File: org.info,  Node: Setting Tags,  Next: Tag Hierarchy,  Prev: Tag Inheritance,  Up: Tags

6.2 Setting Tags
================

Tags can simply be typed into the buffer at the end of a headline.
After a colon, ‘M-<TAB>’ offers completion on tags.  There is also a
special command for inserting tags:

‘C-c C-q’ (‘org-set-tags-command’)
     Enter new tags for the current headline.  Org mode either offers
     completion or a special single-key interface for setting tags, see
     below.  After pressing ‘<RET>’, the tags are inserted and aligned
     to ‘org-tags-column’.  When called with a ‘C-u’ prefix, all tags in
     the current buffer are aligned to that column, just to make things
     look nice.  Tags are automatically realigned after promotion,
     demotion, and TODO state changes (see *note TODO Basics::).

‘C-c C-c’ (‘org-set-tags-command’)
     When point is in a headline, this does the same as ‘C-c C-q’.

   Org supports tag insertion based on a _list of tags_.  By default
this list is constructed dynamically, containing all tags currently used
in the buffer(1).  You may also globally specify a hard list of tags
with the variable ‘org-tag-alist’.  Finally you can set the default tags
for a given file using the ‘TAGS’ keyword, like

     #+TAGS: @work @home @tennisclub
     #+TAGS: laptop car pc sailboat

   If you have globally defined your preferred set of tags using the
variable ‘org-tag-alist’, but would like to use a dynamic tag list in a
specific file, add an empty ‘TAGS’ keyword to that file:

     #+TAGS:

   If you have a preferred set of tags that you would like to use in
every file, in addition to those defined on a per-file basis by ‘TAGS’
keyword, then you may specify a list of tags with the variable
‘org-tag-persistent-alist’.  You may turn this off on a per-file basis
by adding a ‘STARTUP’ keyword to that file:

     #+STARTUP: noptag

   By default Org mode uses the standard minibuffer completion
facilities for entering tags.  However, it also implements another,
quicker, tag selection method called _fast tag selection_.  This allows
you to select and deselect tags with just a single key press.  For this
to work well you should assign unique letters to most of your commonly
used tags.  You can do this globally by configuring the variable
‘org-tag-alist’ in your Emacs init file.  For example, you may find the
need to tag many items in different files with ‘@home’.  In this case
you can set something like:

     (setq org-tag-alist '(("@work" . ?w) ("@home" . ?h) ("laptop" . ?l)))

   If the tag is only relevant to the file you are working on, then you
can instead set the ‘TAGS’ keyword as:

     #+TAGS: @work(w)  @home(h)  @tennisclub(t)  laptop(l)  pc(p)

   The tags interface shows the available tags in a splash window.  If
you want to start a new line after a specific tag, insert ‘\n’ into the
tag list

     #+TAGS: @work(w) @home(h) @tennisclub(t) \n laptop(l) pc(p)

or write them in two lines:

     #+TAGS: @work(w)  @home(h)  @tennisclub(t)
     #+TAGS: laptop(l)  pc(p)

   You can also group together tags that are mutually exclusive by using
braces, as in:

     #+TAGS: { @work(w)  @home(h)  @tennisclub(t) }  laptop(l)  pc(p)

you indicate that at most one of ‘@work’, ‘@home’, and ‘@tennisclub’
should be selected.  Multiple such groups are allowed.

   Do not forget to press ‘C-c C-c’ with point in one of these lines to
activate any changes.

   To set these mutually exclusive groups in the variable
‘org-tags-alist’, you must use the dummy tags ‘:startgroup’ and
‘:endgroup’ instead of the braces.  Similarly, you can use ‘:newline’ to
indicate a line break.  The previous example would be set globally by
the following configuration:

     (setq org-tag-alist '((:startgroup . nil)
                           ("@work" . ?w) ("@home" . ?h)
                           ("@tennisclub" . ?t)
                           (:endgroup . nil)
                           ("laptop" . ?l) ("pc" . ?p)))

   If at least one tag has a selection key then pressing ‘C-c C-c’
automatically presents you with a special interface, listing inherited
tags, the tags of the current headline, and a list of all valid tags
with corresponding keys(2).

   Pressing keys assigned to tags adds or removes them from the list of
tags in the current line.  Selecting a tag in a group of mutually
exclusive tags turns off any other tag from that group.

   In this interface, you can also use the following special keys:

‘<TAB>’
     Enter a tag in the minibuffer, even if the tag is not in the
     predefined list.  You can complete on all tags present in the
     buffer and globally pre-defined tags from ‘org-tag-alist’ and
     ‘org-tag-persistent-alist’.  You can also add several tags: just
     separate them with a comma.

‘<SPC>’
     Clear all tags for this line.

‘<RET>’
     Accept the modified set.

‘C-g’
     Abort without installing changes.

‘q’
     If ‘q’ is not assigned to a tag, it aborts like ‘C-g’.

‘!’
     Turn off groups of mutually exclusive tags.  Use this to (as an
     exception) assign several tags from such a group.

‘C-c’
     Toggle auto-exit after the next change (see below).  If you are
     using expert mode, the first ‘C-c’ displays the selection window.

   This method lets you assign tags to a headline with very few keys.
With the above setup, you could clear the current tags and set ‘@home’,
‘laptop’ and ‘pc’ tags with just the following keys: ‘C-c C-c <SPC> h l
p <RET>’.  Switching from ‘@home’ to ‘@work’ would be done with ‘C-c C-c
w <RET>’ or alternatively with ‘C-c C-c C-c w’.  Adding the
non-predefined tag ‘sarah’ could be done with ‘C-c C-c <TAB> s a r a h
<RET>’.

   If you find that most of the time you need only a single key press to
modify your list of tags, set the variable
‘org-fast-tag-selection-single-key’.  Then you no longer have to press
‘<RET>’ to exit fast tag selection—it exits after the first change.  If
you then occasionally need more keys, press ‘C-c’ to turn off auto-exit
for the current tag selection process (in effect: start selection with
‘C-c C-c C-c’ instead of ‘C-c C-c’).  If you set the variable to the
value ‘expert’, the special window is not even shown for single-key tag
selection, it comes up only when you press an extra ‘C-c’.

   ---------- Footnotes ----------

   (1) To extend this default list to all tags used in all agenda files
(see *note Agenda Views::), customize the variable
‘org-complete-tags-always-offer-all-agenda-tags’.

   (2) Keys are automatically assigned to tags that have no configured
keys.


File: org.info,  Node: Tag Hierarchy,  Next: Tag Searches,  Prev: Setting Tags,  Up: Tags

6.3 Tag Hierarchy
=================

Tags can be defined in hierarchies.  A tag can be defined as a _group
tag_ for a set of other tags.  The group tag can be seen as the “broader
term” for its set of tags.  Defining multiple group tags and nesting
them creates a tag hierarchy.

   One use-case is to create a taxonomy of terms (tags) that can be used
to classify nodes in a document or set of documents.

   When you search for a group tag, it return matches for all members in
the group and its subgroups.  In an agenda view, filtering by a group
tag displays or hide headlines tagged with at least one of the members
of the group or any of its subgroups.  This makes tag searches and
filters even more flexible.

   You can set group tags by using brackets and inserting a colon
between the group tag and its related tags—beware that all whitespaces
are mandatory so that Org can parse this line correctly:

     #+TAGS: [ GTD : Control Persp ]

   In this example, ‘GTD’ is the group tag and it is related to two
other tags: ‘Control’, ‘Persp’.  Defining ‘Control’ and ‘Persp’ as group
tags creates a hierarchy of tags:

     #+TAGS: [ Control : Context Task ]
     #+TAGS: [ Persp : Vision Goal AOF Project ]

   That can conceptually be seen as a hierarchy of tags:

   • ‘GTD’
        • ‘Persp’
             • ‘Vision’
             • ‘Goal’
             • ‘AOF’
             • ‘Project’
        • ‘Control’
             • ‘Context’
             • ‘Task’

   You can use the ‘:startgrouptag’, ‘:grouptags’ and ‘:endgrouptag’
keyword directly when setting ‘org-tag-alist’ directly:

     (setq org-tag-alist '((:startgrouptag)
                           ("GTD")
                           (:grouptags)
                           ("Control")
                           ("Persp")
                           (:endgrouptag)
                           (:startgrouptag)
                           ("Control")
                           (:grouptags)
                           ("Context")
                           ("Task")
                           (:endgrouptag)))

   The tags in a group can be mutually exclusive if using the same group
syntax as is used for grouping mutually exclusive tags together; using
curly brackets.

     #+TAGS: { Context : @Home @Work @Call }

   When setting ‘org-tag-alist’ you can use ‘:startgroup’ and
‘:endgroup’ instead of ‘:startgrouptag’ and ‘:endgrouptag’ to make the
tags mutually exclusive.

   Furthermore, the members of a group tag can also be regular
expressions, creating the possibility of a more dynamic and rule-based
tag structure (see *note Regular Expressions::).  The regular
expressions in the group must be specified within curly brackets.  Here
is an expanded example:

     #+TAGS: [ Vision : {V@.+} ]
     #+TAGS: [ Goal : {G@.+} ]
     #+TAGS: [ AOF : {AOF@.+} ]
     #+TAGS: [ Project : {P@.+} ]

   Searching for the tag ‘Project’ now lists all tags also including
regular expression matches for ‘P@.+’, and similarly for tag searches on
‘Vision’, ‘Goal’ and ‘AOF’.  For example, this would work well for a
project tagged with a common project-identifier, e.g., ‘P@2014_OrgTags’.

   If you want to ignore group tags temporarily, toggle group tags
support with ‘org-toggle-tags-groups’, bound to ‘C-c C-x q’.  If you
want to disable tag groups completely, set ‘org-group-tags’ to ‘nil’.


File: org.info,  Node: Tag Searches,  Prev: Tag Hierarchy,  Up: Tags

6.4 Tag Searches
================

Once a system of tags has been set up, it can be used to collect related
information into special lists.

‘C-c / m’ or ‘C-c \’ (‘org-match-sparse-tree’)
     Create a sparse tree with all headlines matching a tags search.
     With a ‘C-u’ prefix argument, ignore headlines that are not a TODO
     line.

‘M-x org-agenda m’ (‘org-tags-view’)
     Create a global list of tag matches from all agenda files.  See
     *note Matching tags and properties::.

‘M-x org-agenda M’ (‘org-tags-view’)
     Create a global list of tag matches from all agenda files, but
     check only TODO items and force checking subitems (see the option
     ‘org-tags-match-list-sublevels’).

   These commands all prompt for a match string which allows basic
Boolean logic like ‘+boss+urgent-project1’, to find entries with tags
‘boss’ and ‘urgent’, but not ‘project1’, or ‘Kathy|Sally’ to find
entries which are tagged, like ‘Kathy’ or ‘Sally’.  The full syntax of
the search string is rich and allows also matching against TODO
keywords, entry levels and properties.  For a complete description with
many examples, see *note Matching tags and properties::.


File: org.info,  Node: Properties and Columns,  Next: Dates and Times,  Prev: Tags,  Up: Top

7 Properties and Columns
************************

A property is a key-value pair associated with an entry.  Properties can
be set so they are associated with a single entry, with every entry in a
tree, or with the whole buffer.

   There are two main applications for properties in Org mode.  First,
properties are like tags, but with a value.  Imagine maintaining a file
where you document bugs and plan releases for a piece of software.
Instead of using tags like ‘release_1’, ‘release_2’, you can use a
property, say ‘Release’, that in different subtrees has different
values, such as ‘1.0’ or ‘2.0’.  Second, you can use properties to
implement (very basic) database capabilities in an Org buffer.  Imagine
keeping track of your music CDs, where properties could be things such
as the album, artist, date of release, number of tracks, and so on.

   Properties can be conveniently edited and viewed in column view (see
*note Column View::).

* Menu:

* Property Syntax::              How properties are spelled out.
* Special Properties::           Access to other Org mode features.
* Property Searches::            Matching property values.
* Property Inheritance::         Passing values down a tree.
* Column View::                  Tabular viewing and editing.


File: org.info,  Node: Property Syntax,  Next: Special Properties,  Up: Properties and Columns

7.1 Property Syntax
===================

Properties are key–value pairs.  When they are associated with a single
entry or with a tree they need to be inserted into a special drawer (see
*note Drawers::) with the name ‘PROPERTIES’, which has to be located
right below a headline, and its planning line (see *note Deadlines and
Scheduling::) when applicable.  Each property is specified on a single
line, with the key—surrounded by colons—first, and the value after it.
Keys are case-insensitive.  Here is an example:

     * CD collection
     ** Classic
     *** Goldberg Variations
         :PROPERTIES:
         :Title:     Goldberg Variations
         :Composer:  J.S. Bach
         :Artist:    Glenn Gould
         :Publisher: Deutsche Grammophon
         :NDisks:    1
         :END:

   Depending on the value of ‘org-use-property-inheritance’, a property
set this way is associated either with a single entry, or with the
subtree defined by the entry, see *note Property Inheritance::.

   You may define the allowed values for a particular property ‘Xyz’ by
setting a property ‘Xyz_ALL’.  This special property is _inherited_, so
if you set it in a level 1 entry, it applies to the entire tree.  When
allowed values are defined, setting the corresponding property becomes
easier and is less prone to typing errors.  For the example with the CD
collection, we can pre-define publishers and the number of disks in a
box like this:

     * CD collection
       :PROPERTIES:
       :NDisks_ALL:  1 2 3 4
       :Publisher_ALL: "Deutsche Grammophon" Philips EMI
       :END:

   Properties can be inserted on buffer level.  That means they apply
before the first headline and can be inherited by all entries in a file.
Property blocks defined before first headline needs to be located at the
top of the buffer, allowing only comments above.

   Properties can also be defined using lines like:

     #+PROPERTY: NDisks_ALL 1 2 3 4

   If you want to add to the value of an existing property, append a ‘+’
to the property name.  The following results in the property ‘var’
having the value ‘foo=1 bar=2’.

     #+PROPERTY: var  foo=1
     #+PROPERTY: var+ bar=2

   It is also possible to add to the values of inherited properties.
The following results in the ‘Genres’ property having the value ‘Classic
Baroque’ under the ‘Goldberg Variations’ subtree.

     * CD collection
     ** Classic
         :PROPERTIES:
         :Genres: Classic
         :END:
     *** Goldberg Variations
         :PROPERTIES:
         :Title:     Goldberg Variations
         :Composer:  J.S. Bach
         :Artist:    Glenn Gould
         :Publisher: Deutsche Grammophon
         :NDisks:    1
         :Genres+:   Baroque
         :END:

   Note that a property can only have one entry per drawer.

   Property values set with the global variable ‘org-global-properties’
can be inherited by all entries in all Org files.

   The following commands help to work with properties:

‘M-<TAB>’ (‘pcomplete’)
     After an initial colon in a line, complete property keys.  All keys
     used in the current file are offered as possible completions.

‘C-c C-x p’ (‘org-set-property’)
     Set a property.  This prompts for a property name and a value.  If
     necessary, the property drawer is created as well.

‘C-u M-x org-insert-drawer’
     Insert a property drawer into the current entry.  The drawer is
     inserted early in the entry, but after the lines with planning
     information like deadlines.  If before first headline the drawer is
     inserted at the top of the drawer after any potential comments.

‘C-c C-c’ (‘org-property-action’)
     With point in a property drawer, this executes property commands.

‘C-c C-c s’ (‘org-set-property’)
     Set a property in the current entry.  Both the property and the
     value can be inserted using completion.

‘S-<RIGHT>’ (‘org-property-next-allowed-value’)
‘S-<LEFT>’ (‘org-property-previous-allowed-value’)
     Switch property at point to the next/previous allowed value.

‘C-c C-c d’ (‘org-delete-property’)
     Remove a property from the current entry.

‘C-c C-c D’ (‘org-delete-property-globally’)
     Globally remove a property, from all entries in the current file.

‘C-c C-c c’ (‘org-compute-property-at-point’)
     Compute the property at point, using the operator and scope from
     the nearest column format definition.


File: org.info,  Node: Special Properties,  Next: Property Searches,  Prev: Property Syntax,  Up: Properties and Columns

7.2 Special Properties
======================

Special properties provide an alternative access method to Org mode
features, like the TODO state or the priority of an entry, discussed in
the previous chapters.  This interface exists so that you can include
these states in a column view (see *note Column View::), or to use them
in queries.  The following property names are special and should not be
used as keys in the properties drawer:

‘ALLTAGS’        All tags, including inherited ones.
‘BLOCKED’        ‘t’ if task is currently blocked by children or siblings.
‘CATEGORY’       The category of an entry.
‘CLOCKSUM’       The sum of CLOCK intervals in the subtree.  ‘org-clock-sum’
                 must be run first to compute the values in the current buffer.
‘CLOCKSUM_T’     The sum of CLOCK intervals in the subtree for today.
                 ‘org-clock-sum-today’ must be run first to compute the
                 values in the current buffer.
‘CLOSED’         When was this entry closed?
‘DEADLINE’       The deadline timestamp.
‘FILE’           The filename the entry is located in.
‘ITEM’           The headline of the entry.
‘PRIORITY’       The priority of the entry, a string with a single letter.
‘SCHEDULED’      The scheduling timestamp.
‘TAGS’           The tags defined directly in the headline.
‘TIMESTAMP’      The first keyword-less timestamp in the entry.
‘TIMESTAMP_IA’   The first inactive timestamp in the entry.
‘TODO’           The TODO keyword of the entry.


File: org.info,  Node: Property Searches,  Next: Property Inheritance,  Prev: Special Properties,  Up: Properties and Columns

7.3 Property Searches
=====================

To create sparse trees and special lists with selection based on
properties, the same commands are used as for tag searches (see *note
Tag Searches::).

‘C-c / m’ or ‘C-c \’ (‘org-match-sparse-tree’)
     Create a sparse tree with all matching entries.  With a ‘C-u’
     prefix argument, ignore headlines that are not a TODO line.

‘M-x org-agenda m’ (‘org-tags-view’)
     Create a global list of tag/property matches from all agenda files.

‘M-x org-agenda M’ (‘org-tags-view’)
     Create a global list of tag matches from all agenda files, but
     check only TODO items and force checking of subitems (see the
     option ‘org-tags-match-list-sublevels’).

   The syntax for the search string is described in *note Matching tags
and properties::.

   There is also a special command for creating sparse trees based on a
single property:

‘C-c / p’
     Create a sparse tree based on the value of a property.  This first
     prompts for the name of a property, and then for a value.  A sparse
     tree is created with all entries that define this property with the
     given value.  If you enclose the value in curly braces, it is
     interpreted as a regular expression and matched against the
     property values (see *note Regular Expressions::).


File: org.info,  Node: Property Inheritance,  Next: Column View,  Prev: Property Searches,  Up: Properties and Columns

7.4 Property Inheritance
========================

The outline structure of Org documents lends itself to an inheritance
model of properties: if the parent in a tree has a certain property, the
children can inherit this property.  Org mode does not turn this on by
default, because it can slow down property searches significantly and is
often not needed.  However, if you find inheritance useful, you can turn
it on by setting the variable ‘org-use-property-inheritance’.  It may be
set to ‘t’ to make all properties inherited from the parent, to a list
of properties that should be inherited, or to a regular expression that
matches inherited properties.  If a property has the value ‘nil’, this
is interpreted as an explicit un-define of the property, so that
inheritance search stops at this value and returns ‘nil’.

   Org mode has a few properties for which inheritance is hard-coded, at
least for the special applications for which they are used:

‘COLUMNS’
     The ‘COLUMNS’ property defines the format of column view (see *note
     Column View::).  It is inherited in the sense that the level where
     a ‘COLUMNS’ property is defined is used as the starting point for a
     column view table, independently of the location in the subtree
     from where columns view is turned on.

‘CATEGORY’
     For agenda view, a category set through a ‘CATEGORY’ property
     applies to the entire subtree.

‘ARCHIVE’
     For archiving, the ‘ARCHIVE’ property may define the archive
     location for the entire subtree (see *note Moving subtrees::).

‘LOGGING’
     The ‘LOGGING’ property may define logging settings for an entry or
     a subtree (see *note Tracking TODO state changes::).


File: org.info,  Node: Column View,  Prev: Property Inheritance,  Up: Properties and Columns

7.5 Column View
===============

A great way to view and edit properties in an outline tree is _column
view_.  In column view, each outline node is turned into a table row.
Columns in this table provide access to properties of the entries.  Org
mode implements columns by overlaying a tabular structure over the
headline of each item.  While the headlines have been turned into a
table row, you can still change the visibility of the outline tree.  For
example, you get a compact table by switching to “contents”
view—‘S-<TAB>’ ‘S-<TAB>’, or simply ‘c’ while column view is active—but
you can still open, read, and edit the entry below each headline.  Or,
you can switch to column view after executing a sparse tree command and
in this way get a table only for the selected items.  Column view also
works in agenda buffers (see *note Agenda Views::) where queries have
collected selected items, possibly from a number of files.

* Menu:

* Defining columns::             The COLUMNS format property.
* Using column view::            How to create and use column view.
* Capturing column view::        A dynamic block for column view.


File: org.info,  Node: Defining columns,  Next: Using column view,  Up: Column View

7.5.1 Defining columns
----------------------

Setting up a column view first requires defining the columns.  This is
done by defining a column format line.

* Menu:

* Scope of column definitions::  Where defined, where valid?
* Column attributes::            Appearance and content of a column.


File: org.info,  Node: Scope of column definitions,  Next: Column attributes,  Up: Defining columns

7.5.1.1 Scope of column definitions
...................................

To specify a format that only applies to a specific tree, add a
‘COLUMNS’ property to the top node of that tree, for example:

     ** Top node for columns view
        :PROPERTIES:
        :COLUMNS: %25ITEM %TAGS %PRIORITY %TODO
        :END:

   A ‘COLUMNS’ property within a property drawer before first headline
will apply to the entire file.  As an addition to property drawers,
keywords can also be defined for an entire file using a line like:

     #+COLUMNS: %25ITEM %TAGS %PRIORITY %TODO

   If a ‘COLUMNS’ property is present in an entry, it defines columns
for the entry itself, and for the entire subtree below it.  Since the
column definition is part of the hierarchical structure of the document,
you can define columns on level 1 that are general enough for all
sublevels, and more specific columns further down, when you edit a
deeper part of the tree.


File: org.info,  Node: Column attributes,  Prev: Scope of column definitions,  Up: Defining columns

7.5.1.2 Column attributes
.........................

A column definition sets the attributes of a column.  The general
definition looks like this:

     %[WIDTH]PROPERTY[(TITLE)][{SUMMARY-TYPE}]

Except for the percent sign and the property name, all items are
optional.  The individual parts have the following meaning:

WIDTH
     An integer specifying the width of the column in characters.  If
     omitted, the width is determined automatically.

PROPERTY
     The property that should be edited in this column.  Special
     properties representing meta data are allowed here as well (see
     *note Special Properties::).

TITLE
     The header text for the column.  If omitted, the property name is
     used.

SUMMARY-TYPE
     The summary type.  If specified, the column values for parent nodes
     are computed from the children(1).

     Supported summary types are:

     ‘+’        Sum numbers in this column.
     ‘+;%.1f’   Like ‘+’, but format result with ‘%.1f’.
     ‘$’        Currency, short for ‘+;%.2f’.
     ‘min’      Smallest number in column.
     ‘max’      Largest number.
     ‘mean’     Arithmetic mean of numbers.
     ‘X’        Checkbox status, ‘[X]’ if all children are ‘[X]’.
     ‘X/’       Checkbox status, ‘[n/m]’.
     ‘X%’       Checkbox status, ‘[n%]’.
     ‘:’        Sum times, HH:MM, plain numbers are minutes.
     ‘:min’     Smallest time value in column.
     ‘:max’     Largest time value.
     ‘:mean’    Arithmetic mean of time values.
     ‘@min’     Minimum age(2) (in days/hours/mins/seconds).
     ‘@max’     Maximum age (in days/hours/mins/seconds).
     ‘@mean’    Arithmetic mean of ages (in days/hours/mins/seconds).
     ‘est+’     Add low-high estimates.

     You can also define custom summary types by setting
     ‘org-columns-summary-types’.

   The ‘est+’ summary type requires further explanation.  It is used for
combining estimates, expressed as low-high ranges.  For example, instead
of estimating a particular task will take 5 days, you might estimate it
as 5–6 days if you’re fairly confident you know how much work is
required, or 1–10 days if you do not really know what needs to be done.
Both ranges average at 5.5 days, but the first represents a more
predictable delivery.

   When combining a set of such estimates, simply adding the lows and
highs produces an unrealistically wide result.  Instead, ‘est+’ adds the
statistical mean and variance of the subtasks, generating a final
estimate from the sum.  For example, suppose you had ten tasks, each of
which was estimated at 0.5 to 2 days of work.  Straight addition
produces an estimate of 5 to 20 days, representing what to expect if
everything goes either extremely well or extremely poorly.  In contrast,
‘est+’ estimates the full job more realistically, at 10–15 days.

   Here is an example for a complete columns definition, along with
allowed values(3).

     :COLUMNS:  %25ITEM %9Approved(Approved?){X} %Owner %11Status \
                        %10Time_Estimate{:} %CLOCKSUM %CLOCKSUM_T
     :Owner_ALL:    Tammy Mark Karl Lisa Don
     :Status_ALL:   "In progress" "Not started yet" "Finished" ""
     :Approved_ALL: "[ ]" "[X]"

The first column, ‘%25ITEM’, means the first 25 characters of the item
itself, i.e., of the headline.  You probably always should start the
column definition with the ‘ITEM’ specifier.  The other specifiers
create columns ‘Owner’ with a list of names as allowed values, for
‘Status’ with four different possible values, and for a checkbox field
‘Approved’.  When no width is given after the ‘%’ character, the column
is exactly as wide as it needs to be in order to fully display all
values.  The ‘Approved’ column does have a modified title (‘Approved?’,
with a question mark).  Summaries are created for the ‘Time_Estimate’
column by adding time duration expressions like HH:MM, and for the
‘Approved’ column, by providing an ‘[X]’ status if all children have
been checked.  The ‘CLOCKSUM’ and ‘CLOCKSUM_T’ columns are special, they
lists the sums of CLOCK intervals in the subtree, either for all clocks
or just for today.

   ---------- Footnotes ----------

   (1) If more than one summary type applies to the same property, the
parent values are computed according to the first of them.

   (2) An age can be defined as a duration, using units defined in
‘org-duration-units’, e.g., ‘3d 1h’.  If any value in the column is as
such, the summary is also expressed as a duration.

   (3) Please note that the ‘COLUMNS’ definition must be on a single
line; it is wrapped here only because of formatting constraints.


File: org.info,  Node: Using column view,  Next: Capturing column view,  Prev: Defining columns,  Up: Column View

7.5.2 Using column view
-----------------------

Turning column view on or off
.............................

‘C-c C-x C-c’ (‘org-columns’)
     Turn on column view.  If point is before the first headline in the
     file, column view is turned on for the entire file, using the
     ‘#+COLUMNS’ definition.  If point is somewhere inside the outline,
     this command searches the hierarchy, up from point, for a ‘COLUMNS’
     property that defines a format.  When one is found, the column view
     table is established for the tree starting at the entry that
     contains the ‘COLUMNS’ property.  If no such property is found, the
     format is taken from the ‘#+COLUMNS’ line or from the variable
     ‘org-columns-default-format’, and column view is established for
     the current entry and its subtree.

‘r’ or ‘g’ on a columns view line (‘org-columns-redo’)
     Recreate the column view, to include recent changes made in the
     buffer.

‘C-c C-c’ or ‘q’ on a columns view line (‘org-columns-quit’)
     Exit column view.

Editing values
..............

‘<LEFT>’, ‘<RIGHT>’, ‘<UP>’, ‘<DOWN>’
     Move through the column view from field to field.

‘1..9,0’
     Directly select the Nth allowed value, ‘0’ selects the 10th value.

‘n’ or ‘S-<RIGHT>’ (‘org-columns-next-allowed-value’)
‘p’ or ‘S-<LEFT>’ (‘org-columns-previous-allowed-value’)
     Switch to the next/previous allowed value of the field.  For this,
     you have to have specified allowed values for a property.

‘e’ (‘org-columns-edit-value’)
     Edit the property at point.  For the special properties, this
     invokes the same interface that you normally use to change that
     property.  For example, the tag completion or fast selection
     interface pops up when editing a ‘TAGS’ property.

‘C-c C-c’ (‘org-columns-toggle-or-columns-quit’)
     When there is a checkbox at point, toggle it.  Else exit column
     view.

‘v’ (‘org-columns-show-value’)
     View the full value of this property.  This is useful if the width
     of the column is smaller than that of the value.

‘a’ (‘org-columns-edit-allowed’)
     Edit the list of allowed values for this property.  If the list is
     found in the hierarchy, the modified values is stored there.  If no
     list is found, the new value is stored in the first entry that is
     part of the current column view.

Modifying column view on-the-fly
................................

‘<’ (‘org-columns-narrow’)
‘>’ (‘org-columns-widen’)
     Make the column narrower/wider by one character.

‘S-M-<RIGHT>’ (‘org-columns-new’)
     Insert a new column, to the left of the current column.

‘S-M-<LEFT>’ (‘org-columns-delete’)
     Delete the current column.

‘M-<LEFT>’ (‘org-columns-move-left’)
     Move the current column left.

‘M-<RIGHT>’ (‘org-columns-move-right’)
     Move the current column right.

‘M-<UP>’ (‘org-columns-move-row-up’)
     Move the current row up.

‘M-<DOWN>’ (‘org-columns-move-row-down’)
     Move the current row down.


File: org.info,  Node: Capturing column view,  Prev: Using column view,  Up: Column View

7.5.3 Capturing column view
---------------------------

Since column view is just an overlay over a buffer, it cannot be
exported or printed directly.  If you want to capture a column view, use
a ‘columnview’ dynamic block (see *note Dynamic Blocks::).  The frame of
this block looks like this:

     * The column view
     #+BEGIN: columnview :hlines 1 :id "label"

     #+END:

   This dynamic block has the following parameters:

‘:id’
     This is the most important parameter.  Column view is a feature
     that is often localized to a certain (sub)tree, and the capture
     block might be at a different location in the file.  To identify
     the tree whose view to capture, you can use four values:

     ‘local’
          Use the tree in which the capture block is located.

     ‘global’
          Make a global view, including all headings in the file.

     ‘file:FILENAME’
          Run column view at the top of the FILENAME file.

     ‘LABEL’
          Call column view in the tree that has an ‘ID’ property with
          the value LABEL.  You can use ‘M-x org-id-copy’ to create a
          globally unique ID for the current entry and copy it to the
          kill-ring.

‘:match’
     When set to a string, use this as a tags/property match filter to
     select only a subset of the headlines in the scope set by the ‘:id’
     parameter.

‘:hlines’
     When ‘t’, insert an hline after every line.  When a number N,
     insert an hline before each headline with level ‘<= N’.

‘:vlines’
     When non-‘nil’, force column groups to get vertical lines.

‘:maxlevel’
     When set to a number, do not capture entries below this level.

‘:skip-empty-rows’
     When non-‘nil’, skip rows where the only non-empty specifier of the
     column view is ‘ITEM’.

‘:exclude-tags’
     List of tags to exclude from column view table: entries with these
     tags will be excluded from the column view.

‘:indent’
     When non-‘nil’, indent each ‘ITEM’ field according to its level.

‘:format’
     Specify a column attribute (see *note Column attributes::) for the
     dynamic block.

   The following commands insert or update the dynamic block:

‘org-columns-insert-dblock’
     Insert a dynamic block capturing a column view.  Prompt for the
     scope or ID of the view.

     This command can be invoked by calling
     ‘org-dynamic-block-insert-dblock’ (‘C-c C-x x’) and selecting
     “columnview” (see *note Dynamic Blocks::).

‘C-c C-c’ ‘C-c C-x C-u’ (‘org-dblock-update’)
     Update dynamic block at point.  Point needs to be on the ‘#+BEGIN’
     line of the dynamic block.

‘C-u C-c C-x C-u’ (‘org-update-all-dblocks’)
     Update all dynamic blocks (see *note Dynamic Blocks::).  This is
     useful if you have several clock table blocks, column-capturing
     blocks or other dynamic blocks in a buffer.

   You can add formulas to the column view table and you may add
plotting instructions in front of the table—these survive an update of
the block.  If there is a ‘TBLFM’ keyword after the table, the table is
recalculated automatically after an update.

   An alternative way to capture and process property values into a
table is provided by Eric Schulte’s ‘org-collector.el’, which is a
package in ‘org-contrib’(1).  It provides a general API to collect
properties from entries in a certain scope, and arbitrary Lisp
expressions to process these values before inserting them into a table
or a dynamic block.

   ---------- Footnotes ----------

   (1) Contributed packages are not part of Emacs, but are distributed
with the main distribution of Org—visit <https://orgmode.org>.


File: org.info,  Node: Dates and Times,  Next: Refiling and Archiving,  Prev: Properties and Columns,  Up: Top

8 Dates and Times
*****************

To assist project planning, TODO items can be labeled with a date and/or
a time.  The specially formatted string carrying the date and time
information is called a _timestamp_ in Org mode.  This may be a little
confusing because timestamp is often used as indicating when something
was created or last changed.  However, in Org mode this term is used in
a much wider sense.

   Timestamps can be used to plan appointments, schedule tasks, set
deadlines, track time, and more.  The following sections describe the
timestamp format and tooling that Org mode provides for common use cases
dealing with time and time intervals.

* Menu:

* Timestamps::                   Assigning a time to a tree entry.
* Creating Timestamps::          Commands to insert timestamps.
* Deadlines and Scheduling::     Planning your work.
* Clocking Work Time::           Tracking how long you spend on a task.
* Effort Estimates::             Planning work effort in advance.
* Timers::                       Notes with a running timer.


File: org.info,  Node: Timestamps,  Next: Creating Timestamps,  Up: Dates and Times

8.1 Timestamps
==============

A timestamp is a specification of a date—possibly with a time or time
range—in a special format, either ‘<2003-09-16 Tue>’ or ‘<2003-09-16 Tue
09:39>’ or ‘<2003-09-16 Tue 12:00-12:30>’(1).  A timestamp can appear
anywhere in the headline or body of an Org tree entry.  Its presence
causes entries to be shown on specific dates in the agenda (see *note
Weekly/daily agenda::).  We distinguish:

Plain timestamp; Event; Appointment
     A simple timestamp just assigns a date/time to an item.  This is
     just like writing down an appointment or event in a paper agenda.
     In the agenda display, the headline of an entry associated with a
     plain timestamp is shown exactly on that date.  There can be
     multiple timestamps in an item.

          * Meet Peter at the movies
            <2006-11-01 Wed 19:15>
          * Discussion on climate change
            <2006-11-02 Thu 10:00-12:00>
          * My days off
            <2006-11-03 Fri>
            <2006-11-06 Mon>

Timestamp with repeater interval
     A timestamp may contain a _repeater interval_, indicating that it
     applies not only on the given date, but again and again after a
     certain interval of N hours (h), days (d), weeks (w), months (m),
     or years (y).  The following shows up in the agenda every
     Wednesday:

          * Pick up Sam at school
            <2007-05-16 Wed 12:30 +1w>

Diary-style expression entries

     For more complex date specifications, Org mode supports using the
     special expression diary entries implemented in the *note Emacs
     Calendar package: (emacs)Special Diary Entries.(2).  For example,
     with optional time:

          * 22:00-23:00 The nerd meeting on every 2nd Thursday of the month
            <%%(diary-float t 4 2)>

Time range

     Time range is a timestamp having two time units connected by ‘-’

          * Discussion on climate change
             <2006-11-02 Thu 10:00-12:00>

Time/Date range
     Two timestamps connected by ‘--’ denote a range.  In the agenda,
     the headline is shown on the first and last day of the range, and
     on any dates that are displayed and fall in the range.  The first
     example specifies just the dates of the range while the second
     example specifies a time range for each date.

          ** Meeting in Amsterdam
             <2004-08-23 Mon>--<2004-08-26 Thu>
          ** This weeks committee meetings
             <2004-08-23 Mon 10:00-11:00>--<2004-08-26 Thu 10:00-11:00>

Inactive timestamp
     Just like a plain timestamp, but with square brackets instead of
     angular ones.  These timestamps are inactive in the sense that they
     do _not_ trigger an entry to show up in the agenda.

          * Gillian comes late for the fifth time
            [2006-11-01 Wed]

   ---------- Footnotes ----------

   (1) The Org date format is inspired by the standard ISO 8601
date/time format.  To use an alternative format, see *note Custom time
format::.  The day name is optional when you type the date yourself.
However, any date inserted or modified by Org adds that day name, for
reading convenience.

   (2) When working with the standard diary expression functions, you
need to be very careful with the order of the arguments.  That order
depends evilly on the variable ‘calendar-date-style’.  For example, to
specify a date December 1, 2005, the call might look like ‘(diary-date
12 1 2005)’ or ‘(diary-date 1 12 2005)’ or ‘(diary-date 2005 12 1)’,
depending on the settings.  This has been the source of much confusion.
Org mode users can resort to special versions of these functions, namely
‘org-date’, ‘org-anniversary’, ‘org-cyclic, and ~org-block’.  These work
just like the corresponding ‘diary-’ functions, but with stable ISO
order of arguments (year, month, day) wherever applicable, independent
of the value of ‘calendar-date-style’.


File: org.info,  Node: Creating Timestamps,  Next: Deadlines and Scheduling,  Prev: Timestamps,  Up: Dates and Times

8.2 Creating Timestamps
=======================

For Org mode to recognize timestamps, they need to be in the specific
format.  All commands listed below produce timestamps in the correct
format.

‘C-c .’ (‘org-timestamp’)
     Prompt for a date and insert a corresponding timestamp.  When point
     is at an existing timestamp in the buffer, the command is used to
     modify this timestamp instead of inserting a new one.  When this
     command is used twice in succession, a time range is inserted.

     When called with a prefix argument, use the alternative format
     which contains date and time.  The default time can be rounded to
     multiples of 5 minutes.  See the option
     ‘org-timestamp-rounding-minutes’.

     With two prefix arguments, insert an active timestamp with the
     current time without prompting.

‘C-c !’ (‘org-timestamp-inactive’)
     Like ‘C-c .’, but insert an inactive timestamp that does not cause
     an agenda entry.

‘C-c C-c’
     Normalize timestamp, insert or fix day name if missing or wrong.

‘C-c <’ (‘org-date-from-calendar’)
     Insert a timestamp corresponding to point date in the calendar.

‘C-c >’ (‘org-goto-calendar’)
     Access the Emacs calendar for the current date.  If there is a
     timestamp in the current line, go to the corresponding date
     instead.

‘C-c C-o’ (‘org-open-at-point’)
     Access the agenda for the date given by the timestamp or -range at
     point (see *note Weekly/daily agenda::).

‘S-<LEFT>’ (‘org-timestamp-down-day’)
‘S-<RIGHT>’ (‘org-timestamp-up-day’)
     Change date at point by one day.  These key bindings conflict with
     shift-selection and related modes (see *note Conflicts::).

‘S-<UP>’ (‘org-timestamp-up’)
‘S-<DOWN>’ (‘org-timestamp-down’)
     On the beginning or enclosing bracket of a timestamp, change its
     type.  Within a timestamp, change the item under point.  Point can
     be on a year, month, day, hour or minute.  When the timestamp
     contains a time range like ‘15:30-16:30’, modifying the first time
     also shifts the second, shifting the time block with constant
     length.  To change the length, modify the second time.  Note that
     if point is in a headline and not at a timestamp, these same keys
     modify the priority of an item (see *note Priorities::).  The key
     bindings also conflict with shift-selection and related modes (see
     *note Conflicts::).

‘C-c C-y’ (‘org-evaluate-time-range’)
     Evaluate a time range by computing the difference between start and
     end.  With a prefix argument, insert result after the time range
     (in a table: into the following column).

* Menu:

* The date/time prompt::         How Org mode helps you enter dates and times.
* Custom time format::           Making dates look different.


File: org.info,  Node: The date/time prompt,  Next: Custom time format,  Up: Creating Timestamps

8.2.1 The date/time prompt
--------------------------

When Org mode prompts for a date/time, the default is shown in default
date/time format, and the prompt therefore seems to ask for a specific
format.  But it in fact accepts date/time information in a variety of
formats.  Generally, the information should start at the beginning of
the string.  Org mode finds whatever information is in there and derives
anything you have not specified from the _default date and time_.  The
default is usually the current date and time, but when modifying an
existing timestamp, or when entering the second stamp of a range, it is
taken from the stamp in the buffer.  When filling in information, Org
mode assumes that most of the time you want to enter a date in the
future: if you omit the month/year and the given day/month is _before_
today, it assumes that you mean a future date(1).  If the date has been
automatically shifted into the future, the time prompt shows this with
‘(=>F)’.

   For example, let’s assume that today is *June 13, 2006*.  Here is how
various inputs are interpreted, the items filled in by Org mode are in
*bold*.

‘3-2-5’          ⇒ 2003-02-05
‘2/5/3’          ⇒ 2003-02-05
‘14’             ⇒ *2006*-*06*-14
‘12’             ⇒ *2006*-*07*-12
‘2/5’            ⇒ *2007*-02-05
‘Fri’            ⇒ nearest Friday (default date or later)
‘sep 15’         ⇒ *2006*-09-15
‘feb 15’         ⇒ *2007*-02-15
‘sep 12 9’       ⇒ 2009-09-12
‘12:45’          ⇒ *2006*-*06*-*13* 12:45
‘22 sept 0:34’   ⇒ *2006*-09-22 0:34
‘w4’             ⇒ ISO week for of the current year *2006*
‘2012 w4 fri’    ⇒ Friday of ISO week 4 in 2012
‘2012-w04-5’     ⇒ Same as above

   Furthermore you can specify a relative date by giving, as the _first_
thing in the input: a plus/minus sign, a number and a letter—‘h’, ‘d’,
‘w’, ‘m’ or ‘y’—to indicate a change in hours, days, weeks, months, or
years.  With ‘h’ the date is relative to the current time, with the
other letters and a single plus or minus, the date is relative to today
at 00:00.  With a double plus or minus, it is relative to the default
date.  If instead of a single letter, you use the abbreviation of day
name, the date is the Nth such day, e.g.:

‘+0’      ⇒ today
‘.’       ⇒ today
‘+2h’     ⇒ two hours from now
‘+4d’     ⇒ four days from today
‘+4’      ⇒ same as +4d
‘+2w’     ⇒ two weeks from today
‘++5’     ⇒ five days from default date
‘+2tue’   ⇒ second Tuesday from now

   The function understands English month and weekday abbreviations.  If
you want to use un-abbreviated names and/or other languages, configure
the variables ‘parse-time-months’ and ‘parse-time-weekdays’.

   Not all dates can be represented in a given Emacs implementation.  By
default Org mode forces dates into the compatibility range 1970–2037
which works on all Emacs implementations.  If you want to use dates
outside of this range, read the docstring of the variable
‘org-read-date-force-compatible-dates’.

   You can specify a time range by giving start and end times or by
giving a start time and a duration (in HH:MM format).  Use one or two
dash(es) as the separator in the former case and use ‘+’ as the
separator in the latter case, e.g.:

‘11am-1:15pm’    ⇒ 11:00-13:15
‘11h-13h15’      ⇒ same as above
‘11am--1:15pm’   ⇒ same as above
‘11am+2:15’      ⇒ same as above

   Parallel to the minibuffer prompt, a calendar is popped up(2).  When
you exit the date prompt, either by clicking on a date in the calendar,
or by pressing ‘<RET>’, the date selected in the calendar is combined
with the information entered at the prompt.  You can control the
calendar fully from the minibuffer:

‘<RET>’            Choose date at point in calendar.
‘mouse-1’          Select date by clicking on it.
‘S-<RIGHT>’        One day forward.
‘S-<LEFT>’         One day backward.
‘S-<DOWN>’         One week forward.
‘S-<UP>’           One week backward.
‘M-S-<RIGHT>’      One month forward.
‘M-S-<LEFT>’       One month backward.
‘>’                Scroll calendar forward by one month.
‘<’                Scroll calendar backward by one month.
‘M-v’              Scroll calendar forward by 3 months.
‘C-v’              Scroll calendar backward by 3 months.
‘C-.’              Select today’s date(3)

   The actions of the date/time prompt may seem complex, but I assure
you they will grow on you, and you will start getting annoyed by pretty
much any other way of entering a date/time out there.  To help you
understand what is going on, the current interpretation of your input is
displayed live in the minibuffer(4).

   ---------- Footnotes ----------

   (1) See the variable ‘org-read-date-prefer-future’.  You may set that
variable to the symbol ‘time’ to even make a time before now shift the
date to tomorrow.

   (2) If you do not need/want the calendar, configure the variable
‘org-popup-calendar-for-date-prompt’.

   (3) You can also use the calendar command ‘.’ to jump to today’s
date, but if you are inserting an hour specification for your timestamp,
‘.’ will then insert a dot after the hour.  By contrast, ‘C-.’ will
always jump to today’s date.

   (4) If you find this distracting, turn off the display with
‘org-read-date-display-live’.


File: org.info,  Node: Custom time format,  Prev: The date/time prompt,  Up: Creating Timestamps

8.2.2 Custom time format
------------------------

Org mode uses the standard ISO notation for dates and times as it is
defined in ISO 8601.  If you cannot get used to this and require another
representation of date and time to keep you happy, you can get it by
customizing the variables ‘org-display-custom-times’ and
‘org-timestamp-custom-formats’.

‘C-c C-x C-t’ (‘org-toggle-timestamp-overlays’)
     Toggle the display of custom formats for dates and times.

   Org mode needs the default format for scanning, so the custom
date/time format does not _replace_ the default format.  Instead, it is
put _over_ the default format using text properties.  This has the
following consequences:

   • You cannot place point onto a timestamp anymore, only before or
     after.

   • The ‘S-<UP>’ and ‘S-<DOWN>’ keys can no longer be used to adjust
     each component of a timestamp.  If point is at the beginning of the
     stamp, ‘S-<UP>’ and ‘S-<DOWN>’ change the stamp by one day, just
     like ‘S-<LEFT>’ ‘S-<RIGHT>’.  At the end of the stamp, change the
     time by one minute.

   • If the timestamp contains a range of clock times or a repeater,
     these are not overlaid, but remain in the buffer as they were.

   • When you delete a timestamp character-by-character, it only
     disappears from the buffer after _all_ (invisible) characters
     belonging to the ISO timestamp have been removed.

   • If the custom timestamp format is longer than the default and you
     are using dates in tables, table alignment will be messed up.  If
     the custom format is shorter, things do work as expected.


File: org.info,  Node: Deadlines and Scheduling,  Next: Clocking Work Time,  Prev: Creating Timestamps,  Up: Dates and Times

8.3 Deadlines and Scheduling
============================

A timestamp may be preceded by special keywords to facilitate planning.
Both the timestamp and the keyword have to be positioned immediately
after the task they refer to.

‘DEADLINE’
     Meaning: the task—most likely a TODO item, though not
     necessarily—is supposed to be finished on that date.

     On the deadline date, the task is listed in the agenda.  In
     addition, the agenda for _today_ carries a warning about the
     approaching or missed deadline, starting
     ‘org-deadline-warning-days’ before the due date, and continuing
     until the entry is marked as done.  An example:

          *** TODO write article about the Earth for the Guide
              DEADLINE: <2004-02-29 Sun>
              The editor in charge is [[bbdb:Ford Prefect]]

     You can specify a different lead time for warnings for a specific
     deadlines using the following syntax.  Here is an example with a
     warning period of 5 days ‘DEADLINE: <2004-02-29 Sun -5d>’.  This
     warning is deactivated if the task gets scheduled and you set
     ‘org-agenda-skip-deadline-prewarning-if-scheduled’ to ‘t’.

‘SCHEDULED’
     Meaning: you are planning to start working on that task on the
     given date.

     The headline is listed under the given date(1).  In addition, a
     reminder that the scheduled date has passed is present in the
     compilation for _today_, until the entry is marked as done, i.e.,
     the task is automatically forwarded until completed.

          *** TODO Call Trillian for a date on New Years Eve.
              SCHEDULED: <2004-12-25 Sat>

     If you want to _delay_ the display of this task in the agenda, use
     ‘SCHEDULED: <2004-12-25 Sat -2d>’: the task is still scheduled on
     the 25th but will appear two days later.  In case the task contains
     a repeater, the delay is considered to affect all occurrences; if
     you want the delay to only affect the first scheduled occurrence of
     the task, use ‘--2d’ instead.  See ‘org-scheduled-delay-days’ and
     ‘org-agenda-skip-scheduled-delay-if-deadline’ for details on how to
     control this globally or per agenda.

          Important: Scheduling an item in Org mode should _not_ be
          understood in the same way that we understand _scheduling a
          meeting_.  Setting a date for a meeting is just a simple
          appointment, you should mark this entry with a simple plain
          timestamp, to get this item shown on the date where it
          applies.  This is a frequent misunderstanding by Org users.
          In Org mode, _scheduling_ means setting a date when you want
          to start working on an action item.

   You may use timestamps with repeaters in scheduling and deadline
entries.  Org mode issues early and late warnings based on the
assumption that the timestamp represents the _nearest instance_ of the
repeater.  However, the use of diary expression entries like

     <%%(diary-float t 42)>

in scheduling and deadline timestamps is limited.  Org mode does not
know enough about the internals of each function to issue early and late
warnings.  However, it shows the item on each day where the expression
entry matches.

* Menu:

* Inserting deadline/schedule::  Planning items.
* Repeated tasks::               Items that show up again and again.

   ---------- Footnotes ----------

   (1) It will still be listed on that date after it has been marked as
done.  If you do not like this, set the variable
‘org-agenda-skip-scheduled-if-done’.


File: org.info,  Node: Inserting deadline/schedule,  Next: Repeated tasks,  Up: Deadlines and Scheduling

8.3.1 Inserting deadlines or schedules
--------------------------------------

The following commands allow you to quickly insert a deadline or to
schedule an item:(1)

‘C-c C-d’ (‘org-deadline’)
     Insert ‘DEADLINE’ keyword along with a stamp.  The insertion
     happens in the line directly following the headline.  Remove any
     ‘CLOSED’ timestamp .  When called with a prefix argument, also
     remove any existing deadline from the entry.  Depending on the
     variable ‘org-log-redeadline’, take a note when changing an
     existing deadline(2).

‘C-c C-s’ (‘org-schedule’)
     Insert ‘SCHEDULED’ keyword along with a stamp.  The insertion
     happens in the line directly following the headline.  Remove any
     ‘CLOSED’ timestamp.  When called with a prefix argument, also
     remove the scheduling date from the entry.  Depending on the
     variable ‘org-log-reschedule’, take a note when changing an
     existing scheduling time(3).

‘C-c / d’ (‘org-check-deadlines’)
     Create a sparse tree with all deadlines that are either past-due,
     or which will become due within ‘org-deadline-warning-days’.  With
     ‘C-u’ prefix, show all deadlines in the file.  With a numeric
     prefix, check that many days.  For example, ‘C-1 C-c / d’ shows all
     deadlines due tomorrow.

‘C-c / b’ (‘org-check-before-date’)
     Sparse tree for deadlines and scheduled items before a given date.

‘C-c / a’ (‘org-check-after-date’)
     Sparse tree for deadlines and scheduled items after a given date.

   Note that ‘org-schedule’ and ‘org-deadline’ supports setting the date
by indicating a relative time e.g., ‘+1d’ sets the date to the next day
after today, and ‘--1w’ sets the date to the previous week before any
current timestamp.

   ---------- Footnotes ----------

   (1) The ‘SCHEDULED’ and ‘DEADLINE’ dates are inserted on the line
right below the headline.  Do not put any text between this line and the
headline.

   (2) Note the corresponding ‘STARTUP’ options ‘logredeadline’,
‘lognoteredeadline’, and ‘nologredeadline’.

   (3) Note the corresponding ‘STARTUP’ options ‘logreschedule’,
‘lognotereschedule’, and ‘nologreschedule’.


File: org.info,  Node: Repeated tasks,  Prev: Inserting deadline/schedule,  Up: Deadlines and Scheduling

8.3.2 Repeated tasks
--------------------

Some tasks need to be repeated again and again.  Org mode helps to
organize such tasks using a so-called repeater in a ‘DEADLINE’,
‘SCHEDULED’, or plain timestamps(1).  In the following example:

     ** TODO Pay the rent
        DEADLINE: <2005-10-01 Sat +1m>

the ‘+1m’ is a repeater; the intended interpretation is that the task
has a deadline on ‘<2005-10-01>’ and repeats itself every (one) month
starting from that time.  You can use yearly, monthly, weekly, daily and
hourly repeat cookies by using the ‘y’, ‘m’, ‘w’, ‘d’ and ‘h’ letters.
If you need both a repeater and a special warning period in a deadline
entry, the repeater should come first and the warning period last

     DEADLINE: <2005-10-01 Sat +1m -3d>

   Deadlines and scheduled items produce entries in the agenda when they
are over-due, so it is important to be able to mark such an entry as
done once you have done so.  When you mark a ‘DEADLINE’ or a ‘SCHEDULED’
with the TODO keyword ‘DONE’, it no longer produces entries in the
agenda.  The problem with this is, however, is that then also the _next_
instance of the repeated entry will not be active.  Org mode deals with
this in the following way: when you try to mark such an entry as done,
using ‘C-c C-t’, it shifts the base date of the repeating timestamp by
the repeater interval, and immediately sets the entry state back to
TODO(2). In the example above, setting the state to ‘DONE’ would
actually switch the date like this:

     ** TODO Pay the rent
        DEADLINE: <2005-11-01 Tue +1m>

   To mark a task with a repeater as DONE, use ‘C-- 1 C-c C-t’, i.e.,
‘org-todo’ with a numeric prefix argument of ‘-1’.

   A timestamp(3) is added under the deadline, to keep a record that you
actually acted on the previous instance of this deadline.

   As a consequence of shifting the base date, this entry is no longer
visible in the agenda when checking past dates, but all future instances
will be visible.

   With the ‘+1m’ cookie, the date shift is always exactly one month.
So if you have not paid the rent for three months, marking this entry
DONE still keeps it as an overdue deadline.  Depending on the task, this
may not be the best way to handle it.  For example, if you forgot to
call your father for 3 weeks, it does not make sense to call him 3 times
in a single day to make up for it.  Finally, there are tasks, like
changing batteries, which should always repeat a certain time _after_
the last time you did it.  For these tasks, Org mode has special
repeaters ‘++’ and ‘.+’.  For example:

     ** TODO Call Father
        DEADLINE: <2008-02-10 Sun ++1w>
        Marking this DONE shifts the date by at least one week, but also
        by as many weeks as it takes to get this date into the future.
        However, it stays on a Sunday, even if you called and marked it
        done on Saturday.

     ** TODO Empty kitchen trash
        DEADLINE: <2008-02-08 Fri 20:00 ++1d>
        Marking this DONE shifts the date by at least one day, and also
        by as many days as it takes to get the timestamp into the future.
        Since there is a time in the timestamp, the next deadline in the
        future will be on today's date if you complete the task before
        20:00.

     ** TODO Check the batteries in the smoke detectors
        DEADLINE: <2005-11-01 Tue .+1m>
        Marking this DONE shifts the date to one month after today.

     ** TODO Wash my hands
        DEADLINE: <2019-04-05 08:00 Fri .+1h>
        Marking this DONE shifts the date to exactly one hour from now.

   You may have both scheduling and deadline information for a specific
task.  If the repeater is set for the scheduling information only, you
probably want the repeater to be ignored after the deadline.  If so, set
the variable ‘org-agenda-skip-scheduled-if-deadline-is-shown’ to
‘repeated-after-deadline’.  However, any scheduling information without
a repeater is no longer relevant once the task is done, and thus,
removed upon repeating the task.  If you want both scheduling and
deadline information to repeat after the same interval, set the same
repeater for both timestamps.

   An alternative to using a repeater is to create a number of copies of
a task subtree, with dates shifted in each copy.  The command ‘C-c C-x
c’ was created for this purpose; it is described in *note Structure
Editing::.

   ---------- Footnotes ----------

   (1) Org does not repeat inactive timestamps, however.  See *note
Timestamps::.

   (2) In fact, the target state is taken from, in this sequence, the
‘REPEAT_TO_STATE’ property, the variable ‘org-todo-repeat-to-state’ if
it is a string, the previous TODO state if ‘org-todo-repeat-to-state’ is
‘t’, or the first state of the TODO state sequence.

   (3) You can change this using the option ‘org-log-repeat’, or the
‘STARTUP’ options ‘logrepeat’, ‘lognoterepeat’, and ‘nologrepeat’.  With
‘lognoterepeat’, you will also be prompted for a note.


File: org.info,  Node: Clocking Work Time,  Next: Effort Estimates,  Prev: Deadlines and Scheduling,  Up: Dates and Times

8.4 Clocking Work Time
======================

Org mode allows you to clock the time you spend on specific tasks in a
project.  When you start working on an item, you can start the clock.
When you stop working on that task, or when you mark the task done, the
clock is stopped and the corresponding time interval is recorded.  It
also computes the total time spent on each subtree(1) of a project.  And
it remembers a history or tasks recently clocked, so that you can jump
quickly between a number of tasks absorbing your time.

   To save the clock history across Emacs sessions, use:

     (setq org-clock-persist 'history)
     (org-clock-persistence-insinuate)

   When you clock into a new task after resuming Emacs, the incomplete
clock(2) is retrieved (see *note Resolving idle time (1)::) and you are
prompted about what to do with it.

* Menu:

* Clocking commands::            Starting and stopping a clock.
* The clock table::              Detailed reports.
* Resolving idle time::          Resolving time when you’ve been idle.

   ---------- Footnotes ----------

   (1) Clocking only works if all headings are indented with less than
30 stars.  This is a hard-coded limitation of ‘lmax’ in ‘org-clock-sum’.

   (2) To resume the clock under the assumption that you have worked on
this task while outside Emacs, use ‘(setq org-clock-persist t)’.


File: org.info,  Node: Clocking commands,  Next: The clock table,  Up: Clocking Work Time

8.4.1 Clocking commands
-----------------------

‘C-c C-x C-i’ (‘org-clock-in’)
     Start the clock on the current item (clock-in).  This inserts the
     ‘CLOCK’ keyword together with a timestamp.  If this is not the
     first clocking of this item, the multiple ‘CLOCK’ lines are wrapped
     into a ‘LOGBOOK’ drawer (see also the variable
     ‘org-clock-into-drawer’).  You can also overrule the setting of
     this variable for a subtree by setting a ‘CLOCK_INTO_DRAWER’ or
     ‘LOG_INTO_DRAWER’ property.  When called with a ‘C-u’ prefix
     argument, select the task from a list of recently clocked tasks.
     With two ‘C-u C-u’ prefixes, clock into the task at point and mark
     it as the default task; the default task is always be available
     with letter ‘d’ when selecting a clocking task.  With three ‘C-u
     C-u C-u’ prefixes, force continuous clocking by starting the clock
     when the last clock stopped.

     While the clock is running, Org shows the current clocking time in
     the mode line, along with the title of the task.  The clock time
     shown is all time ever clocked for this task and its children.  If
     the task has an effort estimate (see *note Effort Estimates::), the
     mode line displays the current clocking time against it(1).  If the
     task is a repeating one (see *note Repeated tasks::), show only the
     time since the last reset of the task(2).  You can exercise more
     control over show time with the ‘CLOCK_MODELINE_TOTAL’ property.
     It may have the values ‘current’ to show only the current clocking
     instance, ‘today’ to show all time clocked on this tasks today—see
     also the variable ‘org-extend-today-until’, ‘all’ to include all
     time, or ‘auto’ which is the default(3).  Clicking with ‘mouse-1’
     onto the mode line entry pops up a menu with clocking options.

‘C-c C-x C-o’ (‘org-clock-out’)
     Stop the clock (clock-out).  This inserts another timestamp at the
     same location where the clock was last started.  It also directly
     computes the resulting time in inserts it after the time range as
     ‘=>HH:MM’.  See the variable ‘org-log-note-clock-out’ for the
     possibility to record an additional note together with the
     clock-out timestamp(4).

‘C-c C-x C-x’ (‘org-clock-in-last’)
     Re-clock the last clocked task.  With one ‘C-u’ prefix argument,
     select the task from the clock history.  With two ‘C-u’ prefixes,
     force continuous clocking by starting the clock when the last clock
     stopped.

‘C-c C-x C-e’ (‘org-clock-modify-effort-estimate’)
     Update the effort estimate for the current clock task.

‘C-c C-c’ or ‘C-c C-y’ (‘org-evaluate-time-range’)
     Recompute the time interval after changing one of the timestamps.
     This is only necessary if you edit the timestamps directly.  If you
     change them with ‘S-<cursor>’ keys, the update is automatic.

‘C-S-<UP>’ (‘org-clock-timestamps-up’)
‘C-S-<DOWN>’ (‘org-clock-timestamps-down’)
     On CLOCK log lines, increase/decrease both timestamps so that the
     clock duration keeps the same value.

‘S-M-<UP>’ (‘org-timestamp-up’)
‘S-M-<DOWN>’ (‘org-timestamp-down’)
     On ‘CLOCK’ log lines, increase/decrease the timestamp at point and
     the one of the previous, or the next, clock timestamp by the same
     duration.  For example, if you hit ‘S-M-<UP>’ to increase a
     clocked-out timestamp by five minutes, then the clocked-in
     timestamp of the next clock is increased by five minutes.

     Only ‘CLOCK’ logs created during current Emacs session are
     considered when adjusting next/previous timestamp.

‘C-c C-t’ (‘org-todo’)
     Changing the TODO state of an item to DONE automatically stops the
     clock if it is running in this same item.

‘C-c C-x C-q’ (‘org-clock-cancel’)
     Cancel the current clock.  This is useful if a clock was started by
     mistake, or if you ended up working on something else.

‘C-c C-x C-j’ (‘org-clock-goto’)
     Jump to the headline of the currently clocked in task.  With a
     ‘C-u’ prefix argument, select the target task from a list of
     recently clocked tasks.

‘C-c C-x C-d’ (‘org-clock-display’)
     Display time summaries for each subtree in the current buffer.
     This puts overlays at the end of each headline, showing the total
     time recorded under that heading, including the time of any
     subheadings.  You can use visibility cycling to study the tree, but
     the overlays disappear when you change the buffer (see variable
     ‘org-remove-highlights-with-change’) or press ‘C-c C-c’.

   The ‘l’ key may be used in the agenda (see *note Weekly/daily
agenda::) to show which tasks have been worked on or closed during a
day.

   *Important:* note that both ‘org-clock-out’ and ‘org-clock-in-last’
can have a global keybinding and do not modify the window disposition.

   ---------- Footnotes ----------

   (1) To add an effort estimate “on the fly”, hook a function doing
this to ‘org-clock-in-prepare-hook’.

   (2) The last reset of the task is recorded by the ‘LAST_REPEAT’
property.

   (3) See also the variable ‘org-clock-mode-line-total’.

   (4) The corresponding in-buffer setting is: ‘#+STARTUP:
lognoteclock-out’.


File: org.info,  Node: The clock table,  Next: Resolving idle time,  Prev: Clocking commands,  Up: Clocking Work Time

8.4.2 The clock table
---------------------

Org mode can produce quite complex reports based on the time clocking
information.  Such a report is called a _clock table_, because it is
formatted as one or several Org tables.

‘org-clock-report’
     Insert or update a clock table.  When called with a prefix
     argument, jump to the first clock table in the current document and
     update it.  The clock table includes archived trees.

     This command can be invoked by calling
     ‘org-dynamic-block-insert-dblock’ (‘C-c C-x x’) and selecting
     “clocktable” (see *note Dynamic Blocks::).

‘C-c C-c’ or ‘C-c C-x C-u’ (‘org-dblock-update’)
     Update dynamic block at point.  Point needs to be in the ‘BEGIN’
     line of the dynamic block.

‘C-u C-c C-x C-u’
     Update all dynamic blocks (see *note Dynamic Blocks::).  This is
     useful if you have several clock table blocks in a buffer.

‘S-<LEFT>’
‘S-<RIGHT>’ (‘org-clocktable-try-shift’)
     Shift the current ‘:block’ interval and update the table.  Point
     needs to be in the ‘#+BEGIN: clocktable’ line for this command.  If
     ‘:block’ is ‘today’, it is shifted to ‘today-1’, etc.

   Here is an example of the frame for a clock table as it is inserted
into the buffer by ‘org-clock-report’:

     #+BEGIN: clocktable :maxlevel 2 :emphasize nil :scope file
     #+END:

   The ‘#+BEGIN’ line contains options to define the scope, structure,
and formatting of the report.  Defaults for all these options can be
configured in the variable ‘org-clocktable-defaults’.

   First there are options that determine which clock entries are to be
selected:

‘:maxlevel’
     Maximum level depth to which times are listed in the table.  Clocks
     at deeper levels are summed into the upper level.

‘:scope’
     The scope to consider.  This can be any of the following:

     ‘nil’                    the current buffer or narrowed region
     ‘file’                   the full current buffer
     ‘subtree’                the subtree where the clocktable is located
     ‘treeN’                  the surrounding level N tree, for example ‘tree3’
     ‘tree’                   the surrounding level 1 tree
     ‘agenda’                 all agenda files
     ‘("file" ...)’           scan these files
     ‘FUNCTION’               scan files returned by calling FUNCTION with no argument
     ‘file-with-archives’     current file and its archives
     ‘agenda-with-archives’   all agenda files, including archives

‘:block’
     The time block to consider.  This block is specified either
     absolutely, or relative to the current time and may be any of these
     formats:

     ‘2007-12-31’                                                                                                    New year eve 2007
     ‘2007-12’                                                                                                       December 2007
     ‘2007-W50’                                                                                                      ISO-week 50 in 2007
     ‘2007-Q2’                                                                                                       2nd quarter in 2007
     ‘2007’                                                                                                          the year 2007
     ‘today’, ‘yesterday’, ‘today-N’                                                                                 a relative day
     ‘thisweek’, ‘lastweek’, ‘thisweek-N’                                                                            a relative week
     ‘thismonth’, ‘lastmonth’, ‘thismonth-N’                                                                         a relative month
     ‘thisyear’, ‘lastyear’, ‘thisyear-N’                                                                            a relative year
     ‘untilnow’(1)                                                                                                   all clocked time ever

     When this option is not set, Org falls back to the value in
     ‘org-clock-display-default-range’, which defaults to the current
     year.

     Use ‘S-<LEFT>’ or ‘S-<RIGHT>’ to shift the time interval.

‘:tstart’
     A time string specifying when to start considering times.  Relative
     times like ‘"<-2w>"’ can also be used.  See *note Matching tags and
     properties:: for relative time syntax.

‘:tend’
     A time string specifying when to stop considering times.  Relative
     times like ‘"<now>"’ can also be used.  See *note Matching tags and
     properties:: for relative time syntax.

‘:wstart’
     The starting day of the week.  The default is 1 for Monday.

‘:mstart’
     The starting day of the month.  The default is 1 for the first.

‘:step’
     Set to ‘day’, ‘week’, ‘semimonth’, ‘month’, ‘quarter’, or ‘year’ to
     split the table into chunks.  To use this, either ‘:block’, or
     ‘:tstart’ and ‘:tend’ are required.

‘:stepskip0’
     When non-‘nil’, do not show steps that have zero time.

‘:fileskip0’
     When non-‘nil’, do not show table sections from files which did not
     contribute.

‘:match’
     A tags match to select entries that should contribute.  See *note
     Matching tags and properties:: for the match syntax.

   Then there are options that determine the formatting of the table.
There options are interpreted by the function
‘org-clocktable-write-default’, but you can specify your own function
using the ‘:formatter’ parameter.

‘:emphasize’
     When non-‘nil’, emphasize level one and level two items.

‘:lang’
     Language(2) to use for descriptive cells like “Task”.

‘:link’
     Link the item headlines in the table to their origins.

‘:narrow’
     An integer to limit the width of the headline column in the Org
     table.  If you write it like ‘50!’, then the headline is also
     shortened in export.

‘:indent’
     Indent each headline field according to its level.

‘:filetitle’
     Show title in the file column if the file has a ‘#+title’.

‘:hidefiles’
     Hide the file column when multiple files are used to produce the
     table.

‘:tcolumns’
     Number of columns to be used for times.  If this is smaller than
     ‘:maxlevel’, lower levels are lumped into one column.

‘:level’
     Should a level number column be included?

‘:sort’
     A cons cell containing the column to sort and a sorting type.
     E.g., ‘:sort (1 . ?a)’ sorts the first column alphabetically.

‘:compact’
     Abbreviation for ‘:level nil :indent t :narrow 40! :tcolumns 1’.
     All are overwritten except if there is an explicit ‘:narrow’.

‘:timestamp’
     A timestamp for the entry, when available.  Look for ‘SCHEDULED’,
     ‘DEADLINE’, ‘TIMESTAMP’ and ‘TIMESTAMP_IA’ special properties (see
     *note Special Properties::), in this order.

‘:tags’
     When this flag is non-‘nil’, show the headline’s tags.

‘:properties’
     List of properties shown in the table.  Each property gets its own
     column.

‘:inherit-props’
     When this flag is non-‘nil’, the values for ‘:properties’ are
     inherited.

‘:formula’
     Content of a ‘TBLFM’ keyword to be added and evaluated.  As a
     special case, ‘:formula %’ adds a column with % time.  If you do
     not specify a formula here, any existing formula below the clock
     table survives updates and is evaluated.

‘:formatter’
     A function to format clock data and insert it into the buffer.

   To get a clock summary of the current level 1 tree, for the current
day, you could write:

     #+BEGIN: clocktable :maxlevel 2 :block today :scope tree1 :link t
     #+END:

To use a specific time range you could write(3)

     #+BEGIN: clocktable :tstart "<2006-08-10 Thu 10:00>"
                         :tend "<2006-08-10 Thu 12:00>"
     #+END:

A range starting a week ago and ending right now could be written as

     #+BEGIN: clocktable :tstart "<-1w>" :tend "<now>"
     #+END:

A summary of the current subtree with % times would be

     #+BEGIN: clocktable :scope subtree :link t :formula %
     #+END:

A horizontally compact representation of everything clocked during last
week would be

     #+BEGIN: clocktable :scope agenda :block lastweek :compact t
     #+END:

   ---------- Footnotes ----------

   (1) When using ‘:step’, ‘untilnow’ starts from the beginning of 2003,
not the beginning of time.

   (2) Language terms can be set through the variable
‘org-clock-clocktable-language-setup’.

   (3) Note that all parameters must be specified in a single line—the
line is broken here only to fit it into the manual.


File: org.info,  Node: Resolving idle time,  Prev: The clock table,  Up: Clocking Work Time

8.4.3 Resolving idle time and continuous clocking
-------------------------------------------------

Resolving idle time
...................

If you clock in on a work item, and then walk away from your
computer—perhaps to take a phone call—you often need to “resolve” the
time you were away by either subtracting it from the current clock, or
applying it to another one.

   By customizing the variable ‘org-clock-idle-time’ to some integer,
such as 10 or 15, Emacs can alert you when you get back to your computer
after being idle for that many minutes(1), and ask what you want to do
with the idle time.  There will be a question waiting for you when you
get back, indicating how much idle time has passed constantly updated
with the current amount, as well as a set of choices to correct the
discrepancy:

‘k’
     To keep some or all of the minutes and stay clocked in, press ‘k’.
     Org asks how many of the minutes to keep.  Press ‘<RET>’ to keep
     them all, effectively changing nothing, or enter a number to keep
     that many minutes.

‘K’
     If you use the shift key and press ‘K’, it keeps however many
     minutes you request and then immediately clock out of that task.
     If you keep all of the minutes, this is the same as just clocking
     out of the current task.

‘s’
     To keep none of the minutes, use ‘s’ to subtract all the away time
     from the clock, and then check back in from the moment you
     returned.

‘S’
     To keep none of the minutes and just clock out at the start of the
     away time, use the shift key and press ‘S’.  Remember that using
     shift always leave you clocked out, no matter which option you
     choose.

‘C’
     To cancel the clock altogether, use ‘C’.  Note that if instead of
     canceling you subtract the away time, and the resulting clock
     amount is less than a minute, the clock is still canceled rather
     than cluttering up the log with an empty entry.

   What if you subtracted those away minutes from the current clock, and
now want to apply them to a new clock?  Simply clock in to any task
immediately after the subtraction.  Org will notice that you have
subtracted time “on the books”, so to speak, and will ask if you want to
apply those minutes to the next task you clock in on.

   There is one other instance when this clock resolution magic occurs.
Say you were clocked in and hacking away, and suddenly your cat chased a
mouse who scared a hamster that crashed into your UPS’s power button!
You suddenly lose all your buffers, but thanks to auto-save you still
have your recent Org mode changes, including your last clock in.

   If you restart Emacs and clock into any task, Org will notice that
you have a dangling clock which was never clocked out from your last
session.  Using that clock’s starting time as the beginning of the
unaccounted-for period, Org will ask how you want to resolve that time.
The logic and behavior is identical to dealing with away time due to
idleness; it is just happening due to a recovery event rather than a set
amount of idle time.

   You can also check all the files visited by your Org agenda for
dangling clocks at any time using ‘M-x org-resolve-clocks <RET>’ (or
‘C-c C-x C-z’).

Continuous clocking
...................

You may want to start clocking from the time when you clocked out the
previous task.  To enable this systematically, set
‘org-clock-continuously’ to non-‘nil’.  Each time you clock in, Org
retrieves the clock-out time of the last clocked entry for this session,
and start the new clock from there.

   If you only want this from time to time, use three universal prefix
arguments with ‘org-clock-in’ and two ‘C-u C-u’ with
‘org-clock-in-last’.

Clocking out automatically after some idle time
...............................................

When you often forget to clock out before being idle and you don’t want
to manually set the clocking time to take into account, you can set
‘org-clock-auto-clockout-timer’ to a number of seconds and add
‘(org-clock-auto-clockout-insinuate)’ to your ‘.emacs’ file.

   When the clock is running and Emacs is idle for more than this number
of seconds, the clock will be clocked out automatically.

   Use ‘M-x org-clock-toggle-auto-clockout RET’ to temporarily turn this
on or off.

   ---------- Footnotes ----------

   (1) On computers using macOS, idleness is based on actual user
idleness, not just Emacs’ idle time.  For X11, you can install a utility
program ‘x11idle.c’, available in the ‘org-contrib/’ repository, or
install the xprintidle package and set it to the variable
‘org-clock-x11idle-program-name’ if you are running Debian, to get the
same general treatment of idleness.  On other systems, idle time refers
to Emacs idle time only.


File: org.info,  Node: Effort Estimates,  Next: Timers,  Prev: Clocking Work Time,  Up: Dates and Times

8.5 Effort Estimates
====================

If you want to plan your work in a very detailed way, or if you need to
produce offers with quotations of the estimated work effort, you may
want to assign effort estimates to entries.  If you are also clocking
your work, you may later want to compare the planned effort with the
actual working time, a great way to improve planning estimates.

   Effort estimates are stored in a special property ‘EFFORT’.  Multiple
formats are supported, such as ‘3:12’, ‘1:23:45’, or ‘1d3h5min’; see the
file ‘org-duration.el’ for more detailed information about the format.

   You can set the effort for an entry with the following commands:

‘C-c C-x e’ (‘org-set-effort’)
     Set the effort estimate for the current entry.  With a prefix
     argument, set it to the next allowed value—see below.  This command
     is also accessible from the agenda with the ‘e’ key.

‘C-c C-x C-e’ (‘org-clock-modify-effort-estimate’)
     Modify the effort estimate of the item currently being clocked.

   Clearly the best way to work with effort estimates is through column
view (see *note Column View::).  You should start by setting up discrete
values for effort estimates, and a ‘COLUMNS’ format that displays these
values together with clock sums—if you want to clock your time.  For a
specific buffer you can use:

     #+PROPERTY: Effort_ALL 0 0:10 0:30 1:00 2:00 3:00 4:00 5:00 6:00 7:00
     #+COLUMNS: %40ITEM(Task) %17Effort(Estimated Effort){:} %CLOCKSUM

or, even better, you can set up these values globally by customizing the
variables ‘org-global-properties’ and ‘org-columns-default-format’.  In
particular if you want to use this setup also in the agenda, a global
setup may be advised.

   The way to assign estimates to individual items is then to switch to
column mode, and to use ‘S-<RIGHT>’ and ‘S-<LEFT>’ to change the value.
The values you enter are immediately summed up in the hierarchy.  In the
column next to it, any clocked time is displayed.

   If you switch to column view in the daily/weekly agenda, the effort
column summarizes the estimated work effort for each day(1), and you can
use this to find space in your schedule.  To get an overview of the
entire part of the day that is committed, you can set the option
‘org-agenda-columns-add-appointments-to-effort-sum’.  The appointments
on a day that take place over a specified time interval are then also
added to the load estimate of the day.

   Effort estimates can be used in secondary agenda filtering that is
triggered with the ‘/’ key in the agenda (see *note Agenda Commands::).
If you have these estimates defined consistently, two or three key
presses narrow down the list to stuff that fits into an available time
slot.

   ---------- Footnotes ----------

   (1) Please note the pitfalls of summing hierarchical data in a flat
list (see *note Agenda Column View::).


File: org.info,  Node: Timers,  Prev: Effort Estimates,  Up: Dates and Times

8.6 Taking Notes with a Relative Timer
======================================

Org provides two types of timers.  There is a relative timer that counts
up, which can be useful when taking notes during, for example, a meeting
or a video viewing.  There is also a countdown timer.

   The relative and countdown are started with separate commands.

‘C-c C-x 0’ (‘org-timer-start’)
     Start or reset the relative timer.  By default, the timer is set to
     0.  When called with a ‘C-u’ prefix, prompt the user for a starting
     offset.  The prompt will default to a timer string at point (if
     any), providing a convenient way to restart taking notes after a
     break in the process.  When called with a double prefix argument
     ‘C-u C-u’, change all timer strings in the active region by a
     certain amount.  This can be used to fix timer strings if the timer
     was not started at exactly the right moment.

‘C-c C-x ;’ (‘org-timer-set-timer’)
     Start a countdown timer.  The user is prompted for a duration.
     ‘org-timer-default-timer’ sets the default countdown value.  Giving
     a numeric prefix argument overrides this default value.  This
     command is available as ‘;’ in agenda buffers.

   Once started, relative and countdown timers are controlled with the
same commands.

‘C-c C-x .’ (‘org-timer’)
     Insert a relative time into the buffer.  The first time you use
     this, the timer starts.  Using a prefix argument restarts it.

‘C-c C-x -’ (‘org-timer-item’)
     Insert a description list item with the current relative time.
     With a prefix argument, first reset the timer to 0.

‘M-<RET>’ (‘org-insert-heading’)
     Once the timer list is started, you can also use ‘M-<RET>’ to
     insert new timer items.

‘C-c C-x ,’ (‘org-timer-pause-or-continue’)
     Pause the timer, or continue it if it is already paused.

‘C-c C-x _’ (‘org-timer-stop’)
     Stop the timer.  After this, you can only start a new timer, not
     continue the old one.  This command also removes the timer from the
     mode line.


File: org.info,  Node: Refiling and Archiving,  Next: Capture and Attachments,  Prev: Dates and Times,  Up: Top

9 Refiling and Archiving
************************

Once information is in the system, it may need to be moved around.  Org
provides Refile, Copy and Archive commands for this.  Refile and Copy
helps with moving and copying outlines.  Archiving helps to keep the
system compact and fast.

* Menu:

* Refile and Copy::              Moving/copying a tree from one place to another.
* Archiving::                    What to do with finished products.


File: org.info,  Node: Refile and Copy,  Next: Archiving,  Up: Refiling and Archiving

9.1 Refile and Copy
===================

When reviewing the captured data, you may want to refile or to copy some
of the entries into a different list, for example into a project.
Cutting, finding the right location, and then pasting the note is
cumbersome.  To simplify this process, you can use the following special
command:

‘C-c C-w’ (‘org-refile’)
     Refile the entry or region at point.  This command offers possible
     locations for refiling the entry and lets you select one with
     completion.  The item (or all items in the region) is filed below
     the target heading as a subitem.  Depending on
     ‘org-reverse-note-order’, it is either the first or last subitem.

     By default, all level 1 headlines in the current buffer are
     considered to be targets, but you can have more complex definitions
     across a number of files.  See the variable ‘org-refile-targets’
     for details.  If you would like to select a location via a
     file-path-like completion along the outline path, see the variables
     ‘org-refile-use-outline-path’ and
     ‘org-outline-path-complete-in-steps’.  If you would like to be able
     to create new nodes as new parents for refiling on the fly, check
     the variable ‘org-refile-allow-creating-parent-nodes’.  When the
     variable ‘org-log-refile’(1) is set, a timestamp or a note is
     recorded whenever an entry is refiled.

‘C-u C-c C-w’
     Use the refile interface to jump to a heading.

‘C-u C-u C-c C-w’ (‘org-refile-goto-last-stored’)
     Jump to the location where ‘org-refile’ last moved a tree to.

‘C-2 C-c C-w’
     Refile as the child of the item currently being clocked.

‘C-3 C-c C-w’
     Refile and keep the entry in place.  Also see ‘org-refile-keep’ to
     make this the default behavior, and beware that this may result in
     duplicated ‘ID’ properties.

‘C-0 C-c C-w’ or ‘C-u C-u C-u C-c C-w’ (‘org-refile-cache-clear’)
     Clear the target cache.  Caching of refile targets can be turned on
     by setting ‘org-refile-use-cache’.  To make the command see new
     possible targets, you have to clear the cache with this command.

‘C-c M-w’ (‘org-refile-copy’)
     Copying works like refiling, except that the original note is not
     deleted.

‘C-c C-M-w’ (‘org-refile-reverse’)
     Works like refiling, except that it temporarily toggles how the
     value of ‘org-reverse-note-order’ applies to the current buffer.
     So if ‘org-refile’ would append the entry as the last entry under
     the target header, ‘org-refile-reverse’ will prepend it as the
     first entry, and vice-versa.

   ---------- Footnotes ----------

   (1) Note the corresponding ‘STARTUP’ options ‘logrefile’,
‘lognoterefile’, and ‘nologrefile’.


File: org.info,  Node: Archiving,  Prev: Refile and Copy,  Up: Refiling and Archiving

9.2 Archiving
=============

When a project represented by a (sub)tree is finished, you may want to
move the tree out of the way and to stop it from contributing to the
agenda.  Archiving is important to keep your working files compact and
global searches like the construction of agenda views fast.

‘C-c C-x C-a’ (‘org-archive-subtree-default’)
     Archive the current entry using the command specified in the
     variable ‘org-archive-default-command’.

* Menu:

* Moving subtrees::              Moving a tree to an archive file.
* Internal archiving::           Switch off a tree but keep it in the file.


File: org.info,  Node: Moving subtrees,  Next: Internal archiving,  Up: Archiving

9.2.1 Moving a tree to an archive file
--------------------------------------

The most common archiving action is to move a project tree to another
file, the archive file.

‘C-c C-x C-s’ or short ‘C-c $’ (‘org-archive-subtree’)
     Archive the subtree starting at point position to the location
     given by ‘org-archive-location’.

‘C-u C-c C-x C-s’
     Check if any direct children of the current headline could be moved
     to the archive.  To do this, check each subtree for open TODO
     entries.  If none is found, the command offers to move it to the
     archive location.  If point is _not_ on a headline when this
     command is invoked, check level 1 trees.

‘C-u C-u C-c C-x C-s’
     As above, but check subtree for timestamps instead of TODO entries.
     The command offers to archive the subtree if it _does_ contain a
     timestamp, and that timestamp is in the past.

   The default archive location is a file in the same directory as the
current file, with the name derived by appending ‘_archive’ to the
current file name.  You can also choose what heading to file archived
items under, with the possibility to add them to a datetree in a file.
For information and examples on how to specify the file and the heading,
see the documentation string of the variable ‘org-archive-location’.

   There is also an in-buffer option for setting this variable, for
example:

     #+ARCHIVE: %s_done::

   If you would like to have a special archive location for a single
entry or a (sub)tree, give the entry an ‘ARCHIVE’ property with the
location as the value (see *note Properties and Columns::).

   When a subtree is moved, it receives a number of special properties
that record context information like the file from where the entry came,
its outline path the archiving time etc.  Configure the variable
‘org-archive-save-context-info’ to adjust the amount of information
added.

   When ‘org-archive-subtree-save-file-p’ is non-‘nil’, save the target
archive buffer.


File: org.info,  Node: Internal archiving,  Prev: Moving subtrees,  Up: Archiving

9.2.2 Internal archiving
------------------------

If you want to just switch off—for agenda views—certain subtrees without
moving them to a different file, you can use the ‘ARCHIVE’ tag.

   A headline that is marked with the ‘ARCHIVE’ tag (see *note Tags::)
stays at its location in the outline tree, but behaves in the following
way:

   • It does not open when you attempt to do so with a visibility
     cycling command (see *note Visibility Cycling::).  You can force
     cycling archived subtrees with ‘C-c C-<TAB>’, or by setting the
     option ‘org-cycle-open-archived-trees’.  Also normal outline
     commands, like ‘org-show-all’, open archived subtrees.

   • During sparse tree construction (see *note Sparse Trees::), matches
     in archived subtrees are not exposed, unless you configure the
     option ‘org-sparse-tree-open-archived-trees’.

   • During agenda view construction (see *note Agenda Views::), the
     content of archived trees is ignored unless you configure the
     option ‘org-agenda-skip-archived-trees’, in which case these trees
     are always included.  In the agenda you can press ‘v a’ to get
     archives temporarily included.

   • Archived trees are not exported (see *note Exporting::), only the
     headline is.  Configure the details using the variable
     ‘org-export-with-archived-trees’.

   • Archived trees are excluded from column view unless the variable
     ‘org-columns-skip-archived-trees’ is configured to ‘nil’.

   The following commands help manage the ‘ARCHIVE’ tag:

‘C-c C-x a’ (‘org-toggle-archive-tag’)
     Toggle the archive tag for the current headline.  When the tag is
     set, the headline changes to a shadowed face, and the subtree below
     it is hidden.

‘C-u C-c C-x a’
     Check if any direct children of the current headline should be
     archived.  To do this, check each subtree for open TODO entries.
     If none is found, the command offers to set the ‘ARCHIVE’ tag for
     the child.  If point is _not_ on a headline when this command is
     invoked, check the level 1 trees.

‘C-c C-<TAB>’ (‘org-cycle-force-archived’)
     Cycle a tree even if it is tagged with ‘ARCHIVE’.

‘C-c C-x A’ (‘org-archive-to-archive-sibling’)
     Move the current entry to the _Archive Sibling_.  This is a sibling
     of the entry with the heading ‘Archive’ and the archive tag.  The
     entry becomes a child of that sibling and in this way retains a lot
     of its original context, including inherited tags and approximate
     position in the outline.

