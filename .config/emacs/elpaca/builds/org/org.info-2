This is org.info, produced by makeinfo version 7.0.3 from org.texi.

This manual is for Org version 9.7.

   Copyright © 2004–2023 Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover Texts
     being “A GNU Manual,” and with the Back-Cover Texts as in (a)
     below.  A copy of the license is included in the section entitled
     “GNU Free Documentation License.”

     (a) The FSF’s Back-Cover Text is: “You have the freedom to copy and
     modify this GNU manual.”

INFO-DIR-SECTION Emacs editing modes
START-INFO-DIR-ENTRY
* Org Mode: (org).      Outline-based notes management and organizer.
END-INFO-DIR-ENTRY


File: org.info,  Node: Capture and Attachments,  Next: Agenda Views,  Prev: Refiling and Archiving,  Up: Top

10 Capture and Attachments
**************************

An important part of any organization system is the ability to quickly
capture new ideas and tasks, and to associate reference material with
them.  Org does this using a process called _capture_.  It also can
store files related to a task (_attachments_) in a special directory.
Finally, it can parse RSS feeds for information.  To learn how to let
external programs (for example a web browser) trigger Org to capture
material, see *note Protocols::.

* Menu:

* Capture::                      Capturing new stuff.
* Attachments::                  Attach files to outlines.
* RSS Feeds::                    Getting input from RSS feeds.


File: org.info,  Node: Capture,  Next: Attachments,  Up: Capture and Attachments

10.1 Capture
============

Capture lets you quickly store notes with little interruption of your
work flow.  Org’s method for capturing new items is heavily inspired by
John Wiegley’s excellent Remember package.

* Menu:

* Setting up capture::           Where notes will be stored.
* Using capture::                Commands to invoke and terminate capture.
* Capture templates::            Define the outline of different note types.


File: org.info,  Node: Setting up capture,  Next: Using capture,  Up: Capture

10.1.1 Setting up capture
-------------------------

The following customization sets a default target file for notes.

     (setq org-default-notes-file (concat org-directory "/notes.org"))

   You may also define a global key for capturing new material (see
*note Activation::).


File: org.info,  Node: Using capture,  Next: Capture templates,  Prev: Setting up capture,  Up: Capture

10.1.2 Using capture
--------------------

‘M-x org-capture’ (‘org-capture’)
     Display the capture templates menu.  If you have templates defined
     (see *note Capture templates::), it offers these templates for
     selection or use a new Org outline node as the default template.
     It inserts the template into the target file and switch to an
     indirect buffer narrowed to this new node.  You may then insert the
     information you want.

‘C-c C-c’ (‘org-capture-finalize’)
     Once you have finished entering information into the capture
     buffer, ‘C-c C-c’ returns you to the window configuration before
     the capture process, so that you can resume your work without
     further distraction.  When called with a prefix argument, finalize
     and then jump to the captured item.

‘C-c C-w’ (‘org-capture-refile’)
     Finalize the capture process by refiling the note to a different
     place (see *note Refile and Copy::).  Please realize that this is a
     normal refiling command that will be executed—so point position at
     the moment you run this command is important.  If you have inserted
     a tree with a parent and children, first move point back to the
     parent.  Any prefix argument given to this command is passed on to
     the ‘org-refile’ command.

‘C-c C-k’ (‘org-capture-kill’)
     Abort the capture process and return to the previous state.

   You can also call ‘org-capture’ in a special way from the agenda,
using the ‘k c’ key combination.  With this access, any timestamps
inserted by the selected capture template defaults to the date at point
in the agenda, rather than to the current date.

   To find the locations of the last stored capture, use ‘org-capture’
with prefix commands:

‘C-u M-x org-capture’
     Visit the target location of a capture template.  You get to select
     the template in the usual way.

‘C-u C-u M-x org-capture’
     Visit the last stored capture item in its buffer.

   You can also jump to the bookmark ‘org-capture-last-stored’, which is
automatically created unless you set ‘org-capture-bookmark’ to ‘nil’.

   To insert the capture at point in an Org buffer, call ‘org-capture’
with a ‘C-0’ prefix argument.


File: org.info,  Node: Capture templates,  Prev: Using capture,  Up: Capture

10.1.3 Capture templates
------------------------

You can use templates for different types of capture items, and for
different target locations.  The easiest way to create such templates is
through the customize interface.

‘C’
     Customize the variable ‘org-capture-templates’.

   Before we give the formal description of template definitions, let’s
look at an example.  Say you would like to use one template to create
general TODO entries, and you want to put these entries under the
heading ‘Tasks’ in your file ‘~/org/gtd.org’.  Also, a date tree in the
file ‘journal.org’ should capture journal entries.  A possible
configuration would look like:

     (setq org-capture-templates
           '(("t" "Todo" entry (file+headline "~/org/gtd.org" "Tasks")
              "* TODO %?\n  %i\n  %a")
             ("j" "Journal" entry (file+datetree "~/org/journal.org")
              "* %?\nEntered on %U\n  %i\n  %a")))

   If you then press ‘t’ from the capture menu, Org will prepare the
template for you like this:

     * TODO
       [[file:LINK TO WHERE YOU INITIATED CAPTURE]]

During expansion of the template, ‘%a’ has been replaced by a link to
the location from where you called the capture command.  This can be
extremely useful for deriving tasks from emails, for example.  You fill
in the task definition, press ‘C-c C-c’ and Org returns you to the same
place where you started the capture process.

   To define special keys to capture to a particular template without
going through the interactive template selection, you can create your
key binding like this:

     (define-key global-map (kbd "C-c x")
       (lambda () (interactive) (org-capture nil "x")))

* Menu:

* Template elements::            What is needed for a complete template entry.
* Template expansion::           Filling in information about time and context.
* Templates in contexts::        Only show a template in a specific context.


File: org.info,  Node: Template elements,  Next: Template expansion,  Up: Capture templates

10.1.3.1 Template elements
..........................

Now lets look at the elements of a template definition.  Each entry in
‘org-capture-templates’ is a list with the following items:

keys
     The keys that selects the template, as a string, characters only,
     for example ‘"a"’, for a template to be selected with a single key,
     or ‘"bt"’ for selection with two keys.  When using several keys,
     keys using the same prefix key must be sequential in the list and
     preceded by a 2-element entry explaining the prefix key, for
     example:

          ("b" "Templates for marking stuff to buy")

     If you do not define a template for the ‘C’ key, this key opens the
     Customize buffer for this complex variable.

description
     A short string describing the template, shown during selection.

type
     The type of entry, a symbol.  Valid values are:

     ‘entry’
          An Org mode node, with a headline.  Will be filed as the child
          of the target entry or as a top-level entry.  The target file
          should be an Org file.

     ‘item’
          A plain list item, placed in the first plain list at the
          target location.  Again the target file should be an Org file.

     ‘checkitem’
          A checkbox item.  This only differs from the plain list item
          by the default template.

     ‘table-line’
          A new line in the first table at the target location.  Where
          exactly the line will be inserted depends on the properties
          ‘:prepend’ and ‘:table-line-pos’ (see below).

     ‘plain’
          Text to be inserted as it is.

target
     Specification of where the captured item should be placed.  In Org
     files, targets usually define a node.  Entries will become children
     of this node.  Other types will be added to the table or list in
     the body of this node.  Most target specifications contain a file
     name.  If that file name is the empty string, it defaults to
     ‘org-default-notes-file’.  A file can also be given as a variable
     or as a function called with no argument.  When an absolute path is
     not specified for a target, it is taken as relative to
     ‘org-directory’.

     Valid values are:

     ‘(file "path/to/file")’
          Text will be placed at the beginning or end of that file.

     ‘(id "id of existing org entry")’
          Filing as child of this entry, or in the body of the entry.

     ‘(file+headline "filename" "node headline")’
          Fast configuration if the target heading is unique in the
          file.

     ‘(file+olp "filename" "Level 1 heading" "Level 2" ...)’
          For non-unique headings, the full path is safer.

     ‘(file+regexp "filename" "regexp to find location")’
          Use a regular expression to position point.

     ‘(file+olp+datetree "filename" [ "Level 1 heading" ...])’
          This target(1) creates a heading in a date tree(2) for today’s
          date.  If the optional outline path is given, the tree will be
          built under the node it is pointing to, instead of at top
          level.  Check out the ‘:time-prompt’ and ‘:tree-type’
          properties below for additional options.

     ‘(file+function "filename" function-finding-location)’
          A function to find the right location in the file.

     ‘(clock)’
          File to the entry that is currently being clocked.

     ‘(here)’
          The position of ‘point’.

     ‘(function function-finding-location)’
          Most general way: write your own function which both visits
          the file and moves point to the right location.

template
     The template for creating the capture item.  If you leave this
     empty, an appropriate default template will be used.  Otherwise
     this is a string with escape codes, which will be replaced
     depending on time and context of the capture call.  You may also
     get this template string from a file(3), or dynamically, from a
     function using either syntax:

          (file "/path/to/template-file")
          (function FUNCTION-RETURNING-THE-TEMPLATE)

properties
     The rest of the entry is a property list of additional options.
     Recognized properties are:

     ‘:prepend’
          Normally new captured information will be appended at the
          target location (last child, last table line, last list item,
          ...).  Setting this property changes that.

     ‘:immediate-finish’
          When set, do not offer to edit the information, just file it
          away immediately.  This makes sense if the template only needs
          information that can be added automatically.

     ‘:jump-to-captured’
          When set, jump to the captured entry when finished.

     ‘:empty-lines’
          Set this to the number of lines to insert before and after the
          new item.  Default 0, and the only other common value is 1.

     ‘:empty-lines-after’
          Set this to the number of lines that should be inserted after
          the new item.  Overrides ‘:empty-lines’ for the number of
          lines inserted after.

     ‘:empty-lines-before’
          Set this to the number of lines that should be inserted before
          the new item.  Overrides ‘:empty-lines’ for the number lines
          inserted before.

     ‘:clock-in’
          Start the clock in this item.

     ‘:clock-keep’
          Keep the clock running when filing the captured entry.

     ‘:clock-resume’
          If starting the capture interrupted a clock, restart that
          clock when finished with the capture.  Note that ‘:clock-keep’
          has precedence over ‘:clock-resume’.  When setting both to
          non-‘nil’, the current clock will run and the previous one
          will not be resumed.

     ‘:time-prompt’
          Prompt for a date/time to be used for date/week trees and when
          filling the template.  Without this property, capture uses the
          current date and time.  Even if this property has not been
          set, you can force the same behavior by calling ‘org-capture’
          with a ‘C-1’ prefix argument.

     ‘:tree-type’
          Use ‘week’ to make a week tree instead of the month-day tree,
          i.e., place the headings for each day under a heading with the
          current ISO week.  Use ‘month’ to group entries by month only.
          Default is to group entries by day.

     ‘:unnarrowed’
          Do not narrow the target buffer, simply show the full buffer.
          Default is to narrow it so that you only see the new material.

     ‘:table-line-pos’
          Specification of the location in the table where the new line
          should be inserted.  It should be a string like ‘II-3’ meaning
          that the new line should become the third line before the
          second horizontal separator line.

     ‘:kill-buffer’
          If the target file was not yet visited when capture was
          invoked, kill the buffer again after capture is completed.

     ‘:no-save’
          Do not save the target file after finishing the capture.

     ‘:refile-targets’
          Temporarily set ‘org-refile-targets’ to the value of this
          property.

     ‘:hook’
          A nullary function or list of nullary functions run before
          ‘org-capture-mode-hook’ when the template is selected.

     ‘:prepare-finalize’
          A nullary function or list of nullary functions run before
          ‘org-capture-prepare-finalize-hook’ when the template is
          selected.

     ‘:before-finalize’
          A nullary function or list of nullary functions run before
          ‘org-capture-before-finalize-hook’ when the template is
          selected.

     ‘:after-finalize’
          A nullary function or list of nullary functions run before
          ‘org-capture-after-finalize-hook’ when the template is
          selected.

   ---------- Footnotes ----------

   (1) Org used to offer four different targets for date/week tree
capture.  Now, Org automatically translates these to use
‘file+olp+datetree’, applying the ‘:time-prompt’ and ‘:tree-type’
properties.  Please rewrite your date/week-tree targets using
‘file+olp+datetree’ since the older targets are now deprecated.

   (2) A date tree is an outline structure with years on the highest
level, months or ISO weeks as sublevels and then dates on the lowest
level.

     * 2022
     ** 2022-10 October
     *** 2022-10-07 Friday
     *** 2022-10-08 Saturday

   TODO state, priority, tags, statistics cookies, and COMMENT keywords
are allowed in the tree structure.

   (3) When the file name is not absolute, Org assumes it is relative to
‘org-directory’.


File: org.info,  Node: Template expansion,  Next: Templates in contexts,  Prev: Template elements,  Up: Capture templates

10.1.3.2 Template expansion
...........................

In the template itself, special “%-escapes”(1) allow dynamic insertion
of content.  The templates are expanded in the order given here:

‘%[FILE]’
     Insert the contents of the file given by FILE.

‘%(EXP)’
     Evaluate Elisp expression EXP and replace it with the result.  The
     EXP form must return a string.  Only placeholders pre-existing
     within the template, or introduced with ‘%[file]’, are expanded
     this way.  Since this happens after expanding non-interactive
     “%-escapes”, those can be used to fill the expression.

‘%<FORMAT>’
     The result of format-time-string on the FORMAT specification.

‘%t’
     Timestamp, date only.

‘%T’
     Timestamp, with date and time.

‘%u’, ‘%U’
     Like ‘%t’, ‘%T’ above, but inactive timestamps.

‘%i’
     Initial content, the region when capture is called while the region
     is active.  If there is text before ‘%i’ on the same line, such as
     indentation, and ‘%i’ is not inside a ‘%(exp)’ form, that prefix is
     added before every line in the inserted text.

‘%a’
     Annotation, normally the link created with ‘org-store-link’.

‘%A’
     Like ‘%a’, but prompt for the description part.

‘%l’
     Like ‘%a’, but only insert the literal link.

‘%L’
     Like ‘%l’, but without brackets (the link content itself).

‘%c’
     Current kill ring head.

‘%x’
     Content of the X clipboard.

‘%k’
     Title of the currently clocked task.

‘%K’
     Link to the currently clocked task.

‘%n’
     User name (taken from ‘user-full-name’).

‘%f’
     File visited by current buffer when org-capture was called.

‘%F’
     Full path of the file or directory visited by current buffer.

‘%:keyword’
     Specific information for certain link types, see below.

‘%^g’
     Prompt for tags, with completion on tags in target file.

‘%^G’
     Prompt for tags, with completion all tags in all agenda files.

‘%^t’
     Like ‘%t’, but prompt for date.  Similarly ‘%^T’, ‘%^u’, ‘%^U’.
     You may define a prompt like ‘%^{Birthday}t’.

‘%^C’
     Interactive selection of which kill or clip to use.

‘%^L’
     Like ‘%^C’, but insert as link.

‘%^{PROP}p’
     Prompt the user for a value for property PROP.  You may specify a
     default value with ‘%^{PROP|default}’.

‘%^{PROMPT}’
     Prompt the user for a string and replace this sequence with it.
     You may specify a default value and a completion table with
     ‘%^{prompt|default|completion2|completion3...}’.  The arrow keys
     access a prompt-specific history.

‘%\N’
     Insert the text entered at the Nth ‘%^{PROMPT}’, where N is a
     number, starting from 1.

‘%?’
     After completing the template, position point here.

   For specific link types, the following keywords are defined(2):

Link type      Available keywords
--------------------------------------------------------------------------
bbdb           ‘%:name’, ‘%:company’
irc            ‘%:server’, ‘%:port’, ‘%:nick’
mh, rmail      ‘%:type’, ‘%:subject’, ‘%:message-id’
               ‘%:from’, ‘%:fromname’, ‘%:fromaddress’
               ‘%:to’, ‘%:toname’, ‘%:toaddress’
               ‘%:date’ (message date header field)
               ‘%:date-timestamp’ (date as active timestamp)
               ‘%:date-timestamp-inactive’ (date as inactive timestamp)
               ‘%:fromto’ (either “to NAME” or “from NAME”)(3)
gnus           ‘%:group’, for messages also all email fields
w3, w3m        ‘%:url’
info           ‘%:file’, ‘%:node’
calendar       ‘%:date’
org-protocol   ‘%:link’, ‘%:description’, ‘%:annotation’

   ---------- Footnotes ----------

   (1) If you need one of these sequences literally, escape the ‘%’ with
a backslash.

   (2) If you define your own link types (see *note Adding Hyperlink
Types::), any property you store with ‘org-store-link-props’ can be
accessed in capture templates in a similar way.

   (3) This is always the other, not the user.  See the variable
‘org-link-from-user-regexp’.


File: org.info,  Node: Templates in contexts,  Prev: Template expansion,  Up: Capture templates

10.1.3.3 Templates in contexts
..............................

To control whether a capture template should be accessible from a
specific context, you can customize ‘org-capture-templates-contexts’.
Let’s say, for example, that you have a capture template “p” for storing
Gnus emails containing patches.  Then you would configure this option
like this:

     (setq org-capture-templates-contexts
           '(("p" ((in-mode . "message-mode")))))

   You can also tell that the command key ‘p’ should refer to another
template.  In that case, add this command key like this:

     (setq org-capture-templates-contexts
           '(("p" "q" ((in-mode . "message-mode")))))

   See the docstring of the variable for more information.


File: org.info,  Node: Attachments,  Next: RSS Feeds,  Prev: Capture,  Up: Capture and Attachments

10.2 Attachments
================

It is often useful to associate reference material with an outline node.
Small chunks of plain text can simply be stored in the subtree of a
project.  Hyperlinks (see *note Hyperlinks::) can establish associations
with files that live elsewhere on a local, or even remote, computer,
like emails or source code files belonging to a project.

   Another method is _attachments_, which are files located in a
directory belonging to an outline node.  Org uses directories either
named by a unique ID of each entry, or by a ‘DIR’ property.

* Menu:

* Attachment defaults and dispatcher:: How to access attachment commands
* Attachment options::           Configuring the attachment system
* Attachment links::             Hyperlink access to attachments
* Automatic version-control with Git:: Everything safely stored away
* Attach from Dired::            Using dired to select an attachment


File: org.info,  Node: Attachment defaults and dispatcher,  Next: Attachment options,  Up: Attachments

10.2.1 Attachment defaults and dispatcher
-----------------------------------------

By default, Org attach uses ID properties when adding attachments to
outline nodes.  This makes working with attachments fully automated.
There is no decision needed for folder-name or location.  ID-based
directories are by default located in the ‘data/’ directory, which lives
in the same directory where your Org file lives(1).

   When attachments are made using ‘org-attach’ a default tag ‘ATTACH’
is added to the node that gets the attachments.

   For more control over the setup, see *note Attachment options::.

   The following commands deal with attachments:

‘C-c C-a’ (‘org-attach’)
     The dispatcher for commands related to the attachment system.
     After these keys, a list of commands is displayed and you must
     press an additional key to select a command:

     ‘a’ (‘org-attach-attach’)
          Select a file and move it into the task’s attachment
          directory.  The file is copied, moved, or linked, depending on
          ‘org-attach-method’.  Note that hard links are not supported
          on all systems.

     ‘c’/‘m’/‘l’
          Attach a file using the copy/move/link method.  Note that hard
          links are not supported on all systems.

     ‘b’ (‘org-attach-buffer’)
          Select a buffer and save it as a file in the task’s attachment
          directory.

     ‘n’ (‘org-attach-new’)
          Create a new attachment as an Emacs buffer.

     ‘z’ (‘org-attach-sync’)
          Synchronize the current task with its attachment directory, in
          case you added attachments yourself.

     ‘o’ (‘org-attach-open’)
          Open current task’s attachment.  If there is more than one,
          prompt for a file name first.  Opening follows the rules set
          by ‘org-file-apps’.  For more details, see the information on
          following hyperlinks (see *note Handling Links::).

     ‘O’ (‘org-attach-open-in-emacs’)
          Also open the attachment, but force opening the file in Emacs.

     ‘f’ (‘org-attach-reveal’)
          Open the current task’s attachment directory.

     ‘F’ (‘org-attach-reveal-in-emacs’)
          Also open the directory, but force using Dired in Emacs.

     ‘d’ (‘org-attach-delete-one’)
          Select and delete a single attachment.

     ‘D’ (‘org-attach-delete-all’)
          Delete all of a task’s attachments.  A safer way is to open
          the directory in Dired and delete from there.

     ‘s’ (‘org-attach-set-directory’)
          Set a specific directory as the entry’s attachment directory.
          This works by putting the directory path into the ‘DIR’
          property.

     ‘S’ (‘org-attach-unset-directory’)
          Remove the attachment directory.  This command removes the
          ‘DIR’ property and asks the user to either move content inside
          that folder, if an ‘ID’ property is set, delete the content,
          or to leave the attachment directory as is but no longer
          attached to the outline node.

   ---------- Footnotes ----------

   (1) If you move entries or Org files from one directory to another,
you may want to configure ‘org-attach-id-dir’ to contain an absolute
path.


File: org.info,  Node: Attachment options,  Next: Attachment links,  Prev: Attachment defaults and dispatcher,  Up: Attachments

10.2.2 Attachment options
-------------------------

There are a couple of options for attachments that are worth mentioning.

‘org-attach-id-dir’
     The directory where attachments are stored when ‘ID’ is used as
     method.

‘org-attach-dir-relative’
     When setting the ‘DIR’ property on a node using ‘C-c C-a s’
     (‘org-attach-set-directory’), absolute links are entered by
     default.  This option changes that to relative links.

‘org-attach-use-inheritance’
     By default folders attached to an outline node are inherited from
     parents according to ‘org-use-property-inheritance’.  If one
     instead want to set inheritance specifically for Org attach that
     can be done using ‘org-attach-use-inheritance’.  Inheriting
     documents through the node hierarchy makes a lot of sense in most
     cases.  Especially when using attachment links (see *note
     Attachment links::).  The following example shows one use case for
     attachment inheritance:

          * Chapter A ...
            :PROPERTIES:
            :DIR: Chapter A/
            :END:
          ** Introduction
          Some text

          #+NAME: Image 1
          [[attachment:image 1.jpg]]

     Without inheritance one would not be able to resolve the link to
     ‘image 1.jpg’, since the link is inside a sub-heading to ‘Chapter
     A’.

     Inheritance works the same way for both ‘ID’ and ‘DIR’ property.
     If both properties are defined on the same headline then ‘DIR’
     takes precedence.  This is also true if inheritance is enabled.  If
     ‘DIR’ is inherited from a parent node in the outline, that property
     still takes precedence over an ‘ID’ property defined on the node
     itself.

‘org-attach-method’
     When attaching files using the dispatcher ‘C-c C-a’ it defaults to
     copying files.  The behavior can be changed by customizing
     ‘org-attach-method’.  Options are Copy, Move/Rename, Hard link or
     Symbolic link.

‘org-attach-preferred-new-method’
     This customization lets you choose the default way to attach to
     nodes without existing ‘ID’ and ‘DIR’ property.  It defaults to
     ‘id’ but can also be set to ‘dir’, ‘ask’ or ‘nil’.

‘org-attach-archive-delete’
     Configure this to determine if attachments should be deleted or not
     when a subtree that has attachments is archived.

‘org-attach-auto-tag’
     When attaching files to a heading it will be assigned a tag
     according to what is set here.

‘org-attach-id-to-path-function-list’
     When ‘ID’ is used for attachments, the ID is parsed into a part of
     a directory-path.  See ‘org-attach-id-uuid-folder-format’ for the
     default function.  Define a new one and add it as first element in
     ‘org-attach-id-to-path-function-list’ if you want the folder
     structure in any other way.  All functions in this list will be
     tried when resolving existing ID’s into paths, to maintain backward
     compatibility with existing folders in your system.

‘org-attach-store-link-p’
     Stores a link to the file that is being attached.  The link is
     stored in ‘org-stored-links’ for later insertion with ‘C-c C-l’
     (see *note Handling Links::).  Depending on what option is set in
     ‘org-attach-store-link-p’, the link is stored to either the
     original location as a file link, the attachment location as an
     attachment link or to the attachment location as a file link.

‘org-attach-commands’
     List of all commands used in the attach dispatcher.

‘org-attach-expert’
     Do not show the splash buffer with the attach dispatcher when
     ‘org-attach-expert’ is set to non-‘nil’.

   See customization group ‘Org Attach’ if you want to change the
default settings.


File: org.info,  Node: Attachment links,  Next: Automatic version-control with Git,  Prev: Attachment options,  Up: Attachments

10.2.3 Attachment links
-----------------------

Attached files and folders can be referenced using attachment links.
This makes it easy to refer to the material added to an outline node.
Especially if it was attached using the unique ID of the entry!

     * TODO Some task
       :PROPERTIES:
       :ID:       95d50008-c12e-479f-a4f2-cc0238205319
       :END:
     See attached document for more information: [[attachment:info.org]]

   See *note External Links:: for more information about these links.


File: org.info,  Node: Automatic version-control with Git,  Next: Attach from Dired,  Prev: Attachment links,  Up: Attachments

10.2.4 Automatic version-control with Git
-----------------------------------------

If the directory attached to an outline node is a Git repository, Org
can be configured to automatically commit changes to that repository
when it sees them.

   To make Org mode take care of versioning of attachments for you, add
the following to your Emacs config:

     (require 'org-attach-git)


File: org.info,  Node: Attach from Dired,  Prev: Automatic version-control with Git,  Up: Attachments

10.2.5 Attach from Dired
------------------------

It is possible to attach files to a subtree from a Dired buffer.  To use
this feature, have one window in Dired mode containing the file(s) to be
attached and another window with point in the subtree that shall get the
attachments.  In the Dired window, with point on a file, ‘M-x
org-attach-dired-to-subtree’ attaches the file to the subtree using the
attachment method set by variable ‘org-attach-method’.  When files are
marked in the Dired window then all marked files get attached.

   Add the following lines to the Emacs init file to have ‘C-c C-x a’
attach files in Dired buffers.

     (add-hook 'dired-mode-hook
               (lambda ()
                 (define-key dired-mode-map
                   (kbd "C-c C-x a")
                   #'org-attach-dired-to-subtree)))

   The following code shows how to bind the previous command with a
specific attachment method.

     (add-hook 'dired-mode-hook
               (lambda ()
                 (define-key dired-mode-map (kbd "C-c C-x c")
                   (lambda ()
                     (interactive)
                     (let ((org-attach-method 'cp))
                       (call-interactively #'org-attach-dired-to-subtree))))))


File: org.info,  Node: RSS Feeds,  Prev: Attachments,  Up: Capture and Attachments

10.3 RSS Feeds
==============

Org can add and change entries based on information found in RSS feeds
and Atom feeds.  You could use this to make a task out of each new
podcast in a podcast feed.  Or you could use a phone-based note-creating
service on the web to import tasks into Org.  To access feeds, configure
the variable ‘org-feed-alist’.  The docstring of this variable has
detailed information.  With the following

     (setq org-feed-alist
           '(("Slashdot"
              "https://rss.slashdot.org/Slashdot/slashdot"
              "~/txt/org/feeds.org" "Slashdot Entries")))

new items from the feed provided by ‘rss.slashdot.org’ result in new
entries in the file ‘~/org/feeds.org’ under the heading ‘Slashdot
Entries’, whenever the following command is used:

‘C-c C-x g’ (‘org-feed-update-all’)
     Collect items from the feeds configured in ‘org-feed-alist’ and act
     upon them.

‘C-c C-x G’ (‘org-feed-goto-inbox’)
     Prompt for a feed name and go to the inbox configured for this
     feed.

   Under the same headline, Org creates a drawer ‘FEEDSTATUS’ in which
it stores information about the status of items in the feed, to avoid
adding the same item several times.

   For more information, including how to read atom feeds, see
‘org-feed.el’ and the docstring of ‘org-feed-alist’.


File: org.info,  Node: Agenda Views,  Next: Markup for Rich Contents,  Prev: Capture and Attachments,  Up: Top

11 Agenda Views
***************

Due to the way Org works, TODO items, time-stamped items, and tagged
headlines can be scattered throughout a file or even a number of files.
To get an overview of open action items, or of events that are important
for a particular date, this information must be collected, sorted and
displayed in an organized way.

   Org can select items based on various criteria and display them in a
separate buffer.  Six different view types are provided:

   • an _agenda_ that is like a calendar and shows information for
     specific dates,

   • a _TODO list_ that covers all unfinished action items,

   • a _match view_, showings headlines based on the tags, properties,
     and TODO state associated with them,

   • a _text search view_ that shows all entries from multiple files
     that contain specified keywords,

   • a _stuck projects view_ showing projects that currently do not move
     along, and

   • _custom views_ that are special searches and combinations of
     different views.

   The extracted information is displayed in a special _agenda buffer_.
This buffer is read-only, but provides commands to visit the
corresponding locations in the original Org files, and even to edit
these files remotely.

   By default, the report ignores commented (see *note Comment Lines::)
and archived (see *note Internal archiving::) entries.  You can override
this by setting ‘org-agenda-skip-comment-trees’ and
‘org-agenda-skip-archived-trees’ to ‘nil’.

   Two variables control how the agenda buffer is displayed and whether
the window configuration is restored when the agenda exits:
‘org-agenda-window-setup’ and ‘org-agenda-restore-windows-after-quit’.

* Menu:

* Agenda Files::                 Files being searched for agenda information.
* Agenda Dispatcher::            Keyboard access to agenda views.
* Built-in Agenda Views::        What is available out of the box?
* Presentation and Sorting::     How agenda items are prepared for display.
* Agenda Commands::              Remote editing of Org trees.
* Custom Agenda Views::          Defining special searches and views.
* Exporting Agenda Views::       Writing a view to a file.
* Agenda Column View::           Using column view for collected entries.


File: org.info,  Node: Agenda Files,  Next: Agenda Dispatcher,  Up: Agenda Views

11.1 Agenda Files
=================

The information to be shown is normally collected from all _agenda
files_, the files listed in the variable ‘org-agenda-files’(1).  If a
directory is part of this list, all files with the extension ‘.org’ in
this directory are part of the list.

   Thus, even if you only work with a single Org file, that file should
be put into the list(2).  You can customize ‘org-agenda-files’, but the
easiest way to maintain it is through the following commands

‘C-c [’ (‘org-agenda-file-to-front’)
     Add current file to the list of agenda files.  The file is added to
     the front of the list.  If it was already in the list, it is moved
     to the front.  With a prefix argument, file is added/moved to the
     end.

‘C-c ]’ (‘org-remove-file’)
     Remove current file from the list of agenda files.

‘C-'’
‘C-,’ (‘org-cycle-agenda-files’)
     Cycle through agenda file list, visiting one file after the other.

‘M-x org-switchb’
     Command to use an Iswitchb-like interface to switch to and between
     Org buffers.

The Org menu contains the current list of files and can be used to visit
any of them.

   If you would like to focus the agenda temporarily on a file not in
this list, or on just one file in the list, or even on only a subtree in
a file, then this can be done in different ways.  For a single agenda
command, you may press ‘<’ once or several times in the dispatcher (see
*note Agenda Dispatcher::).  To restrict the agenda scope for an
extended period, use the following commands:

‘C-c C-x <’ (‘org-agenda-set-restriction-lock’)
     Restrict the agenda to the current subtree.  If there already is a
     restriction at point, remove it.  When called with a universal
     prefix argument or with point before the first headline in a file,
     set the agenda scope to the entire file.  This restriction remains
     in effect until removed with ‘C-c C-x >’, or by typing either ‘<’
     or ‘>’ in the agenda dispatcher.  If there is a window displaying
     an agenda view, the new restriction takes effect immediately.

‘C-c C-x >’ (‘org-agenda-remove-restriction-lock’)
     Remove the restriction created by ‘C-c C-x <’.

   When working with Speedbar, you can use the following commands in the
Speedbar frame:

‘<’ (‘org-speedbar-set-agenda-restriction’)
     Restrict the agenda to the item—either an Org file or a subtree in
     such a file—at point in the Speedbar frame.  If agenda is already
     restricted there, remove the restriction.  If there is a window
     displaying an agenda view, the new restriction takes effect
     immediately.

‘>’ (‘org-agenda-remove-restriction-lock’)
     Remove the restriction.

   ---------- Footnotes ----------

   (1) If the value of that variable is not a list, but a single file
name, then the list of agenda files in maintained in that external file.

   (2) When using the dispatcher, pressing ‘<’ before selecting a
command actually limits the command to the current file, and ignores
‘org-agenda-files’ until the next dispatcher command.


File: org.info,  Node: Agenda Dispatcher,  Next: Built-in Agenda Views,  Prev: Agenda Files,  Up: Agenda Views

11.2 The Agenda Dispatcher
==========================

The views are created through a dispatcher, accessible with ‘M-x
org-agenda’, or, better, bound to a global key (see *note Activation::).
It displays a menu from which an additional letter is required to
execute a command.  The dispatcher offers the following default
commands:

‘a’
     Create the calendar-like agenda (see *note Weekly/daily agenda::).

‘t’
‘T’
     Create a list of all TODO items (see *note Global TODO list::).

‘m’
‘M’
     Create a list of headlines matching a given expression (see *note
     Matching tags and properties::).

‘s’
     Create a list of entries selected by a boolean expression of
     keywords and/or regular expressions that must or must not occur in
     the entry.

‘/’
     Search for a regular expression in all agenda files and
     additionally in the files listed in
     ‘org-agenda-text-search-extra-files’.  This uses the Emacs command
     ‘multi-occur’.  A prefix argument can be used to specify the number
     of context lines for each match, the default is 1.

‘#’
     Create a list of stuck projects (see *note Stuck projects::).

‘!’
     Configure the list of stuck projects (see *note Stuck projects::).

‘<’
     Restrict an agenda command to the current buffer(1).  If narrowing
     is in effect restrict to the narrowed part of the buffer.  After
     pressing ‘<’, you still need to press the character selecting the
     command.

‘< <’
     If there is an active region, restrict the following agenda command
     to the region.  Otherwise, restrict it to the current subtree(2).
     After pressing ‘< <’, you still need to press the character
     selecting the command.

‘*’
     Toggle sticky agenda views.  By default, Org maintains only a
     single agenda buffer and rebuilds it each time you change the view,
     to make sure everything is always up to date.  If you switch
     between views often and the build time bothers you, you can turn on
     sticky agenda buffers (make this the default by customizing the
     variable ‘org-agenda-sticky’).  With sticky agendas, the dispatcher
     only switches to the selected view, you need to update it by hand
     with ‘r’ or ‘g’.  You can toggle sticky agenda view any time with
     ‘org-toggle-sticky-agenda’.

   You can also define custom commands that are accessible through the
dispatcher, just like the default commands.  This includes the
possibility to create extended agenda buffers that contain several
blocks together, for example the weekly agenda, the global TODO list and
a number of special tags matches.  See *note Custom Agenda Views::.

   ---------- Footnotes ----------

   (1) For backward compatibility, you can also press ‘1’ to restrict to
the current buffer.

   (2) For backward compatibility, you can also press ‘0’ to restrict to
the current region/subtree.


File: org.info,  Node: Built-in Agenda Views,  Next: Presentation and Sorting,  Prev: Agenda Dispatcher,  Up: Agenda Views

11.3 The Built-in Agenda Views
==============================

In this section we describe the built-in views.

* Menu:

* Weekly/daily agenda::          The calendar page with current tasks.
* Global TODO list::             All unfinished action items.
* Matching tags and properties:: Structured information with fine-tuned search.
* Search view::                  Find entries by searching for text.
* Stuck projects::               Find projects you need to review.


File: org.info,  Node: Weekly/daily agenda,  Next: Global TODO list,  Up: Built-in Agenda Views

11.3.1 Weekly/daily agenda
--------------------------

The purpose of the weekly/daily _agenda_ is to act like a page of a
paper agenda, showing all the tasks for the current week or day.

‘M-x org-agenda a’ (‘org-agenda-list’)
     Compile an agenda for the current week from a list of Org files.
     The agenda shows the entries for each day.  With a numeric prefix
     argument(1)—like ‘C-u 2 1 M-x org-agenda a’—you may set the number
     of days to be displayed.

   The default number of days displayed in the agenda is set by the
variable ‘org-agenda-span’.  This variable can be set to any number of
days you want to see by default in the agenda, or to a span name, such a
‘day’, ‘week’, ‘month’ or ‘year’.  For weekly agendas, the default is to
start on the previous Monday (see ‘org-agenda-start-on-weekday’).  You
can also set the start date using a date shift: ‘(setq
org-agenda-start-day "+10d")’ starts the agenda ten days from today in
the future.  ‘org-agenda-start-on-weekday’ takes precedence over
‘org-agenda-start-day’ in weekly and bi-weekly agendas.

   Remote editing from the agenda buffer means, for example, that you
can change the dates of deadlines and appointments from the agenda
buffer.  The commands available in the Agenda buffer are listed in *note
Agenda Commands::.

Calendar/Diary integration
..........................

Emacs contains the calendar and diary by Edward M. Reingold.  The
calendar displays a three-month calendar with holidays from different
countries and cultures.  The diary allows you to keep track of
anniversaries, lunar phases, sunrise/set, recurrent appointments
(weekly, monthly) and more.  In this way, it is quite complementary to
Org.  It can be very useful to combine output from Org with the diary.

   In order to include entries from the Emacs diary into Org mode’s
agenda, you only need to customize the variable

     (setq org-agenda-include-diary t)

After that, everything happens automatically.  All diary entries
including holidays, anniversaries, etc., are included in the agenda
buffer created by Org mode.  ‘<SPC>’, ‘<TAB>’, and ‘<RET>’ can be used
from the agenda buffer to jump to the diary file in order to edit
existing diary entries.  The ‘i’ command to insert new entries for the
current date works in the agenda buffer, as well as the commands ‘S’,
‘M’, and ‘C’ to display Sunrise/Sunset times, show lunar phases and to
convert to other calendars, respectively.  ‘c’ can be used to switch
back and forth between calendar and agenda.

   If you are using the diary only for expression entries and holidays,
it is faster to not use the above setting, but instead to copy or even
move the entries into an Org file.  Org mode evaluates diary-style
expression entries, and does it faster because there is no overhead for
first creating the diary display.  Note that the expression entries must
start at the left margin, no whitespace is allowed before them, as seen
in the following segment of an Org file:(2)

     * Holidays
       :PROPERTIES:
       :CATEGORY: Holiday
       :END:
     %%(org-calendar-holiday)   ; special function for holiday names

     * Birthdays
       :PROPERTIES:
       :CATEGORY: Ann
       :END:
     %%(org-anniversary 1956  5 14) Arthur Dent is %d years old
     %%(org-anniversary 1869 10  2) Mahatma Gandhi would be %d years old

Anniversaries from BBDB
.......................

If you are using the Insidious Big Brother Database to store your
contacts, you very likely prefer to store anniversaries in BBDB rather
than in a separate Org or diary file.  Org supports this and can show
BBDB anniversaries as part of the agenda.  All you need to do is to add
the following to one of your agenda files:

     * Anniversaries
       :PROPERTIES:
       :CATEGORY: Anniv
       :END:
     %%(org-bbdb-anniversaries)

   You can then go ahead and define anniversaries for a BBDB record.
Basically, you need a field named ‘anniversary’ for the BBDB record
which contains the date in the format ‘YYYY-MM-DD’ or ‘MM-DD’, followed
by a space and the class of the anniversary (‘birthday’, ‘wedding’, or a
format string).  If you omit the class, it defaults to ‘birthday’.  Here
are a few examples, the header for the file ‘ol-bbdb.el’ contains more
detailed information.

     1973-06-22
     06-22
     1955-08-02 wedding
     2008-04-14 %s released version 6.01 of Org mode, %d years ago

   After a change to BBDB, or for the first agenda display during an
Emacs session, the agenda display suffers a short delay as Org updates
its hash with anniversaries.  However, from then on things will be very
fast, much faster in fact than a long list of ‘%%(diary-anniversary)’
entries in an Org or Diary file.

   If you would like to see upcoming anniversaries with a bit of
forewarning, you can use the following instead:

     * Anniversaries
       :PROPERTIES:
       :CATEGORY: Anniv
       :END:
     %%(org-bbdb-anniversaries-future 3)

   That will give you three days’ warning: on the anniversary date
itself and the two days prior.  The argument is optional: if omitted, it
defaults to 7.

Appointment reminders
.....................

Org can interact with Emacs appointments notification facility.  To add
the appointments of your agenda files, use the command
‘org-agenda-to-appt’.  This command lets you filter through the list of
your appointments and add only those belonging to a specific category or
matching a regular expression.  It also reads a ‘APPT_WARNTIME’ property
which overrides the value of ‘appt-message-warning-time’ for this
appointment.  See the docstring for details.

   ---------- Footnotes ----------

   (1) For backward compatibility, the universal prefix argument ‘C-u’
causes all TODO entries to be listed before the agenda.  This feature is
deprecated, use the dedicated TODO list, or a block agenda instead (see
*note Block agenda::).

   (2) The variable ‘org-anniversary’ used in the example is just like
‘diary-anniversary’, but the argument order is always according to ISO
and therefore independent of the value of ‘calendar-date-style’.


File: org.info,  Node: Global TODO list,  Next: Matching tags and properties,  Prev: Weekly/daily agenda,  Up: Built-in Agenda Views

11.3.2 The global TODO list
---------------------------

The global TODO list contains all unfinished TODO items formatted and
collected into a single place.

‘M-x org-agenda t’ (‘org-todo-list’)
     Show the global TODO list.  This collects the TODO items from all
     agenda files (see *note Agenda Views::) into a single buffer.  By
     default, this lists items with a state that is not a DONE state.
     The buffer is in Agenda mode, so there are commands to examine and
     manipulate the TODO entries directly from that buffer (see *note
     Agenda Commands::).

‘M-x org-agenda T’ (‘org-todo-list’)
     Like the above, but allows selection of a specific TODO keyword.
     You can also do this by specifying a prefix argument to ‘t’.  You
     are prompted for a keyword, and you may also specify several
     keywords by separating them with ‘|’ as the boolean OR operator.
     With a numeric prefix, the Nth keyword in ‘org-todo-keywords’ is
     selected.

     The ‘r’ key in the agenda buffer regenerates it, and you can give a
     prefix argument to this command to change the selected TODO
     keyword, for example ‘3 r’.  If you often need a search for a
     specific keyword, define a custom command for it (see *note Agenda
     Dispatcher::).

     Matching specific TODO keywords can also be done as part of a tags
     search (see *note Tag Searches::).

   Remote editing of TODO items means that you can change the state of a
TODO entry with a single key press.  The commands available in the TODO
list are described in *note Agenda Commands::.

   Normally the global TODO list simply shows all headlines with TODO
keywords.  This list can become very long.  There are two ways to keep
it more compact:

   • Some people view a TODO item that has been _scheduled_ for
     execution or have a _deadline_ (see *note Timestamps::) as no
     longer _open_.  Configure the variables
     ‘org-agenda-todo-ignore-scheduled’ to exclude some or all scheduled
     items from the global TODO list, ‘org-agenda-todo-ignore-deadlines’
     to exclude some or all items with a deadline set,
     ‘org-agenda-todo-ignore-timestamp’ to exclude some or all items
     with an active timestamp other than a DEADLINE or a SCHEDULED
     timestamp and/or ‘org-agenda-todo-ignore-with-date’ to exclude
     items with at least one active timestamp.

   • TODO items may have sublevels to break up the task into subtasks.
     In such cases it may be enough to list only the highest level TODO
     headline and omit the sublevels from the global list.  Configure
     the variable ‘org-agenda-todo-list-sublevels’ to get this behavior.


File: org.info,  Node: Matching tags and properties,  Next: Search view,  Prev: Global TODO list,  Up: Built-in Agenda Views

11.3.3 Matching tags and properties
-----------------------------------

If headlines in the agenda files are marked with _tags_ (see *note
Tags::), or have properties (see *note Properties and Columns::), you
can select headlines based on this metadata and collect them into an
agenda buffer.  The match syntax described here also applies when
creating sparse trees with ‘C-c / m’.

‘M-x org-agenda m’ (‘org-tags-view’)
     Produce a list of all headlines that match a given set of tags.
     The command prompts for a selection criterion, which is a boolean
     logic expression with tags, like ‘+work+urgent-withboss’ or
     ‘work|home’ (see *note Tags::).  If you often need a specific
     search, define a custom command for it (see *note Agenda
     Dispatcher::).

‘M-x org-agenda M’ (‘org-tags-view’)
     Like ‘m’, but only select headlines that are also TODO items and
     force checking subitems (see the variable
     ‘org-tags-match-list-sublevels’).  To exclude scheduled/deadline
     items, see the variable
     ‘org-agenda-tags-todo-honor-ignore-options’.  Matching specific
     TODO keywords together with a tags match is also possible, see
     *note Tag Searches::.

   The commands available in the tags list are described in *note Agenda
Commands::.

   A search string can use Boolean operators ‘&’ for AND and ‘|’ for OR.
‘&’ binds more strongly than ‘|’.  Parentheses are currently not
implemented.  Each element in the search is either a tag, a regular
expression matching tags, or an expression like ‘PROPERTY OPERATOR
VALUE’ with a comparison operator, accessing a property value.  Each
element may be preceded by ‘-’ to select against it, and ‘+’ is
syntactic sugar for positive selection.  The AND operator ‘&’ is
optional when ‘+’ or ‘-’ is present.  Here are some examples, using only
tags.

‘+work-boss’
     Select headlines tagged ‘work’, but discard those also tagged
     ‘boss’.

‘work|laptop’
     Selects lines tagged ‘work’ or ‘laptop’.

‘work|laptop+night’
     Like before, but require the ‘laptop’ lines to be tagged also
     ‘night’.

   Instead of a tag, you may also specify a regular expression enclosed
in curly braces (see *note Regular Expressions::).  For example,
‘work+{^boss.*}’ matches headlines that contain the tag ‘:work:’ and any
tag _starting_ with ‘boss’.

   Group tags (see *note Tag Hierarchy::) are expanded as regular
expressions.  E.g., if ‘work’ is a group tag for the group
‘:work:lab:conf:’, then searching for ‘work’ also searches for
‘{\(?:work\|lab\|conf\)}’ and searching for ‘-work’ searches for all
headlines but those with one of the tags in the group (i.e.,
‘-{\(?:work\|lab\|conf\)}’).

   You may also test for properties (see *note Properties and Columns::)
at the same time as matching tags.  The properties may be real
properties, or special properties that represent other metadata (see
*note Special Properties::).  For example, the property ‘TODO’
represents the TODO keyword of the entry.  Or, the property ‘LEVEL’
represents the level of an entry.  So searching
‘+LEVEL=3+boss-TODO​="DONE"’ lists all level three headlines that have
the tag ‘boss’ and are _not_ marked with the TODO keyword ‘DONE’.  In
buffers with ‘org-odd-levels-only’ set, ‘LEVEL’ does not count the
number of stars, but ‘LEVEL=2’ corresponds to 3 stars etc.

   Here are more examples:

‘work+TODO​="WAITING"’
     Select ‘work’-tagged TODO lines with the specific TODO keyword
     ‘WAITING’.

‘work+TODO​="WAITING"|home+TODO​="WAITING"’
     Waiting tasks both at work and at home.

   When matching properties, a number of different operators can be used
to test the value of a property.  Here is a complex example:

     +work-boss+PRIORITY="A"+Coffee="unlimited"+Effort<*2
              +With={Sarah\|Denny}+SCHEDULED>="<2008-10-11>"

The type of comparison depends on how the comparison value is written:

   • If the comparison value is a plain number, a numerical comparison
     is done, and the allowed operators are ‘<’, ‘=’, ‘>’, ‘<=’, ‘>=’,
     and ‘<>’.  As a synonym for the equality operator ‘=’, there is
     also ‘==’; ‘!=’ and ‘/=’ are synonyms of the inequality operator
     ‘<>’.

   • If the comparison value is enclosed in double-quotes, a string
     comparison is done, and the same operators are allowed.

   • If the comparison value is enclosed in double-quotes _and_ angular
     brackets (like ‘DEADLINE<​="<2008-12-24 18:30>"’), both values are
     assumed to be date/time specifications in the standard Org way, and
     the comparison is done accordingly.  Valid values also include
     ‘"<now>"’ for now (including time), ‘"<today>"’, and ‘"<tomorrow>"’
     for these days at 0:00 hours, i.e., without a time specification.
     You can also use strings like ‘"<+5d>"’ or ‘"<-2m>"’ with units
     ‘d’, ‘w’, ‘m’, and ‘y’ for day, week, month, and year,
     respectively.

   • If the comparison value is enclosed in curly braces, a regexp match
     is performed, with ‘=’ meaning that the regexp matches the property
     value, and ‘<>’ meaning that it does not match.

   • All operators may be optionally followed by an asterisk ‘*’, like
     in ‘<*’, ‘!=*’, etc.  Such _starred operators_ work like their
     regular, unstarred counterparts except that they match only
     headlines where the tested property is actually present.  This is
     most useful for search terms that logically exclude results, like
     the inequality operator.

   So the search string in the example finds entries tagged ‘work’ but
not ‘boss’, which also have a priority value ‘A’, a ‘Coffee’ property
with the value ‘unlimited’, an ‘EFFORT’ property that is numerically
smaller than 2, a ‘With’ property that is matched by the regular
expression ‘Sarah\|Denny’, and that are scheduled on or after October
11, 2008.

   Note that the test on the ‘EFFORT’ property uses operator ‘<*’, so
that the search result will include only entries that actually have an
‘EFFORT’ property defined and with numerical value smaller than 2.  With
the regular ‘<’ operator, the search would handle entries without an
‘EFFORT’ property as having a zero effort and would include them in the
result as well.

   You can use all characters valid in property names when matching
properties.  However, you have to quote some characters in property
names with backslashes when using them in search strings, namely all
characters different from alphanumerics and underscores(1).  For
example, to search for all entries having a property ‘boss-prio’,
‘boss:prio’, or ‘boss\prio’, respectively, with value ‘C’, use search
strings

     boss\-prio="C"
     boss\:prio="C"
     boss\\prio="C"

   You can configure Org mode to use property inheritance during a
search, but beware that this can slow down searches considerably.  See
*note Property Inheritance::, for details.

   For backward compatibility, and also for typing speed, there is also
a different way to test TODO states in a search.  For this, terminate
the tags/property part of the search string (which may include several
terms connected with ‘|’) with a ‘/’ and then specify a Boolean
expression just for TODO keywords.  The syntax is then similar to that
for tags, but should be applied with care: for example, a positive
selection on several TODO keywords cannot meaningfully be combined with
boolean AND.  However, _negative selection_ combined with AND can be
meaningful.  To make sure that only lines are checked that actually have
any TODO keyword (resulting in a speed-up), use ‘M-x org-agenda M’, or
equivalently start the TODO part after the slash with ‘!’.  Using ‘M-x
org-agenda M’ or ‘/!’ does not match TODO keywords in a DONE state.
Examples:

‘work/WAITING’
     Same as ‘work+TODO​="WAITING"’.

‘work/!-WAITING-NEXT’
     Select ‘work’-tagged TODO lines that are neither ‘WAITING’ nor
     ‘NEXT’.

‘work/!+WAITING|+NEXT’
     Select ‘work’-tagged TODO lines that are either ‘WAITING’ or
     ‘NEXT’.

   ---------- Footnotes ----------

   (1) If you quote alphanumeric characters or underscores with a
backslash, that backslash is ignored.


File: org.info,  Node: Search view,  Next: Stuck projects,  Prev: Matching tags and properties,  Up: Built-in Agenda Views

11.3.4 Search view
------------------

This agenda view is a general text search facility for Org mode entries.
It is particularly useful to find notes.

‘M-x org-agenda s’ (‘org-search-view’)
     This is a special search that lets you select entries by matching a
     substring or specific words using a boolean logic.

   For example, the search string ‘computer equipment’ matches entries
that contain ‘computer equipment’ as a substring, even if the two words
are separated by more space or a line break.

   Search view can also search for specific keywords in the entry, using
Boolean logic.  The search string ‘+computer +wifi -ethernet
-{8\.11[bg]}’ matches note entries that contain the keywords ‘computer’
and ‘wifi’, but not the keyword ‘ethernet’, and which are also not
matched by the regular expression ‘8\.11[bg]’, meaning to exclude both
‘8.11b’ and ‘8.11g’.  The first ‘+’ is necessary to turn on boolean
search, other ‘+’ characters are optional.  For more details, see the
docstring of the command ‘org-search-view’.

   You can incrementally and conveniently adjust a boolean search from
the agenda search view with the following keys

‘[’     Add a positive search word
‘]’     Add a negative search word
‘{’     Add a positive regular expression
‘}’     Add a negative regular expression

   Note that in addition to the agenda files, this command also searches
the files listed in ‘org-agenda-text-search-extra-files’.


File: org.info,  Node: Stuck projects,  Prev: Search view,  Up: Built-in Agenda Views

11.3.5 Stuck projects
---------------------

If you are following a system like David Allen’s GTD to organize your
work, one of the “duties” you have is a regular review to make sure that
all projects move along.  A _stuck_ project is a project that has no
defined next actions, so it never shows up in the TODO lists Org mode
produces.  During the review, you need to identify such projects and
define next actions for them.

‘M-x org-agenda #’ (‘org-agenda-list-stuck-projects’)
     List projects that are stuck.

‘M-x org-agenda !’
     Customize the variable ‘org-stuck-projects’ to define what a stuck
     project is and how to find it.

   You almost certainly need to configure this view before it works for
you.  The built-in default assumes that all your projects are level-2
headlines, and that a project is not stuck if it has at least one entry
marked with a TODO keyword ‘TODO’ or ‘NEXT’ or ‘NEXTACTION’.

   Let’s assume that you, in your own way of using Org mode, identify
projects with a tag ‘:PROJECT:’, and that you use a TODO keyword ‘MAYBE’
to indicate a project that should not be considered yet.  Let’s further
assume that the TODO keyword ‘DONE’ marks finished projects, and that
‘NEXT’ and ‘TODO’ indicate next actions.  The tag ‘:@shop:’ indicates
shopping and is a next action even without the NEXT tag.  Finally, if
the project contains the special word ‘IGNORE’ anywhere, it should not
be listed either.  In this case you would start by identifying eligible
projects with a tags/TODO match (see *note Tag Searches::)
‘+PROJECT/-MAYBE-DONE’, and then check for ‘TODO’, ‘NEXT’, ‘@shop’, and
‘IGNORE’ in the subtree to identify projects that are not stuck.  The
correct customization for this is:

     (setq org-stuck-projects
           '("+PROJECT/-MAYBE-DONE" ("NEXT" "TODO") ("@shop")
             "\\<IGNORE\\>"))

   Note that if a project is identified as non-stuck, the subtree of
this entry is searched for stuck projects.


File: org.info,  Node: Presentation and Sorting,  Next: Agenda Commands,  Prev: Built-in Agenda Views,  Up: Agenda Views

11.4 Presentation and Sorting
=============================

Before displaying items in an agenda view, Org mode visually prepares
the items and sorts them.  Each item occupies a single line.  The line
starts with a _prefix_ that contains the _category_ (see *note
Categories::) of the item and other important information.  You can
customize in which column tags are displayed through
‘org-agenda-tags-column’.  You can also customize the prefix using the
option ‘org-agenda-prefix-format’.  This prefix is followed by a
cleaned-up version of the outline headline associated with the item.

* Menu:

* Categories::                   Not all tasks are equal.
* Time-of-day specifications::   How the agenda knows the time.
* Sorting of agenda items::      The order of things.
* Filtering/limiting agenda items:: Dynamically narrow the agenda.


File: org.info,  Node: Categories,  Next: Time-of-day specifications,  Up: Presentation and Sorting

11.4.1 Categories
-----------------

The category is a broad label assigned to each agenda item.  By default,
the category is simply derived from the file name, but you can also
specify it with a special line in the buffer, like this:

     #+CATEGORY: Thesis

   If you would like to have a special category for a single entry or a
(sub)tree, give the entry a ‘CATEGORY’ property with the special
category you want to apply as the value.

   The display in the agenda buffer looks best if the category is not
longer than 10 characters.  You can set up icons for category by
customizing the ‘org-agenda-category-icon-alist’ variable.


File: org.info,  Node: Time-of-day specifications,  Next: Sorting of agenda items,  Prev: Categories,  Up: Presentation and Sorting

11.4.2 Time-of-day specifications
---------------------------------

Org mode checks each agenda item for a time-of-day specification.  The
time can be part of the timestamp that triggered inclusion into the
agenda, for example

     <2005-05-10 Tue 19:00>

Time ranges can be specified with two timestamps:

     <2005-05-10 Tue 20:30>--<2005-05-10 Tue 22:15>

   In the headline of the entry itself, a time(range)—like ‘12:45’ or a
‘8:30-1pm’—may also appear as plain text(1).

   If the agenda integrates the Emacs diary (see *note Weekly/daily
agenda::), time specifications in diary entries are recognized as well.

   For agenda display, Org mode extracts the time and displays it in a
standard 24 hour format as part of the prefix.  The example times in the
previous paragraphs would end up in the agenda like this:

      8:30-13:00 Arthur Dent lies in front of the bulldozer
     12:45...... Ford Prefect arrives and takes Arthur to the pub
     19:00...... The Vogon reads his poem
     20:30-22:15 Marvin escorts the Hitchhikers to the bridge

   If the agenda is in single-day mode, or for the display of today, the
timed entries are embedded in a time grid, like

      8:00...... ------------------
      8:30-13:00 Arthur Dent lies in front of the bulldozer
     10:00...... ------------------
     12:00...... ------------------
     12:45...... Ford Prefect arrives and takes Arthur to the pub
     14:00...... ------------------
     16:00...... ------------------
     18:00...... ------------------
     19:00...... The Vogon reads his poem
     20:00...... ------------------
     20:30-22:15 Marvin escorts the Hitchhikers to the bridge

   The time grid can be turned on and off with the variable
‘org-agenda-use-time-grid’, and can be configured with
‘org-agenda-time-grid’.

   ---------- Footnotes ----------

   (1) You can, however, disable this by setting
‘org-agenda-search-headline-for-time’ variable to a ‘nil’ value.


File: org.info,  Node: Sorting of agenda items,  Next: Filtering/limiting agenda items,  Prev: Time-of-day specifications,  Up: Presentation and Sorting

11.4.3 Sorting of agenda items
------------------------------

Before being inserted into a view, the items are sorted.  How this is
done depends on the type of view.

   • For the daily/weekly agenda, the items for each day are sorted.
     The default order is to first collect all items containing an
     explicit time-of-day specification.  These entries are shown at the
     beginning of the list, as a _schedule_ for the day.  After that,
     items remain grouped in categories, in the sequence given by
     ‘org-agenda-files’.  Within each category, items are sorted by
     urgency, which is composed of the base priority (see *note
     Priorities::; 2000 for priority ‘A’, 1000 for ‘B’, and 0 for ‘C’),
     plus additional increments for overdue scheduled or deadline items.

   • For the TODO list, items remain in the order of categories, but
     within each category, sorting takes place according to urgency.
     The urgency used for sorting derives from the priority cookie, with
     additions depending on how close an item is to its due or scheduled
     date.

   • For tags matches, items are not sorted at all, but just appear in
     the sequence in which they are found in the agenda files.

   Sorting can be customized using the variable
‘org-agenda-sorting-strategy’, and may also include criteria based on
the estimated effort of an entry (see *note Effort Estimates::).


File: org.info,  Node: Filtering/limiting agenda items,  Prev: Sorting of agenda items,  Up: Presentation and Sorting

11.4.4 Filtering/limiting agenda items
--------------------------------------

Agenda built-in or custom commands are statically defined.  Agenda
filters and limits allow to flexibly narrow down the list of agenda
entries.

   _Filters_ only change the visibility of items, are very fast and are
mostly used interactively(1).  You can switch quickly between different
filters without having to recreate the agenda.  _Limits_ on the other
hand take effect before the agenda buffer is populated, so they are
mostly useful when defined as local variables within custom agenda
commands.

Filtering in the agenda
.......................

The general filtering command is ‘org-agenda-filter’, bound to ‘/’.
Before we introduce it, we describe commands for individual filter
types.  All filtering commands handle prefix arguments in the same way:
A single ‘C-u’ prefix negates the filter, so it removes lines selected
by the filter.  A double prefix adds the new filter condition to the
one(s) already in place, so filter elements are accumulated.

‘\’ (‘org-agenda-filter-by-tag’)
     Filter the agenda view with respect to a tag.  You are prompted for
     a tag selection letter; ‘<SPC>’ means any tag at all.  Pressing
     ‘<TAB>’ at that prompt offers completion to select a tag, including
     any tags that do not have a selection character.  The command then
     hides all entries that do not contain or inherit this tag.
     Pressing ‘+’ or ‘-’ at the prompt switches between filtering for
     and against the next tag.  To clear the filter, press ‘\’ twice
     (once to call the command again, and once at the prompt).

‘<’ (‘org-agenda-filter-by-category’)
     Filter by category of the line at point, and show only entries with
     this category.  When called with a prefix argument, hide all
     entries with the category at point.  To clear the filter, call this
     command again by pressing ‘<’.

‘=’ (‘org-agenda-filter-by-regexp’)
     Filter the agenda view by a regular expression: only show agenda
     entries matching the regular expression the user entered.  To clear
     the filter, call the command again by pressing ‘=’.

‘_’ (‘org-agenda-filter-by-effort’)
     Filter the agenda view with respect to effort estimates, so select
     tasks that take the right amount of time.  You first need to set up
     a list of efforts globally, for example

          (setq org-global-properties
                '(("Effort_ALL". "0 0:10 0:30 1:00 2:00 3:00 4:00")))

     You can then filter for an effort by first typing an operator, one
     of ‘<’, ‘>’ and ‘=’, and then the one-digit index of an effort
     estimate in your array of allowed values, where ‘0’ means the 10th
     value.  The filter then restricts to entries with effort
     smaller-or-equal, equal, or larger-or-equal than the selected
     value.  For application of the operator, entries without a defined
     effort are treated according to the value of
     ‘org-sort-agenda-noeffort-is-high’.  To clear the filter, press ‘_’
     twice (once to call the command again, and once at the first
     prompt).

‘^’ (‘org-agenda-filter-by-top-headline’)
     Filter the current agenda view and only display items that fall
     under the same top-level headline as the current entry.  To clear
     the filter, call this command again by pressing ‘^’.

‘/’ (‘org-agenda-filter’)
     This is the unified interface to four of the five filter methods
     described above.  At the prompt, specify different filter elements
     in a single string, with full completion support.  For example,

          +work-John+<0:10-/plot/

     selects entries with category ‘work’ and effort estimates below 10
     minutes, and deselects entries with tag ‘John’ or matching the
     regexp ‘plot’ (see *note Regular Expressions::).  You can leave ‘+’
     out if that does not lead to ambiguities.  The sequence of elements
     is arbitrary.  The filter syntax assumes that there is no overlap
     between categories and tags.  Otherwise, tags take priority.  If
     you reply to the prompt with the empty string, all filtering is
     removed.  If a filter is specified, it replaces all current
     filters.  But if you call the command with a double prefix
     argument, or if you add an additional ‘+’ (e.g., ‘++work’) to the
     front of the string, the new filter elements are added to the
     active ones.  A single prefix argument applies the entire filter in
     a negative sense.

‘|’ (‘org-agenda-filter-remove-all’)
     Remove all filters in the current agenda view.

Computed tag filtering
......................

If the variable ‘org-agenda-auto-exclude-function’ is set to a
user-defined function, that function can select tags that should be used
as a tag filter when requested.  The function will be called with
lower-case versions of all tags represented in the current view.  The
function should return ‘"-tag"’ if the filter should remove entries with
that tag, ‘"+tag"’ if only entries with this tag should be kept, or
‘nil’ if that tag is irrelevant.  For example, let’s say you use a ‘Net’
tag to identify tasks which need network access, an ‘Errand’ tag for
errands in town, and a ‘Call’ tag for making phone calls.  You could
auto-exclude these tags based on the availability of the Internet, and
outside of business hours, with something like this:

     (defun my-auto-exclude-fn (tag)
       (when (cond ((string= tag "net")
                    (/= 0 (call-process "/sbin/ping" nil nil nil
                                        "-c1" "-q" "-t1" "mail.gnu.org")))
                   ((member tag '("errand" "call"))
                    (let ((hr (nth 2 (decode-time))))
                      (or (< hr 8) (> hr 21)))))
         (concat "-" tag)))

     (setq org-agenda-auto-exclude-function #'my-auto-exclude-fn)

   You can apply this self-adapting filter by using a triple prefix
argument to ‘org-agenda-filter’, i.e. press ‘C-u C-u C-u /’, or by
pressing ‘<RET>’ in ‘org-agenda-filter-by-tag’.

Setting limits for the agenda
.............................

Here is a list of options that you can set, either globally, or locally
in your custom agenda views (see *note Custom Agenda Views::).

‘org-agenda-max-entries’
     Limit the number of entries.

‘org-agenda-max-effort’
     Limit the duration of accumulated efforts (as minutes).

‘org-agenda-max-todos’
     Limit the number of entries with TODO keywords.

‘org-agenda-max-tags’
     Limit the number of tagged entries.

   When set to a positive integer, each option excludes entries from
other categories: for example, ‘(setq org-agenda-max-effort 100)’ limits
the agenda to 100 minutes of effort and exclude any entry that has no
effort property.  If you want to include entries with no effort
property, use a negative value for ‘org-agenda-max-effort’.  One useful
setup is to use ‘org-agenda-max-entries’ locally in a custom command.
For example, this custom command displays the next five entries with a
‘NEXT’ TODO keyword.

     (setq org-agenda-custom-commands
           '(("n" todo "NEXT"
              ((org-agenda-max-entries 5)))))

   Once you mark one of these five entry as DONE, rebuilding the agenda
will again the next five entries again, including the first entry that
was excluded so far.

   You can also dynamically set temporary limits, which are lost when
rebuilding the agenda:

‘~’ (‘org-agenda-limit-interactively’)
     This prompts for the type of limit to apply and its value.

   ---------- Footnotes ----------

   (1) Custom agenda commands can preset a filter by binding one of the
variables ‘org-agenda-tag-filter-preset’,
‘org-agenda-category-filter-preset’, ‘org-agenda-effort-filter-preset’
or ‘org-agenda-regexp-filter-preset’ as an option.  This filter is then
applied to the view and persists as a basic filter through refreshes and
more secondary filtering.  The filter is a global property of the entire
agenda view—in a block agenda, you should only set this in the global
options section, not in the section of an individual block.


File: org.info,  Node: Agenda Commands,  Next: Custom Agenda Views,  Prev: Presentation and Sorting,  Up: Agenda Views

11.5 Commands in the Agenda Buffer
==================================

Entries in the agenda buffer are linked back to the Org file or diary
file where they originate.  You are not allowed to edit the agenda
buffer itself, but commands are provided to show and jump to the
original entry location, and to edit the Org files “remotely” from the
agenda buffer.  In this way, all information is stored only once,
removing the risk that your agenda and note files may diverge.

   Some commands can be executed with mouse clicks on agenda lines.  For
the other commands, point needs to be in the desired line.

Motion
------

‘n’ (‘org-agenda-next-line’)
     Next line (same as ‘<DOWN>’ and ‘C-n’).

‘p’ (‘org-agenda-previous-line’)
     Previous line (same as ‘<UP>’ and ‘C-p’).

View/Go to Org file
-------------------

‘<SPC>’ or ‘mouse-3’ (‘org-agenda-show-and-scroll-up’)
     Display the original location of the item in another window.  With
     a prefix argument, make sure that drawers stay folded.

‘L’ (‘org-agenda-recenter’)
     Display original location and recenter that window.

‘<TAB>’ or ‘mouse-2’ (‘org-agenda-goto’)
     Go to the original location of the item in another window.

‘<RET>’ (‘org-agenda-switch-to’)
     Go to the original location of the item and delete other windows.

‘F’ (‘org-agenda-follow-mode’)
     Toggle Follow mode.  In Follow mode, as you move point through the
     agenda buffer, the other window always shows the corresponding
     location in the Org file.  The initial setting for this mode in new
     agenda buffers can be set with the variable
     ‘org-agenda-start-with-follow-mode’.

‘C-c C-x b’ (‘org-agenda-tree-to-indirect-buffer’)
     Display the entire subtree of the current item in an indirect
     buffer.  With a numeric prefix argument N, go up to level N and
     then take that tree.  If N is negative, go up that many levels.
     With a ‘C-u’ prefix, do not remove the previously used indirect
     buffer.

‘C-c C-o’ (‘org-agenda-open-link’)
     Follow a link in the entry.  This offers a selection of any links
     in the text belonging to the referenced Org node.  If there is only
     one link, follow it without a selection prompt.

Change display
--------------

‘A’
     Interactively select another agenda view and append it to the
     current view.

‘o’
     Delete other windows.

‘v d’ or short ‘d’ (‘org-agenda-day-view’)
     Switch to day view.  When switching to day view, this setting
     becomes the default for subsequent agenda refreshes.  A numeric
     prefix argument may be used to jump directly to a specific day of
     the year.  For example, ‘32 d’ jumps to February 1st.  When setting
     day view, a year may be encoded in the prefix argument as well.
     For example, ‘200712 d’ jumps to January 12, 2007.  If such a year
     specification has only one or two digits, it is expanded into one
     of the 30 next years or the last 69 years.

‘v w’ or short ‘w’ (‘org-agenda-week-view’)
     Switch to week view.  When switching week view, this setting
     becomes the default for subsequent agenda refreshes.  A numeric
     prefix argument may be used to jump directly to a specific day of
     the ISO week.  For example ‘9 w’ to ISO week number 9.  When
     setting week view, a year may be encoded in the prefix argument as
     well.  For example, ‘200712 w’ jumps to week 12 in 2007.  If such a
     year specification has only one or two digits, it is expanded into
     one of the 30 next years or the last 69 years.

‘v m’ (‘org-agenda-month-view’)
     Switch to month view.  Because month views are slow to create, they
     do not become the default for subsequent agenda refreshes.  A
     numeric prefix argument may be used to jump directly to a specific
     day of the month.  When setting month view, a year may be encoded
     in the prefix argument as well.  For example, ‘200712 m’ jumps to
     December, 2007.  If such a year specification has only one or two
     digits, it is expanded into one of the 30 next years or the last 69
     years.

‘v y’ (‘org-agenda-year-view’)
     Switch to year view.  Because year views are slow to create, they
     do not become the default for subsequent agenda refreshes.  A
     numeric prefix argument may be used to jump directly to a specific
     day of the year.

‘v <SPC>’ (‘org-agenda-reset-view’)
     Reset the current view to ‘org-agenda-span’.

‘f’ (‘org-agenda-later’)
     Go forward in time to display the span following the current one.
     For example, if the display covers a week, switch to the following
     week.  With a prefix argument, repeat that many times.

‘b’ (‘org-agenda-earlier’)
     Go backward in time to display earlier dates.

‘.’ (‘org-agenda-goto-today’)
     Go to today.

‘j’ (‘org-agenda-goto-date’)
     Prompt for a date and go there.

‘J’ (‘org-agenda-clock-goto’)
     Go to the currently clocked-in task _in the agenda buffer_.

‘D’ (‘org-agenda-toggle-diary’)
     Toggle the inclusion of diary entries.  See *note Weekly/daily
     agenda::.

‘v l’ or ‘v L’ or short ‘l’ (‘org-agenda-log-mode’)
     Toggle Logbook mode.  In Logbook mode, entries that were marked as
     done while logging was on (see the variable ‘org-log-done’) are
     shown in the agenda, as are entries that have been clocked on that
     day.  You can configure the entry types that should be included in
     log mode using the variable ‘org-agenda-log-mode-items’.  When
     called with a ‘C-u’ prefix argument, show all possible logbook
     entries, including state changes.  When called with two prefix
     arguments ‘C-u C-u’, show only logging information, nothing else.
     ‘v L’ is equivalent to ‘C-u v l’.

‘v [’ or short ‘[’ (‘org-agenda-manipulate-query-add’)
     Include inactive timestamps into the current view.  Only for
     weekly/daily agenda.

‘v a’ (‘org-agenda-archives-mode’)
     Toggle Archives mode.  In Archives mode, trees that are archived
     (see *note Internal archiving::) are also scanned when producing
     the agenda.  To exit archives mode, press ‘v a’ again.

‘v A’
     Toggle Archives mode.  Include all archive files as well.

‘v R’ or short ‘R’ (‘org-agenda-clockreport-mode’)
     Toggle Clockreport mode.  In Clockreport mode, the daily/weekly
     agenda always shows a table with the clocked times for the time
     span and file scope covered by the current agenda view.  The
     initial setting for this mode in new agenda buffers can be set with
     the variable ‘org-agenda-start-with-clockreport-mode’.  By using a
     prefix argument when toggling this mode (i.e., ‘C-u R’), the clock
     table does not show contributions from entries that are hidden by
     agenda filtering(1).  See also the variables
     ‘org-clock-report-include-clocking-task’ and
     ‘org-agenda-clock-report-header’.

‘v c’
     Show overlapping clock entries, clocking gaps, and other clocking
     problems in the current agenda range.  You can then visit clocking
     lines and fix them manually.  See the variable
     ‘org-agenda-clock-consistency-checks’ for information on how to
     customize the definition of what constituted a clocking problem.
     To return to normal agenda display, press ‘l’ to exit Logbook mode.

‘v E’ or short ‘E’ (‘org-agenda-entry-text-mode’)
     Toggle entry text mode.  In entry text mode, a number of lines from
     the Org outline node referenced by an agenda line are displayed
     below the line.  The maximum number of lines is given by the
     variable ‘org-agenda-entry-text-maxlines’.  Calling this command
     with a numeric prefix argument temporarily modifies that number to
     the prefix value.

‘G’ (‘org-agenda-toggle-time-grid’)
     Toggle the time grid on and off.  See also the variables
     ‘org-agenda-use-time-grid’ and ‘org-agenda-time-grid’.

‘r’ (‘org-agenda-redo’)
‘g’
     Recreate the agenda buffer, for example to reflect the changes
     after modification of the timestamps of items with ‘S-<LEFT>’ and
     ‘S-<RIGHT>’.  When the buffer is the global TODO list, a prefix
     argument is interpreted to create a selective list for a specific
     TODO keyword.

‘C-x C-s’ or short ‘s’ (‘org-save-all-org-buffers’)
     Save all Org buffers in the current Emacs session, and also the
     locations of IDs.

‘C-c C-x C-c’ (‘org-agenda-columns’)
     Invoke column view (see *note Column View::) in the agenda buffer.
     The column view format is taken from the entry at point, or, if
     there is no entry at point, from the first entry in the agenda
     view.  So whatever the format for that entry would be in the
     original buffer (taken from a property, from a ‘COLUMNS’ keyword,
     or from the default variable ‘org-columns-default-format’) is used
     in the agenda.

‘C-c C-x >’ (‘org-agenda-remove-restriction-lock’)
     Remove the restriction lock on the agenda, if it is currently
     restricted to a file or subtree (see *note Agenda Files::).

‘M-<UP>’ (‘org-agenda-drag-line-backward’)
     Drag the line at point backward one line.  With a numeric prefix
     argument, drag backward by that many lines.

     Moving agenda lines does not persist after an agenda refresh and
     does not modify the contributing Org files.

‘M-<DOWN>’ (‘org-agenda-drag-line-forward’)
     Drag the line at point forward one line.  With a numeric prefix
     argument, drag forward by that many lines.

Remote editing
--------------

‘0--9’
     Digit argument.

‘C-_’ (‘org-agenda-undo’)
     Undo a change due to a remote editing command.  The change is
     undone both in the agenda buffer and in the remote buffer.

‘t’ (‘org-agenda-todo’)
     Change the TODO state of the item, both in the agenda and in the
     original Org file.  A prefix arg is passed through to the
     ‘org-todo’ command, so for example a ‘C-u’ prefix are will trigger
     taking a note to document the state change.

‘C-S-<RIGHT>’ (‘org-agenda-todo-nextset’)
     Switch to the next set of TODO keywords.

‘C-S-<LEFT>’, ‘org-agenda-todo-previousset’
     Switch to the previous set of TODO keywords.

‘C-k’ (‘org-agenda-kill’)
     Delete the current agenda item along with the entire subtree
     belonging to it in the original Org file.  If the text to be
     deleted remotely is longer than one line, the kill needs to be
     confirmed by the user.  See variable ‘org-agenda-confirm-kill’.

‘C-c C-w’ (‘org-agenda-refile’)
     Refile the entry at point.

‘C-c C-x C-a’ or short ‘a’ (‘org-agenda-archive-default-with-confirmation’)
     Archive the subtree corresponding to the entry at point using the
     default archiving command set in ‘org-archive-default-command’.
     When using the ‘a’ key, confirmation is required.

‘C-c C-x a’ (‘org-agenda-toggle-archive-tag’)
     Toggle the archive tag (see *note Internal archiving::) for the
     current headline.

‘C-c C-x A’ (‘org-agenda-archive-to-archive-sibling’)
     Move the subtree corresponding to the current entry to its _archive
     sibling_.

‘C-c C-x C-s’ or short ‘$’ (‘org-agenda-archive’)
     Archive the subtree corresponding to the current headline.  This
     means the entry is moved to the configured archive location, most
     likely a different file.

‘T’ (‘org-agenda-show-tags’)
     Show all tags associated with the current item.  This is useful if
     you have turned off ‘org-agenda-show-inherited-tags’, but still
     want to see all tags of a headline occasionally.

‘:’ (‘org-agenda-set-tags’)
     Set tags for the current headline.  If there is an active region in
     the agenda, change a tag for all headings in the region.

‘,’ (‘org-agenda-priority’)
     Set the priority for the current item.  Org mode prompts for the
     priority character.  If you reply with ‘<SPC>’, the priority cookie
     is removed from the entry.

‘+’ or ‘S-<UP>’ (‘org-agenda-priority-up’)
     Increase the priority of the current item.  The priority is changed
     in the original buffer, but the agenda is not resorted.  Use the
     ‘r’ key for this.

‘-’ or ‘S-<DOWN>’ (‘org-agenda-priority-down’)
     Decrease the priority of the current item.

‘C-c C-x e’ or short ‘e’ (‘org-agenda-set-effort’)
     Set the effort property for the current item.

‘C-c C-z’ or short ‘z’ (‘org-agenda-add-note’)
     Add a note to the entry.  This note is recorded, and then filed to
     the same location where state change notes are put.  Depending on
     ‘org-log-into-drawer’, this may be inside a drawer.

‘C-c C-a’ (‘org-attach’)
     Dispatcher for all command related to attachments.

‘C-c C-s’ (‘org-agenda-schedule’)
     Schedule this item.  With a prefix argument, remove the scheduling
     timestamp

‘C-c C-d’ (‘org-agenda-deadline’)
     Set a deadline for this item.  With a prefix argument, remove the
     deadline.

‘S-<RIGHT>’ (‘org-agenda-do-date-later’)
     Change the timestamp associated with the current line by one day
     into the future.  If the date is in the past, the first call to
     this command moves it to today.  With a numeric prefix argument,
     change it by that many days.  For example, ‘3 6 5 S-<RIGHT>’
     changes it by a year.  With a ‘C-u’ prefix, change the time by one
     hour.  If you immediately repeat the command, it will continue to
     change hours even without the prefix argument.  With a double ‘C-u
     C-u’ prefix, do the same for changing minutes.  The stamp is
     changed in the original Org file, but the change is not directly
     reflected in the agenda buffer.  Use ‘r’ or ‘g’ to update the
     buffer.

‘S-<LEFT>’ (‘org-agenda-do-date-earlier’)
     Change the timestamp associated with the current line by one day
     into the past.

‘>’ (‘org-agenda-date-prompt’)
     Change the timestamp associated with the current line.  The key ‘>’
     has been chosen, because it is the same as ‘S-.’ on my keyboard.

‘I’ (‘org-agenda-clock-in’)
     Start the clock on the current item.  If a clock is running
     already, it is stopped first.

‘O’ (‘org-agenda-clock-out’)
     Stop the previously started clock.

‘X’ (‘org-agenda-clock-cancel’)
     Cancel the currently running clock.

‘J’ (‘org-agenda-clock-goto’)
     Jump to the running clock in another window.

‘k’ (‘org-agenda-capture’)
     Like ‘org-capture’, but use the date at point as the default date
     for the capture template.  See ‘org-capture-use-agenda-date’ to
     make this the default behavior of ‘org-capture’.

Bulk remote editing selected entries
------------------------------------

‘m’ (‘org-agenda-bulk-mark’)

     Mark the entry at point for bulk action.  If there is an active
     region in the agenda, mark the entries in the region.  With numeric
     prefix argument, mark that many successive entries.

‘*’ (‘org-agenda-bulk-mark-all’)

     Mark all visible agenda entries for bulk action.

‘u’ (‘org-agenda-bulk-unmark’)

     Unmark entry for bulk action.

‘U’ (‘org-agenda-bulk-unmark-all’)

     Unmark all marked entries for bulk action.

‘M-m’ (‘org-agenda-bulk-toggle’)

     Toggle mark of the entry at point for bulk action.

‘M-*’ (‘org-agenda-bulk-toggle-all’)

     Toggle mark of every entry for bulk action.

‘%’ (‘org-agenda-bulk-mark-regexp’)

     Mark entries matching a regular expression for bulk action.

‘B’ (‘org-agenda-bulk-action’)

     Bulk action: act on all marked entries in the agenda.  This prompts
     for another key to select the action to be applied.  The prefix
     argument to ‘B’ is passed through to the ‘s’ and ‘d’ commands, to
     bulk-remove these special timestamps.  By default, marks are
     removed after the bulk.  If you want them to persist, set
     ‘org-agenda-bulk-persistent-marks’ to ‘t’ or hit ‘p’ at the prompt.

     ‘p’
          Toggle persistent marks.

     ‘$’
          Archive all selected entries.

     ‘A’
          Archive entries by moving them to their respective archive
          siblings.

     ‘t’
          Change TODO state.  This prompts for a single TODO keyword and
          changes the state of all selected entries, bypassing blocking
          and suppressing logging notes—but not timestamps.

     ‘+’
          Add a tag to all selected entries.

     ‘-’
          Remove a tag from all selected entries.

     ‘s’
          Schedule all items to a new date.  To shift existing schedule
          dates by a fixed number of days, use something starting with
          double plus at the prompt, for example ‘++8d’ or ‘++2w’.

     ‘d’
          Set deadline to a specific date.

     ‘r’
          Prompt for a single refile target and move all entries.  The
          entries are no longer in the agenda; refresh (‘g’) to bring
          them back.

     ‘S’
          Reschedule randomly into the coming N days.  N is prompted
          for.  With a prefix argument (‘C-u B S’), scatter only across
          weekdays.

     ‘f’
          Apply a function(2) to marked entries.  For example, the
          function below sets the ‘CATEGORY’ property of the entries to
          ‘web’.

               (defun set-category ()
                 (interactive "P")
                 (let ((marker (or (org-get-at-bol 'org-hd-marker)
                                   (org-agenda-error))))
                   (org-with-point-at marker
                     (org-back-to-heading t)
                     (org-set-property "CATEGORY" "web"))))

Calendar commands
-----------------

‘c’ (‘org-agenda-goto-calendar’)
     Open the Emacs calendar and go to the date at point in the agenda.

‘c’ (‘org-calendar-goto-agenda’)
     When in the calendar, compute and show the Org agenda for the date
     at point.

‘i’ (‘org-agenda-diary-entry’)

     Insert a new entry into the diary, using the date at point and (for
     block entries) the date at the mark.  This adds to the Emacs diary
     file(3), in a way similar to the ‘i’ command in the calendar.  The
     diary file pops up in another window, where you can add the entry.

     If you configure ‘org-agenda-diary-file’ to point to an Org file,
     Org creates entries in that file instead.  Most entries are stored
     in a date-based outline tree that will later make it easy to
     archive appointments from previous months/years.  The tree is built
     under an entry with a ‘DATE_TREE’ property, or else with years as
     top-level entries.  Emacs prompts you for the entry text—if you
     specify it, the entry is created in ‘org-agenda-diary-file’ without
     further interaction.  If you directly press ‘<RET>’ at the prompt
     without typing text, the target file is shown in another window for
     you to finish the entry there.  See also the ‘k r’ command.

‘M’ (‘org-agenda-phases-of-moon’)
     Show the phases of the moon for the three months around current
     date.

‘S’ (‘org-agenda-sunrise-sunset’)
     Show sunrise and sunset times.  The geographical location must be
     set with calendar variables, see the documentation for the Emacs
     calendar.

‘C’ (‘org-agenda-convert-date’)
     Convert the date at point into many other cultural and historic
     calendars.

‘H’ (‘org-agenda-holidays’)
     Show holidays for three months around point date.

Quit and exit
-------------

‘q’ (‘org-agenda-quit’)

     Quit agenda, remove the agenda buffer.

‘x’ (‘org-agenda-exit’)

     Exit agenda, remove the agenda buffer and all buffers loaded by
     Emacs for the compilation of the agenda.  Buffers created by the
     user to visit Org files are not removed.

   ---------- Footnotes ----------

   (1) Only tags filtering is respected here, effort filtering is
ignored.

   (2) You can also create persistent custom functions through
‘org-agenda-bulk-custom-functions’.

   (3) This file is parsed for the agenda when
‘org-agenda-include-diary’ is set.


File: org.info,  Node: Custom Agenda Views,  Next: Exporting Agenda Views,  Prev: Agenda Commands,  Up: Agenda Views

11.6 Custom Agenda Views
========================

Custom agenda commands serve two purposes: to store and quickly access
frequently used TODO and tags searches, and to create special composite
agenda buffers.  Custom agenda commands are accessible through the
dispatcher (see *note Agenda Dispatcher::), just like the default
commands.

* Menu:

* Storing searches::             Type once, use often.
* Block agenda::                 All the stuff you need in a single buffer.
* Setting options::              Changing the rules.


File: org.info,  Node: Storing searches,  Next: Block agenda,  Up: Custom Agenda Views

11.6.1 Storing searches
-----------------------

The first application of custom searches is the definition of keyboard
shortcuts for frequently used searches, either creating an agenda
buffer, or a sparse tree (the latter covering of course only the current
buffer).

   Custom commands are configured in the variable
‘org-agenda-custom-commands’.  You can customize this variable, for
example by pressing ‘C’ from the agenda dispatcher (see *note Agenda
Dispatcher::).  You can also directly set it with Emacs Lisp in the
Emacs init file.  The following example contains all valid agenda views:

     (setq org-agenda-custom-commands
           '(("x" agenda)
             ("y" agenda*)
             ("w" todo "WAITING")
             ("W" todo-tree "WAITING")
             ("u" tags "+boss-urgent")
             ("v" tags-todo "+boss-urgent")
             ("U" tags-tree "+boss-urgent")
             ("f" occur-tree "\\<FIXME\\>")
             ("h" . "HOME+Name tags searches") ;description for "h" prefix
             ("hl" tags "+home+Lisa")
             ("hp" tags "+home+Peter")
             ("hk" tags "+home+Kim")))

   The initial string in each entry defines the keys you have to press
after the dispatcher command in order to access the command.  Usually
this is just a single character, but if you have many similar commands,
you can also define two-letter combinations where the first character is
the same in several combinations and serves as a prefix key(1).  The
second parameter is the search type, followed by the string or regular
expression to be used for the matching.  The example above will
therefore define:

‘x’
     as a global search for agenda entries planned(2) this week/day.

‘y’
     as the same search, but only for entries with an hour specification
     like ‘[h]h:mm’—think of them as appointments.

‘w’
     as a global search for TODO entries with ‘WAITING’ as the TODO
     keyword.

‘W’
     as the same search, but only in the current buffer and displaying
     the results as a sparse tree.

‘u’
     as a global tags search for headlines tagged ‘boss’ but not
     ‘urgent’.

‘v’
     The same search, but limiting it to headlines that are also TODO
     items.

‘U’
     as the same search, but only in the current buffer and displaying
     the result as a sparse tree.

‘f’
     to create a sparse tree (again, current buffer only) with all
     entries containing the word ‘FIXME’.

‘h’
     as a prefix command for a ‘HOME’ tags search where you have to
     press an additional key (‘l’, ‘p’ or ‘k’) to select a name (Lisa,
     Peter, or Kim) as additional tag to match.

   Note that ‘*-tree’ agenda views need to be called from an Org buffer
as they operate on the current buffer only.

   ---------- Footnotes ----------

   (1) You can provide a description for a prefix key by inserting a
cons cell with the prefix and the description.

   (2) _Planned_ means here that these entries have some planning
information attached to them, like a timestamp, a scheduled or a
deadline string.  See ‘org-agenda-entry-types’ on how to set what
planning information is taken into account.


File: org.info,  Node: Block agenda,  Next: Setting options,  Prev: Storing searches,  Up: Custom Agenda Views

11.6.2 Block agenda
-------------------

Another possibility is the construction of agenda views that comprise
the results of _several_ commands, each of which creates a block in the
agenda buffer.  The available commands include ‘agenda’ for the daily or
weekly agenda (as created with ‘a’) , ‘alltodo’ for the global TODO list
(as constructed with ‘t’), ‘stuck’ for the list of stuck projects (as
obtained with ‘#’) and the matching commands discussed above: ‘todo’,
‘tags’, and ‘tags-todo’.

   Here are two examples:

     (setq org-agenda-custom-commands
           '(("h" "Agenda and Home-related tasks"
              ((agenda "")
               (tags-todo "home")
               (tags "garden")))
             ("o" "Agenda and Office-related tasks"
              ((agenda "")
               (tags-todo "work")
               (tags "office")))))

This defines ‘h’ to create a multi-block view for stuff you need to
attend to at home.  The resulting agenda buffer contains your agenda for
the current week, all TODO items that carry the tag ‘home’, and also all
lines tagged with ‘garden’.  Finally the command ‘o’ provides a similar
view for office tasks.


File: org.info,  Node: Setting options,  Prev: Block agenda,  Up: Custom Agenda Views

11.6.3 Setting options for custom commands
------------------------------------------

Org mode contains a number of variables regulating agenda construction
and display.  The global variables define the behavior for all agenda
commands, including the custom commands.  However, if you want to change
some settings just for a single custom view, you can do so.  Setting
options requires inserting a list of variable names and values at the
right spot in ‘org-agenda-custom-commands’.  For example:

     (setq org-agenda-custom-commands
           '(("w" todo "WAITING"
              ((org-agenda-sorting-strategy '(priority-down))
               (org-agenda-prefix-format "  Mixed: ")))
             ("U" tags-tree "+boss-urgent"
              ((org-show-context-detail 'minimal)))
             ("N" search ""
              ((org-agenda-files '("~org/notes.org"))
               (org-agenda-text-search-extra-files nil)))))

Now the ‘w’ command sorts the collected entries only by priority, and
the prefix format is modified to just say ‘Mixed:’ instead of giving the
category of the entry.  The sparse tags tree of ‘U’ now turns out
ultra-compact, because neither the headline hierarchy above the match,
nor the headline following the match are shown.  The command ‘N’ does a
text search limited to only a single file.

   For command sets creating a block agenda,
‘org-agenda-custom-commands’ has two separate spots for setting options.
You can add options that should be valid for just a single command in
the set, and options that should be valid for all commands in the set.
The former are just added to the command entry; the latter must come
after the list of command entries.  Going back to the block agenda
example (see *note Block agenda::), let’s change the sorting strategy
for the ‘h’ commands to ‘priority-down’, but let’s sort the results for
‘garden’ tags query in the opposite order, ‘priority-up’.  This would
look like this:

     (setq org-agenda-custom-commands
           '(("h" "Agenda and Home-related tasks"
              ((agenda)
               (tags-todo "home")
               (tags "garden"
                     ((org-agenda-sorting-strategy '(priority-up)))))
              ((org-agenda-sorting-strategy '(priority-down))))
             ("o" "Agenda and Office-related tasks"
              ((agenda)
               (tags-todo "work")
               (tags "office")))))

   As you see, the values and parentheses setting is a little complex.
When in doubt, use the customize interface to set this variable—it fully
supports its structure.  Just one caveat: when setting options in this
interface, the _values_ are just Lisp expressions.  So if the value is a
string, you need to add the double-quotes around the value yourself.

   To control whether an agenda command should be accessible from a
specific context, you can customize
‘org-agenda-custom-commands-contexts’.  Let’s say for example that you
have an agenda command ‘o’ displaying a view that you only need when
reading emails.  Then you would configure this option like this:

     (setq org-agenda-custom-commands-contexts
           '(("o" (in-mode . "message-mode"))))

   You can also tell that the command key ‘o’ should refer to another
command key ‘r’.  In that case, add this command key like this:

     (setq org-agenda-custom-commands-contexts
           '(("o" "r" (in-mode . "message-mode"))))

   See the docstring of the variable for more information.


File: org.info,  Node: Exporting Agenda Views,  Next: Agenda Column View,  Prev: Custom Agenda Views,  Up: Agenda Views

11.7 Exporting Agenda Views
===========================

If you are away from your computer, it can be very useful to have a
printed version of some agenda views to carry around.  Org mode can
export custom agenda views as plain text, HTML(1), Postscript, PDF(2),
and iCalendar files.  If you want to do this only occasionally, use the
following command:

‘C-x C-w’ (‘org-agenda-write’)

     Write the agenda view to a file.

   If you need to export certain agenda views frequently, you can
associate any custom agenda command with a list of output file names(3).
Here is an example that first defines custom commands for the agenda and
the global TODO list, together with a number of files to which to export
them.  Then we define two block agenda commands and specify file names
for them as well.  File names can be relative to the current working
directory, or absolute.

     (setq org-agenda-custom-commands
           '(("X" agenda "" nil ("agenda.html" "agenda.ps"))
             ("Y" alltodo "" nil ("todo.html" "todo.txt" "todo.ps"))
             ("h" "Agenda and Home-related tasks"
              ((agenda "")
               (tags-todo "home")
               (tags "garden"))
              nil
              ("~/views/home.html"))
             ("o" "Agenda and Office-related tasks"
              ((agenda)
               (tags-todo "work")
               (tags "office"))
              nil
              ("~/views/office.ps" "~/calendars/office.ics"))))

   The extension of the file name determines the type of export.  If it
is ‘.html’, Org mode uses the htmlize package to convert the buffer to
HTML and save it to this file name.  If the extension is ‘.ps’,
‘ps-print-buffer-with-faces’ is used to produce Postscript output.  If
the extension is ‘.ics’, iCalendar export is run export over all files
that were used to construct the agenda, and limit the export to entries
listed in the agenda.  Any other extension produces a plain ASCII file.

   The export files are _not_ created when you use one of those commands
interactively because this might use too much overhead.  Instead, there
is a special command to produce _all_ specified files in one step:

‘e’ (‘org-store-agenda-views’)
     Export all agenda views that have export file names associated with
     them.

   You can use the options section of the custom agenda commands to also
set options for the export commands.  For example:

     (setq org-agenda-custom-commands
           '(("X" agenda ""
              ((ps-number-of-columns 2)
               (ps-landscape-mode t)
               (org-agenda-prefix-format " [ ] ")
               (org-agenda-with-colors nil)
               (org-agenda-remove-tags t))
              ("theagenda.ps"))))

This command sets two options for the Postscript exporter, to make it
print in two columns in landscape format—the resulting page can be cut
in two and then used in a paper agenda.  The remaining settings modify
the agenda prefix to omit category and scheduling information, and
instead include a checkbox to check off items.  We also remove the tags
to make the lines compact, and we do not want to use colors for the
black-and-white printer.  Settings specified in
‘org-agenda-exporter-settings’ also apply, e.g.,

     (setq org-agenda-exporter-settings
           '((ps-number-of-columns 2)
             (ps-landscape-mode t)
             (org-agenda-add-entry-text-maxlines 5)
             (htmlize-output-type 'css)))

but the settings in ‘org-agenda-custom-commands’ take precedence.

   From the command line you may also use:

     emacs -eval (org-batch-store-agenda-views) -kill

or, if you need to modify some parameters(4)

     emacs -eval '(org-batch-store-agenda-views                      \
                   org-agenda-span (quote month)                     \
                   org-agenda-start-day "2007-11-01"                 \
                   org-agenda-include-diary nil                      \
                   org-agenda-files (quote ("~/org/project.org")))'  \
           -kill

which creates the agenda views restricted to the file
‘~/org/project.org’, without diary entries and with a 30-day extent.

   You can also extract agenda information in a way that allows further
processing by other programs.  See *note Extracting Agenda
Information::, for more information.

   ---------- Footnotes ----------

   (1) For HTML you need to install Hrvoje Nikšić’s ‘htmlize.el’ as an
Emacs package from NonGNU ELPA (https://elpa.nongnu.org/) or from Hrvoje
Nikšić’s repository (https://github.com/hniksic/emacs-htmlize).

   (2) To create PDF output, the Ghostscript ps2pdf utility must be
installed on the system.  Selecting a PDF file also creates the
postscript file.

   (3) If you want to store standard views like the weekly agenda or the
global TODO list as well, you need to define custom commands for them in
order to be able to specify file names.

   (4) Quoting depends on the system you use, please check the FAQ for
examples.


File: org.info,  Node: Agenda Column View,  Prev: Exporting Agenda Views,  Up: Agenda Views

11.8 Using Column View in the Agenda
====================================

Column view (see *note Column View::) is normally used to view and edit
properties embedded in the hierarchical structure of an Org file.  It
can be quite useful to use column view also from the agenda, where
entries are collected by certain criteria.

‘C-c C-x C-c’ (‘org-agenda-columns’)

     Turn on column view in the agenda.

   To understand how to use this properly, it is important to realize
that the entries in the agenda are no longer in their proper outline
environment.  This causes the following issues:

  1. Org needs to make a decision which columns format to use.  Since
     the entries in the agenda are collected from different files, and
     different files may have different columns formats, this is a
     non-trivial problem.  Org first checks if
     ‘org-overriding-columns-format’ is currently set, and if so, takes
     the format from there.  You should set this variable only in the
     _local settings section_ of a custom agenda command (see *note
     Custom Agenda Views::) to make it valid for that specific agenda
     view.  If no such binding exists, it checks, in sequence,
     ‘org-columns-default-format-for-agenda’, the format associated with
     the first item in the agenda (through a property or a ‘#+COLUMNS’
     setting in that buffer) and finally ‘org-columns-default-format’.

  2. If any of the columns has a summary type defined (see *note Column
     attributes::), turning on column view in the agenda visits all
     relevant agenda files and make sure that the computations of this
     property are up to date.  This is also true for the special
     ‘CLOCKSUM’ property.  Org then sums the values displayed in the
     agenda.  In the daily/weekly agenda, the sums cover a single day;
     in all other views they cover the entire block.

     It is important to realize that the agenda may show the same entry
     _twice_—for example as scheduled and as a deadline—and it may show
     two entries from the same hierarchy (for example a _parent_ and its
     _child_).  In these cases, the summation in the agenda leads to
     incorrect results because some values count double.

  3. When the column view in the agenda shows the ‘CLOCKSUM’ property,
     that is always the entire clocked time for this item.  So even in
     the daily/weekly agenda, the clocksum listed in column view may
     originate from times outside the current view.  This has the
     advantage that you can compare these values with a column listing
     the planned total effort for a task—one of the major applications
     for column view in the agenda.  If you want information about
     clocked time in the displayed period use clock table mode (press
     ‘R’ in the agenda).

  4. When the column view in the agenda shows the ‘CLOCKSUM_T’ property,
     that is always today’s clocked time for this item.  So even in the
     weekly agenda, the clocksum listed in column view only originates
     from today.  This lets you compare the time you spent on a task for
     today, with the time already spent—via ‘CLOCKSUM’—and with the
     planned total effort for it.


File: org.info,  Node: Markup for Rich Contents,  Next: Exporting,  Prev: Agenda Views,  Up: Top

12 Markup for Rich Contents
***************************

Org is primarily about organizing and searching through your plain-text
notes.  However, it also provides a lightweight yet robust markup
language for rich text formatting and more.  For instance, you may want
to center or emphasize text.  Or you may need to insert a formula or
image in your writing.  Org offers syntax for all of this and more.
Used in conjunction with the export framework (see *note Exporting::),
you can author beautiful documents in Org—like the fine manual you are
currently reading.

* Menu:

* Paragraphs::                   The basic unit of text.
* Emphasis and Monospace::       Bold, italic, etc.
* Subscripts and Superscripts::  Simple syntax for raising/lowering text.
* Special Symbols::              Greek letters and other symbols.
* Embedded LaTeX::            LaTeX can be freely used inside Org documents.
* Literal Examples::             Source code examples with special formatting.
* Images::                       Display an image.
* Captions::                     Describe tables, images...
* Horizontal Rules::             Make a line.
* Creating Footnotes::           Edit and read footnotes.


File: org.info,  Node: Paragraphs,  Next: Emphasis and Monospace,  Up: Markup for Rich Contents

12.1 Paragraphs
===============

Paragraphs are separated by at least one empty line.  If you need to
enforce a line break within a paragraph, use ‘\\’ at the end of a line.

   To preserve the line breaks, indentation and blank lines in a region,
but otherwise use normal formatting, you can use this construct, which
can also be used to format poetry.

     #+BEGIN_VERSE
      Great clouds overhead
      Tiny black birds rise and fall
      Snow covers Emacs

         ---AlexSchroeder
     #+END_VERSE

   When quoting a passage from another document, it is customary to
format this as a paragraph that is indented on both the left and the
right margin.  You can include quotations in Org documents like this:

     #+BEGIN_QUOTE
     Everything should be made as simple as possible,
     but not any simpler ---Albert Einstein
     #+END_QUOTE

   If you would like to center some text, do it like this:

     #+BEGIN_CENTER
     Everything should be made as simple as possible, \\
     but not any simpler
     #+END_CENTER


File: org.info,  Node: Emphasis and Monospace,  Next: Subscripts and Superscripts,  Prev: Paragraphs,  Up: Markup for Rich Contents

12.2 Emphasis and Monospace
===========================

You can make words ‘*bold*’, ‘/italic/’, ‘_underlined_’, ‘=verbatim=’
and ‘~code~’, and, if you must, ‘+strike-through+’.  Text in the code
and verbatim string is not processed for Org specific syntax; it is
exported verbatim.

   To turn off fontification for marked up text, you can set
‘org-fontify-emphasized-text’ to ‘nil’.  To narrow down the list of the
fontified markup syntax, you can customize ‘org-emphasis-alist’(1).

   To hide the emphasis markup characters in your buffers, set
‘org-hide-emphasis-markers’ to ‘t’.

   Sometimes, when marked text also contains the marker character
itself, the result may be unsettling.  For example,

     /One may expect this whole sentence to be italicized, but the
     following ~user/?variable~ contains =/= character, which effectively
     stops emphasis there./

   You can use zero width space to help Org sorting out the ambiguity.
See *note Escape Character:: for more details.

   ---------- Footnotes ----------

   (1) The markup will still be recognized.  Just not highlighted
visually in Emacs.


File: org.info,  Node: Subscripts and Superscripts,  Next: Special Symbols,  Prev: Emphasis and Monospace,  Up: Markup for Rich Contents

12.3 Subscripts and Superscripts
================================

‘^’ and ‘_’ are used to indicate super- and subscripts.  To increase the
readability of ASCII text, it is not necessary, but OK, to surround
multi-character sub- and superscripts with curly braces.  For example

     The radius of the sun is R_sun = 6.96 x 10^8 m.  On the other hand,
     the radius of Alpha Centauri is R_{Alpha Centauri} = 1.28 x R_{sun}.

   If you write a text where the underscore is often used in a different
context, Org’s convention to always interpret these as subscripts can
get in your way.  Configure the variable ‘org-use-sub-superscripts’ to
change this convention.  For example, when setting this variable to
‘{}’, ‘a_b’ is not interpreted as a subscript, but ‘a_{b}’ is.

   You can set ‘org-use-sub-superscripts’ in a file using the export
option ‘^:’ (see *note Export Settings::).  For example, ‘#+OPTIONS:
^:{}’ sets ‘org-use-sub-superscripts’ to ‘{}’ and limits super- and
subscripts to the curly bracket notation.

   You can also toggle the visual display of super- and subscripts:

‘C-c C-x \’ (‘org-toggle-pretty-entities’)
     This command formats sub- and superscripts in a WYSIWYM way.

   Set both ‘org-pretty-entities’ and
‘org-pretty-entities-include-sub-superscripts’ to ‘t’ to start with
super- and subscripts _visually_ interpreted as specified by the option
‘org-use-sub-superscripts’.


File: org.info,  Node: Special Symbols,  Next: Embedded LaTeX,  Prev: Subscripts and Superscripts,  Up: Markup for Rich Contents

12.4 Special Symbols
====================

You can use LaTeX-like syntax to insert special symbols—named
entities—like ‘\alpha’ to indicate the Greek letter, or ‘\to’ to
indicate an arrow.  Completion for these symbols is available, just type
‘\’ and maybe a few letters, and press ‘M-<TAB>’ to see possible
completions.  If you need such a symbol inside a word, terminate it with
a pair of curly brackets.  For example

     Pro tip: Given a circle \Gamma of diameter d, the length of its
     circumference is \pi{}d.

   A large number of entities is provided, with names taken from both
HTML and LaTeX; you can comfortably browse the complete list from a
dedicated buffer using the command ‘org-entities-help’.  It is also
possible to provide your own special symbols in the variable
‘org-entities-user’.

   During export, these symbols are transformed into the native format
of the exporter backend.  Strings like ‘\alpha’ are exported as
‘&alpha;’ in the HTML output, and as ‘\(\alpha\)’ in the LaTeX output.
Similarly, ‘\nbsp’ becomes ‘&nbsp;’ in HTML and ‘~’ in LaTeX.

   If you would like to see entities displayed as UTF-8 characters, use
the following command(1):

‘C-c C-x \’ (‘org-toggle-pretty-entities’)

     Toggle display of entities as UTF-8 characters.  This does not
     change the buffer content which remains plain ASCII, but it
     overlays the UTF-8 character for display purposes only.

   In addition to regular entities defined above, Org exports in a
special way(2) the following commonly used character combinations: ‘\-’
is treated as a shy hyphen, ‘--’ and ‘---’ are converted into dashes,
and ‘...’ becomes a compact set of dots.

   ---------- Footnotes ----------

   (1) You can turn this on by default by setting the variable
‘org-pretty-entities’, or on a per-file base with the ‘STARTUP’ option
‘entitiespretty’.

   (2) This behavior can be disabled with ‘-’ export setting (see *note
Export Settings::).


File: org.info,  Node: Embedded LaTeX,  Next: Literal Examples,  Prev: Special Symbols,  Up: Markup for Rich Contents

12.5 Embedded LaTeX
===================

Plain ASCII is normally sufficient for almost all note taking.
Exceptions include scientific notes, which often require mathematical
symbols and the occasional formula.  LaTeX(1) is widely used to typeset
scientific documents.  Org mode supports embedding LaTeX code into its
files, because many academics are used to writing and reading LaTeX
source code, and because it can be readily processed to produce pretty
output for a number of export backends.

* Menu:

* LaTeX fragments::           Complex formulas made easy.
* Previewing LaTeX fragments:: What will this snippet look like?
* CDLaTeX mode::              Speed up entering of formulas.

   ---------- Footnotes ----------

   (1) LaTeX is a macro system based on Donald E. Knuth’s TeX system.
Many of the features described here as “LaTeX” are really from TeX, but
for simplicity I am blurring this distinction.


File: org.info,  Node: LaTeX fragments,  Next: Previewing LaTeX fragments,  Up: Embedded LaTeX

12.5.1 LaTeX fragments
----------------------

Org mode can contain LaTeX math fragments, and it supports ways to
process these for several export backends.  When exporting to LaTeX, the
code is left as it is.  When exporting to HTML, Org can use either
MathJax (https://www.mathjax.org) (see *note Math formatting in HTML
export::) or transcode the math into images (see *note Previewing LaTeX
fragments::).

   LaTeX fragments do not need any special marking at all.  The
following snippets are identified as LaTeX source code:

   • Environments of any kind(1).  The only requirement is that the
     ‘\begin’ statement appears on a new line, preceded by only
     whitespace.

   • Text within the usual LaTeX math delimiters.  Prefer ‘\(...\)’ for
     inline fragments.  The ‘$...$’ alternative has some restrictions
     and may be a source of confusion.  To avoid conflicts with currency
     specifications, single ‘$’ characters are only recognized as math
     delimiters if the enclosed text contains at most two line breaks,
     is directly attached to the ‘$’ characters with no whitespace in
     between, and if the closing ‘$’ is followed by whitespace or
     punctuation (but not a dash).

     Sometimes, it may necessary to have a literal dollar symbol even
     when it is recognized as LaTeX math delimiter.  Org provides
     ‘\dollar’ and ‘\USD’ entities (see *note Special Symbols::) that
     are rendered as ‘$’ for such scenarios.  Also, see *note Escape
     Character::.

For example:

     \begin{equation}                        % arbitrary environments,
     x=\sqrt{b}                              % even tables, figures, etc
     \end{equation}

     If $a^2=b$ and \( b=2 \), then the solution must be
     either $$ a=+\sqrt{2} $$ or \[ a=-\sqrt{2} \].

   LaTeX processing can be configured with the variable
‘org-export-with-latex’.  The default setting is ‘t’ which means MathJax
for HTML, and no processing for ASCII and LaTeX backends.  You can also
set this variable on a per-file basis using one of these lines:

‘#+OPTIONS: tex:t’          Do the right thing automatically (MathJax)
‘#+OPTIONS: tex:nil’        Do not process LaTeX fragments at all
‘#+OPTIONS: tex:verbatim’   Verbatim export, for jsMath or so

   ---------- Footnotes ----------

   (1) When MathJax is used, only the environments recognized by MathJax
are processed.  When dvipng, dvisvgm, or ImageMagick suite is used to
create images, any LaTeX environment is handled.


File: org.info,  Node: Previewing LaTeX fragments,  Next: CDLaTeX mode,  Prev: LaTeX fragments,  Up: Embedded LaTeX

12.5.2 Previewing LaTeX fragments
---------------------------------

If you have a working LaTeX installation and ‘dvipng’, ‘dvisvgm’ or
‘convert’ installed(1), LaTeX fragments can be processed to produce
images of the typeset expressions to be used for inclusion while
exporting to HTML (see *note LaTeX fragments::), or for inline
previewing within Org mode.

   You can customize the variables ‘org-format-latex-options’ and
‘org-format-latex-header’ to influence some aspects of the preview.  In
particular, the ‘:scale’ (and for HTML export, ‘:html-scale’) property
of the former can be used to adjust the size of the preview images.

‘C-c C-x C-l’ (‘org-latex-preview’)

     Produce a preview image of the LaTeX fragment at point and overlay
     it over the source code.  If there is no fragment at point, process
     all fragments in the current entry—between two headlines.

     When called with a single prefix argument, clear all images in the
     current entry.  Two prefix arguments produce a preview image for
     all fragments in the buffer, while three of them clear all the
     images in that buffer.

   You can turn on the previewing of all LaTeX fragments in a file with

     #+STARTUP: latexpreview

   To disable it, simply use

     #+STARTUP: nolatexpreview

   ---------- Footnotes ----------

   (1) These are respectively available at
<https://sourceforge.net/projects/dvipng/>,
<http://dvisvgm.bplaced.net/> and from the ImageMagick suite.  Choose
the converter by setting the variable
‘org-preview-latex-default-process’ accordingly.


File: org.info,  Node: CDLaTeX mode,  Prev: Previewing LaTeX fragments,  Up: Embedded LaTeX

12.5.3 Using CDLaTeX to enter math
----------------------------------

CDLaTeX mode is a minor mode that is normally used in combination with a
major LaTeX mode like AUCTeX in order to speed-up insertion of
environments and math templates.  Inside Org mode, you can make use of
some of the features of CDLaTeX mode.  You need to install ‘cdlatex.el’
and ‘texmathp.el’ (the latter comes also with AUCTeX) from NonGNU ELPA
(https://elpa.nongnu.org/) with the Emacs packaging system
(https://www.gnu.org/software/emacs/manual/html_node/emacs/Package-Installation.html)
or alternatively from
<https://staff.fnwi.uva.nl/c.dominik/Tools/cdlatex/>.  Do not use
CDLaTeX mode itself under Org mode, but use the special version Org
CDLaTeX minor mode that comes as part of Org.  Turn it on for the
current buffer with ‘M-x org-cdlatex-mode’, or for all Org files with

     (add-hook 'org-mode-hook #'turn-on-org-cdlatex)

   When this mode is enabled, the following features are present (for
more details see the documentation of CDLaTeX mode):

‘C-c {’

     Insert an environment template.

‘<TAB>’

     The ‘<TAB>’ key expands the template if point is inside a LaTeX
     fragment(1).  For example, ‘<TAB>’ expands ‘fr’ to ‘\frac{}{}’ and
     position point correctly inside the first brace.  Another ‘<TAB>’
     gets you into the second brace.

     Even outside fragments, ‘<TAB>’ expands environment abbreviations
     at the beginning of a line.  For example, if you write ‘equ’ at the
     beginning of a line and press ‘<TAB>’, this abbreviation is
     expanded to an ‘equation’ environment.  To get a list of all
     abbreviations, type ‘M-x cdlatex-command-help’.

‘^’
‘_’

     Pressing ‘_’ and ‘^’ inside a LaTeX fragment inserts these
     characters together with a pair of braces.  If you use ‘<TAB>’ to
     move out of the braces, and if the braces surround only a single
     character or macro, they are removed again (depending on the
     variable ‘cdlatex-simplify-sub-super-scripts’).

‘`’

     Pressing the backquote followed by a character inserts math macros,
     also outside LaTeX fragments.  If you wait more than 1.5 seconds
     after the backquote, a help window pops up.

‘'’

     Pressing the single-quote followed by another character modifies
     the LaTeX symbol before point with an accent or a font.  If you
     wait more than 1.5 seconds after the single-quote, a help window
     pops up.  Character modification works only inside LaTeX fragments;
     outside the quote is normal.

   ---------- Footnotes ----------

   (1) Org mode has a method to test if point is inside such a fragment,
see the documentation of the function ‘org-inside-LaTeX-fragment-p’.


File: org.info,  Node: Literal Examples,  Next: Images,  Prev: Embedded LaTeX,  Up: Markup for Rich Contents

12.6 Literal Examples
=====================

You can include literal examples that should not be subjected to markup.
Such examples are typeset in monospace, so this is well suited for
source code and similar examples.

     #+BEGIN_EXAMPLE
       Some example from a text file.
     #+END_EXAMPLE

   There is one limitation, however.  You must insert a comma right
before lines starting with either ‘*’, ‘,*’, ‘#+’ or ‘,#+’, as those may
be interpreted as outlines nodes or some other special syntax.  Org
transparently strips these additional commas whenever it accesses the
contents of the block.

     #+BEGIN_EXAMPLE
     ,* I am no real headline
     #+END_EXAMPLE

   For simplicity when using small examples, you can also start the
example lines with a colon followed by a space.  There may also be
additional whitespace before the colon:

     Here is an example
        : Some example from a text file.

   If the example is source code from a programming language, or any
other text that can be marked up by Font Lock in Emacs, you can ask for
the example to look like the fontified Emacs buffer(1).  This is done
with the code block, where you also need to specify the name of the
major mode that should be used to fontify the example(2), see *note
Structure Templates:: for shortcuts to easily insert code blocks.

     #+BEGIN_SRC emacs-lisp
       (defun org-xor (a b)
         "Exclusive or."
         (if a (not b) b))
     #+END_SRC

   Both in ‘example’ and in ‘src’ snippets, you can add a ‘-n’ switch to
the end of the ‘#+BEGIN’ line, to get the lines of the example numbered.
The ‘-n’ takes an optional numeric argument specifying the starting line
number of the block.  If you use a ‘+n’ switch, the numbering from the
previous numbered snippet is continued in the current one.  The ‘+n’
switch can also take a numeric argument.  This adds the value of the
argument to the last line of the previous block to determine the
starting line number.

     #+BEGIN_SRC emacs-lisp -n 20
       ;; This exports with line number 20.
       (message "This is line 21")
     #+END_SRC

     #+BEGIN_SRC emacs-lisp +n 10
       ;; This is listed as line 31.
       (message "This is line 32")
     #+END_SRC

   In literal examples, Org interprets strings like ‘(ref:name)’ as
labels, and use them as targets for special hyperlinks like
‘[[(name)]]’—i.e., the reference name enclosed in single parenthesis.
In HTML, hovering the mouse over such a link remote-highlights the
corresponding code line, which is kind of cool.

   You can also add a ‘-r’ switch which _removes_ the labels from the
source code(3).  With the ‘-n’ switch, links to these references are
labeled by the line numbers from the code listing.  Otherwise links use
the labels with no parentheses.  Here is an example:

     #+BEGIN_SRC emacs-lisp -n -r
       (save-excursion                 (ref:sc)
          (goto-char (point-min))      (ref:jump)
     #+END_SRC
     In line [[(sc)]] we remember the current position. [[(jump)][Line (jump)]]
     jumps to point-min.

   Source code and examples may be _indented_ in order to align nicely
with the surrounding text, and in particular with plain list structure
(see *note Plain Lists::).  By default, Org only retains the relative
indentation between lines, e.g., when exporting the contents of the
block.  However, you can use the ‘-i’ switch to also preserve the global
indentation, if it does matter.  See *note Editing Source Code::.

   If the syntax for the label format conflicts with the language
syntax, use a ‘-l’ switch to change the format, for example

     #+BEGIN_SRC pascal -n -r -l "((%s))"

See also the variable ‘org-coderef-label-format’.

   HTML export also allows examples to be published as text areas (see
*note Text areas in HTML export::).

   Because the ‘#+BEGIN’ ... ‘#+END’ patterns need to be added so often,
a shortcut is provided (see *note Structure Templates::).

‘C-c '’ (‘org-edit-special’)
     Edit the source code example at point in its native mode.  This
     works by switching to a temporary buffer with the source code.  You
     need to exit by pressing ‘C-c '’ again.  The edited version then
     replaces the old version in the Org buffer.  Fixed-width
     regions—where each line starts with a colon followed by a space—are
     edited using Artist mode(4) to allow creating ASCII drawings
     easily.  Using this command in an empty line creates a new
     fixed-width region.

   Calling ‘org-store-link’ (see *note Handling Links::) while editing a
source code example in a temporary buffer created with ‘C-c '’ prompts
for a label.  Make sure that it is unique in the current buffer, and
insert it with the proper formatting like ‘(ref:label)’ at the end of
the current line.  Then the label is stored as a link ‘(label)’, for
retrieval with ‘C-c C-l’.

   ---------- Footnotes ----------

   (1) This works automatically for the HTML backend (it requires
version 1.34 of the ‘htmlize.el’ package, which you need to install).
Fontified code chunks in LaTeX can be achieved using either the listings
(https://www.ctan.org/pkg/listings) LaTeX package, minted
(https://www.ctan.org/pkg/minted) LaTeX package, or by using
engrave-faces (https://elpa.gnu.org/packages/engrave-faces.html) .
Refer to ‘org-latex-src-block-backend’ for details.

   (2) Source code in code blocks may also be evaluated either
interactively or on export.  See *note Working with Source Code:: for
more information on evaluating code blocks.

   (3) Adding ‘-k’ to ‘-n -r’ _keeps_ the labels in the source code
while using line numbers for the links, which might be useful to explain
those in an Org mode example code.

   (4) You may select a different mode with the variable
‘org-edit-fixed-width-region-mode’.


File: org.info,  Node: Images,  Next: Captions,  Prev: Literal Examples,  Up: Markup for Rich Contents

12.7 Images
===========

An image is a link to an image file(1) that does not have a description
part, for example

     ./img/cat.jpg

   If you wish to define a caption for the image (see *note Captions::)
and maybe a label for internal cross references (see *note Internal
Links::), make sure that the link is on a line by itself and precede it
with ‘CAPTION’ and ‘NAME’ keywords as follows:

     #+CAPTION: This is the caption for the next figure link (or table)
     #+NAME:   fig:SED-HR4049
     [[./img/a.jpg]]

   Such images can be displayed within the buffer with the following
command:

‘C-c C-x C-v’ (‘org-toggle-inline-images’)
     Toggle the inline display of linked images.  When called with a
     prefix argument, also display images that do have a link
     description.  You can ask for inline images to be displayed at
     startup by configuring the variable
     ‘org-startup-with-inline-images’(2).

   By default, Org mode displays inline images according to their actual
width, but no wider than ‘fill-column’ characters.

   You can customize the displayed image width using
‘org-image-actual-width’ variable (globally) or ‘ORG-IMAGE-ACTUAL-WIDTH’
property (subtree-level)(3).  Their value can be the following:
   • (default) Non-‘nil’, use the actual width of images when inlining
     them.  If the actual width is too wide, limit it according to
     ‘org-image-max-width’.
   • When set to a number, use imagemagick (when available) to set the
     image’s width to this value.
   • When set to a number in a list, try to get the width from any
     ‘#+ATTR.*’ keyword if it matches a width specification like:
          #+ATTR_HTML: :width 300px
     and fall back on that number if none is found.
   • When set to ‘nil’, try to get the width from an ‘#+ATTR.*’ keyword
     and fall back on the original width or ‘org-image-max-width’ if
     none is found.

   ‘org-image-max-width’ limits the maximum displayed image width, but
only when the image width is not set explicitly.  Possible maximum width
can be set to:
   • (default) ‘fill-column’, limit width to ‘fill-column’ number of
     characters.
   • ‘window’, limit width to current window width.
   • integer number, limit width to that specified number of pixels.
   • ‘nil’, do not limit the width.

   Inline images can also be displayed when cycling the folding state.
When custom option ‘org-cycle-inline-images-display’ is set, the visible
inline images under subtree will be displayed automatically.

   ---------- Footnotes ----------

   (1) What Emacs considers to be an image depends on
‘image-file-name-extensions’ and ‘image-file-name-regexps’.

   (2) The variable ‘org-startup-with-inline-images’ can be set within a
buffer with the ‘STARTUP’ options ‘inlineimages’ and ‘noinlineimages’.

   (3) The width can be customized in Emacs >= 24.1, built with
imagemagick support.


File: org.info,  Node: Captions,  Next: Horizontal Rules,  Prev: Images,  Up: Markup for Rich Contents

12.8 Captions
=============

You can assign a caption to a specific part of a document by inserting a
‘CAPTION’ keyword immediately before it:

     #+CAPTION: This is the caption for the next table (or link)
     | ... | ... |
     |-----+-----|

   Optionally, the caption can take the form:

     #+CAPTION[Short caption]: Longer caption.

   Even though images and tables are prominent examples of captioned
structures, the same caption mechanism can apply to many others—e.g.,
LaTeX equations, source code blocks.  Depending on the export backend,
those may or may not be handled.


File: org.info,  Node: Horizontal Rules,  Next: Creating Footnotes,  Prev: Captions,  Up: Markup for Rich Contents

12.9 Horizontal Rules
=====================

A line consisting of only dashes, and at least 5 of them, is exported as
a horizontal line.


File: org.info,  Node: Creating Footnotes,  Prev: Horizontal Rules,  Up: Markup for Rich Contents

12.10 Creating Footnotes
========================

A footnote is started by a footnote marker in square brackets in column
0, no indentation allowed.  It ends at the next footnote definition,
headline, or after two consecutive empty lines.  The footnote reference
is simply the marker in square brackets, inside text.  Markers always
start with ‘fn:’.  For example:

     The Org website[fn:1] now looks a lot better than it used to.
     ...
     [fn:49] The link is: https://orgmode.org

   Org mode extends the number-based syntax to _named_ footnotes and
optional inline definition.  Here are the valid references:

‘[fn:NAME]’
     A named footnote reference, where NAME is a unique label word, or,
     for simplicity of automatic creation, a number.

‘[fn:: This is the inline definition of this footnote]’
     An anonymous footnote where the definition is given directly at the
     reference point.

‘[fn:NAME: a definition]’
     An inline definition of a footnote, which also specifies a name for
     the note.  Since Org allows multiple references to the same note,
     you can then use ‘[fn:NAME]’ to create additional references.

   Footnote labels can be created automatically, or you can create names
yourself.  This is handled by the variable ‘org-footnote-auto-label’ and
its corresponding ‘STARTUP’ keywords.  See the docstring of that
variable for details.

   The following command handles footnotes:

‘C-c C-x f’
     The footnote action command.

     When point is on a footnote reference, jump to the definition.
     When it is at a definition, jump to the—first—reference.

     Otherwise, create a new footnote.  Depending on the variable
     ‘org-footnote-define-inline’(1), the definition is placed right
     into the text as part of the reference, or separately into the
     location determined by the variable ‘org-footnote-section’.

     When this command is called with a prefix argument, a menu of
     additional options is offered:

     ‘s’     Sort the footnote definitions by reference sequence.
     ‘r’     Renumber the simple ‘fn:N’ footnotes.
     ‘S’     Short for first ‘r’, then ‘s’ action.
     ‘n’     Rename all footnotes into a ‘fn:1’ ... ‘fn:n’ sequence.
     ‘d’     Delete the footnote at point, including definition and
             references.

     Depending on the variable ‘org-footnote-auto-adjust’(2),
     renumbering and sorting footnotes can be automatic after each
     insertion or deletion.

‘C-c C-c’
     If point is on a footnote reference, jump to the definition.  If it
     is at the definition, jump back to the reference.  When called at a
     footnote location with a prefix argument, offer the same menu as
     ‘C-c C-x f’.

‘C-c C-o’ or ‘mouse-1/2’
     Footnote labels are also links to the corresponding definition or
     reference, and you can use the usual commands to follow these
     links.

   ---------- Footnotes ----------

   (1) The corresponding in-buffer setting is: ‘#+STARTUP: fninline’ or
‘#+STARTUP: nofninline’.

   (2) The corresponding in-buffer options are ‘#+STARTUP: fnadjust’ and
‘#+STARTUP: nofnadjust’.


File: org.info,  Node: Exporting,  Next: Publishing,  Prev: Markup for Rich Contents,  Up: Top

13 Exporting
************

At some point you might want to print your notes, publish them on the
web, or share them with people not using Org.  Org can convert and
export documents to a variety of other formats while retaining as much
structure (see *note Document Structure::) and markup (see *note Markup
for Rich Contents::) as possible.

   The libraries responsible for translating Org files to other formats
are called _backends_.  Org ships with support for the following
backends:

   • _ascii_ (ASCII format)
   • _beamer_ (LaTeX Beamer format)
   • _html_ (HTML format)
   • _icalendar_ (iCalendar format)
   • _latex_ (LaTeX format)
   • _md_ (Markdown format)
   • _odt_ (OpenDocument Text format)
   • _org_ (Org format)
   • _texinfo_ (Texinfo format)
   • _man_ (Man page format)

   Users can install libraries for additional formats from the Emacs
packaging system.  For easy discovery, these packages have a common
naming scheme: ‘ox-NAME’, where NAME is a format.  For example,
‘ox-koma-letter’ for _koma-letter_ backend.  More libraries can be found
in the ‘org-contrib’ repository (see *note Installation::).

   Org only loads backends for the following formats by default: ASCII,
HTML, iCalendar, LaTeX, and ODT.  Additional backends can be loaded in
either of two ways: by configuring the ‘org-export-backends’ variable,
or by requiring libraries in the Emacs init file.  For example, to load
the Markdown backend, add this to your Emacs config:

     (require 'ox-md)

* Menu:

* The Export Dispatcher::        The main interface.
* Export Settings::              Common export settings.
* Table of Contents::            The if and where of the table of contents.
* Include Files::                Include additional files into a document.
* Macro Replacement::            Use macros to create templates.
* Comment Lines::                What will not be exported.
* ASCII/Latin-1/UTF-8 export::   Exporting to flat files with encoding.
* Beamer Export::                Producing presentations and slides.
* HTML Export::                  Exporting to HTML.
* LaTeX Export::              Exporting to LaTeX and processing to PDF.
* Markdown Export::              Exporting to Markdown.
* OpenDocument Text Export::     Exporting to OpenDocument Text.
* Org Export::                   Exporting to Org.
* Texinfo Export::               Exporting to Texinfo.
* iCalendar Export::             Exporting to iCalendar.
* Other Built-in Backends::      Exporting to a man page.
* Advanced Export Configuration:: Fine-tuning the export output.
* Export Region::                Author tables and lists in Org syntax.


File: org.info,  Node: The Export Dispatcher,  Next: Export Settings,  Up: Exporting

13.1 The Export Dispatcher
==========================

The export dispatcher is the main interface for Org’s exports.  A
hierarchical menu presents the currently configured export formats.
Options are shown as easy toggle switches on the same screen.

   Org also has a minimal prompt interface for the export dispatcher.
When the variable ‘org-export-dispatch-use-expert-ui’ is set to a
non-‘nil’ value, Org prompts in the minibuffer.  To switch back to the
hierarchical menu, press ‘?’.

‘C-c C-e’ (‘org-export-dispatch’)

     Invokes the export dispatcher interface.  The options show default
     settings.  The ‘C-u’ prefix argument preserves options from the
     previous export, including any subtree selections.

   Org exports the entire buffer by default.  If the Org buffer has an
active region, then Org exports just that region.

   Within the dispatcher interface, the following key combinations can
further alter what is exported, and how.

‘C-a’

     Toggle asynchronous export.  Asynchronous export uses an external
     Emacs process with a specially configured initialization file to
     complete the exporting process in the background, without tying-up
     Emacs.  This is particularly useful when exporting long documents.

     Output from an asynchronous export is saved on the _export stack_.
     To view this stack, call the export dispatcher with a double ‘C-u’
     prefix argument.  If already in the export dispatcher menu, ‘&’
     displays the stack.

     You can make asynchronous export the default by setting
     ‘org-export-in-background’.

     You can set the initialization file used by the background process
     by setting ‘org-export-async-init-file’.

‘C-b’

     Toggle body-only export.  Useful for excluding headers and footers
     in the export.  Affects only those backend formats that have
     sections like ‘<head>...</head>’ in HTML.

     To make body-only export the default, customize the variable
     ‘org-export-body-only’.

‘C-f’

     Toggle force-publishing export.  Publish functions normally only
     publish changed files (see [BROKEN LINK: **Triggering
     Publication]).  Forced publishing causes files to be published even
     if their timestamps do not indicate the file has been changed.

     To make forced publishing the default, customize the variable
     ‘org-export-force-publishing’.  (This is similar to
     ‘org-publish-use-timestamps-flag’, but only affects the export
     dispatcher.)

‘C-s’

     Toggle subtree export.  When turned on, Org exports only the
     subtree starting from point position at the time the export
     dispatcher was invoked.  Org uses the top heading of this subtree
     as the document’s title.  If point is not on a heading, Org uses
     the nearest enclosing header.  If point is in the document
     preamble, Org signals an error and aborts export.

     To make subtree export the default, customize the variable
     ‘org-export-initial-scope’.

‘C-v’

     Toggle visible-only export.  This is useful for exporting only
     certain parts of an Org document by adjusting the visibility of
     particular headings.  See also *note Sparse Trees::.

     To make visible-only export the default, customize the variable
     ‘org-export-visible-only’.


File: org.info,  Node: Export Settings,  Next: Table of Contents,  Prev: The Export Dispatcher,  Up: Exporting

13.2 Export Settings
====================

Export options can be set: globally with variables; for an individual
file by making variables buffer-local with in-buffer settings (see *note
In-buffer Settings::); by setting individual keywords or specifying them
in compact form with the ‘OPTIONS’ keyword; or for a tree by setting
properties (see *note Properties and Columns::).  Options set at a
specific level override options set at a more general level.

   In-buffer settings may appear anywhere in the file, either directly
or indirectly through a file included using ‘#+SETUPFILE: filename or
URL’ syntax.  Option keyword sets tailored to a particular backend can
be inserted from the export dispatcher (see *note The Export
Dispatcher::) using the ‘Insert template’ command by pressing ‘#’.  To
insert keywords individually, a good way to make sure the keyword is
correct is to type ‘#+’ and then to use ‘M-<TAB>’(1) for completion.

   The export keywords available for every backend, and their equivalent
global variables, include:

‘AUTHOR’
     The document author (‘user-full-name’).

‘CREATOR’
     Entity responsible for output generation
     (‘org-export-creator-string’).

‘DATE’
     A date or a timestamp(2).

‘EMAIL’
     The email address (‘user-mail-address’).

‘LANGUAGE’
     Language to use for translating certain strings
     (‘org-export-default-language’).  With ‘#+LANGUAGE: fr’, for
     example, Org translates ‘Table of contents’ to the French ‘Table
     des matières’(3).

‘SELECT_TAGS’
     The default value is ‘("export")’.  When a tree is tagged with
     ‘export’ (‘org-export-select-tags’), Org selects that tree and its
     subtrees for export.  Org excludes trees with ‘noexport’ tags, see
     below.  When selectively exporting files with ‘export’ tags set,
     Org does not export any text that appears before the first
     headline.

‘EXCLUDE_TAGS’
     The default value is ‘("noexport")’.  When a tree is tagged with
     ‘noexport’ (‘org-export-exclude-tags’), Org excludes that tree and
     its subtrees from export.  Entries tagged with ‘noexport’ are
     unconditionally excluded from the export, even if they have an
     ‘export’ tag.  Even if a subtree is not exported, Org executes any
     code blocks contained there.

‘TITLE’
     Org displays this title.  For long titles, use multiple ‘#+TITLE’
     lines.

‘EXPORT_FILE_NAME’
     The name of the output file to be generated.  Otherwise, Org
     generates the file name based on the buffer name and the extension
     based on the backend format.

   The ‘OPTIONS’ keyword is a compact form.  To configure multiple
options, use several ‘OPTIONS’ lines.  ‘OPTIONS’ recognizes the
following arguments.

‘'’
     Toggle smart quotes (‘org-export-with-smart-quotes’).  Depending on
     the language used, when activated, Org treats pairs of double
     quotes as primary quotes, pairs of single quotes as secondary
     quotes, and single quote marks as apostrophes.

‘*’
     Toggle emphasized text (‘org-export-with-emphasize’).

‘-’
     Toggle conversion of special strings
     (‘org-export-with-special-strings’).

‘:’
     Toggle fixed-width sections (‘org-export-with-fixed-width’).

‘<’
     Toggle inclusion of time/date active/inactive stamps
     (‘org-export-with-timestamps’).

‘\n’
     Toggles whether to preserve line breaks
     (‘org-export-preserve-breaks’).

‘^’
     Toggle TeX-like syntax for sub- and superscripts.  If you write
     ‘^:{}’, ‘a_{b}’ is interpreted, but the simple ‘a_b’ is left as it
     is (‘org-export-with-sub-superscripts’).

‘arch’
     Configure how archived trees are exported.  When set to ‘headline’,
     the export process skips the contents and processes only the
     headlines (‘org-export-with-archived-trees’).

‘author’
     Toggle inclusion of author name into exported file
     (‘org-export-with-author’).

‘expand-links’
     Toggle expansion of environment variables in file paths
     (‘org-export-expand-links’).

‘broken-links’
     Toggles if Org should continue exporting upon finding a broken
     internal link.  When set to ‘mark’, Org clearly marks the problem
     link in the output (‘org-export-with-broken-links’).

‘c’
     Toggle inclusion of ‘CLOCK’ keywords (‘org-export-with-clocks’).

‘creator’
     Toggle inclusion of creator information in the exported file
     (‘org-export-with-creator’).

‘d’
     Toggles inclusion of drawers, or list of drawers to include, or
     list of drawers to exclude (‘org-export-with-drawers’).

‘date’
     Toggle inclusion of a date into exported file
     (‘org-export-with-date’).

‘e’
     Toggle inclusion of entities (‘org-export-with-entities’).

‘email’
     Toggle inclusion of the author’s e-mail into exported file
     (‘org-export-with-email’).

‘f’
     Toggle the inclusion of footnotes (‘org-export-with-footnotes’).

‘H’
     Set the number of headline levels for export
     (‘org-export-headline-levels’).  Below that level, headlines are
     treated differently.  In most backends, they become list items.

‘inline’
     Toggle inclusion of inlinetasks (‘org-export-with-inlinetasks’).

‘num’
     Toggle section-numbers (‘org-export-with-section-numbers’).  When
     set to number N, Org numbers only those headlines at level N or
     above.  Set ‘UNNUMBERED’ property to non-‘nil’ to disable numbering
     of heading and subheadings entirely.  Moreover, when the value is
     ‘notoc’ the headline, and all its children, do not appear in the
     table of contents either (see *note Table of Contents::).

‘p’
     Toggle export of planning information (‘org-export-with-planning’).
     “Planning information” comes from lines located right after the
     headline and contain any combination of these cookies: ‘SCHEDULED’,
     ‘DEADLINE’, or ‘CLOSED’.

‘pri’
     Toggle inclusion of priority cookies (‘org-export-with-priority’).

‘prop’
     Toggle inclusion of property drawers, or list the properties to
     include (‘org-export-with-properties’).

‘stat’
     Toggle inclusion of statistics cookies
     (‘org-export-with-statistics-cookies’).

‘tags’
     Toggle inclusion of tags, may also be ‘not-in-toc’
     (‘org-export-with-tags’).

‘tasks’
     Toggle inclusion of tasks (TODO items); or ‘nil’ to remove all
     tasks; or ‘todo’ to remove done tasks; or list the keywords to keep
     (‘org-export-with-tasks’).

‘tex’
     ‘nil’ does not export; ‘t’ exports; ‘verbatim’ keeps everything in
     verbatim (‘org-export-with-latex’).

‘timestamp’
     Toggle inclusion of the creation time in the exported file
     (‘org-export-timestamp-file’).

‘title’
     Toggle inclusion of title (‘org-export-with-title’).

‘toc’
     Toggle inclusion of the table of contents, or set the level limit
     (‘org-export-with-toc’).

‘todo’
     Toggle inclusion of TODO keywords into exported text
     (‘org-export-with-todo-keywords’).

‘|’
     Toggle inclusion of tables (‘org-export-with-tables’).

   When exporting subtrees, special node properties can override the
above keywords.  These properties have an ‘EXPORT_’ prefix.  For
example, ‘DATE’ becomes, ‘EXPORT_DATE’ when used for a specific subtree.
Except for ‘SETUPFILE’, all other keywords listed above have an
‘EXPORT_’ equivalent.

   If ‘org-export-allow-bind-keywords’ is non-‘nil’, Emacs variables can
become buffer-local during export by using the ‘BIND’ keyword.  Its
syntax is ‘#+BIND: variable value’.  This is particularly useful for
in-buffer settings that cannot be changed using keywords.

   ---------- Footnotes ----------

   (1) Many desktops intercept ‘M-<TAB>’ to switch windows.  Use ‘C-M-i’
or ‘<ESC> <TAB>’ instead.

   (2) The variable ‘org-export-date-timestamp-format’ defines how this
timestamp are exported.

   (3) For export to LaTeX format—or LaTeX-related formats such as
Beamer—, the ‘org-latex-package-alist’ variable needs further
configuration.  See *note LaTeX specific export settings::.


File: org.info,  Node: Table of Contents,  Next: Include Files,  Prev: Export Settings,  Up: Exporting

13.3 Table of Contents
======================

The table of contents includes all headlines in the document.  Its depth
is therefore the same as the headline levels in the file.  If you need
to use a different depth, or turn it off entirely, set the
‘org-export-with-toc’ variable accordingly.  You can achieve the same on
a per file basis, using the following ‘toc’ item in ‘OPTIONS’ keyword:

     #+OPTIONS: toc:2          (only include two levels in TOC)
     #+OPTIONS: toc:nil        (no default TOC at all)

   Org includes both numbered and unnumbered headlines in the table of
contents(1).  If you need to exclude an unnumbered headline, along with
all its children, set the ‘UNNUMBERED’ property to ‘notoc’ value.

     * Subtree not numbered, not in table of contents either
       :PROPERTIES:
       :UNNUMBERED: notoc
       :END:

   Org normally inserts the table of contents directly before the first
headline of the file.  To move the table of contents to a different
location, first turn off the default with ‘org-export-with-toc’ variable
or with ‘#+OPTIONS: toc:nil’.  Then insert ‘#+TOC: headlines N’ at the
desired location(s).

     #+OPTIONS: toc:nil
     ...
     #+TOC: headlines 2

   To adjust the table of contents depth for a specific section of the
Org document, append an additional ‘local’ parameter.  This parameter
becomes a relative depth for the current level.  The following example
inserts a local table of contents, with direct children only.

     * Section
     #+TOC: headlines 1 local

   Note that for this feature to work properly in LaTeX export, the Org
file requires the inclusion of the titletoc package.  Because of
compatibility issues, titletoc has to be loaded _before_ hyperref.
Customize the ‘org-latex-default-packages-alist’ variable.

   The following example inserts a table of contents that links to the
children of the specified target.

     * Target
       :PROPERTIES:
       :CUSTOM_ID: TargetSection
       :END:
     ** Heading A
     ** Heading B
     * Another section
     #+TOC: headlines 1 :target #TargetSection

   The ‘:target’ attribute is supported in HTML, Markdown, ODT, and
ASCII export.

   Use the ‘TOC’ keyword to generate list of tables—respectively, all
listings—with captions.

     #+TOC: listings
     #+TOC: tables

   Normally Org uses the headline for its entry in the table of
contents.  But with ‘ALT_TITLE’ property, a different entry can be
specified for the table of contents.

   ---------- Footnotes ----------

   (1) At the moment, some export backends do not obey this
specification.  For example, LaTeX export excludes every unnumbered
headline from the table of contents.


File: org.info,  Node: Include Files,  Next: Macro Replacement,  Prev: Table of Contents,  Up: Exporting

13.4 Include Files
==================

During export, you can include the content of another file.  For
example, to include your ‘.emacs’ file, you could use:

     #+INCLUDE: "~/.emacs" src emacs-lisp

There are three positional arguments after the include keyword, they
are:
  1. The file name, this is the sole mandatory argument.  Org neither
     checks for correctness or validates the content in any way.
  2. The block name to wrap the file content in.  When this is
     ‘example’, ‘export’, or ‘src’ the content is escaped by
     ‘org-escape-code-in-string’.  Arbitrary block names may be given,
     however block names starting with ‘:’ must be quoted, i.e.
     ‘":name"’.
  3. The source code language to use for formatting the contents.  This
     is relevant to both ‘export’ and ‘src’ block types.

   If an included file is not specified as having any markup language,
Org assumes it be in Org format and proceeds as usual with a few
exceptions.  Org makes the footnote labels (see *note Creating
Footnotes::) in the included file local to that file.  The contents of
the included file belong to the same structure—headline, item—containing
the ‘INCLUDE’ keyword.  In particular, headlines within the file become
children of the current section.  That behavior can be changed by
providing an additional keyword parameter, ‘:minlevel’.  It shifts the
headlines in the included file to become the lowest level.  For example,
this syntax makes the included file a sibling of the current top-level
headline:

     #+INCLUDE: "~/my-book/chapter2.org" :minlevel 1

   Inclusion of only portions of files are specified using ranges
parameter with ‘:lines’ keyword.  The line at the upper end of the range
will not be included.  The start and/or the end of the range may be
omitted to use the obvious defaults.

‘#+INCLUDE: "~/.emacs" :lines "5-10"’   Include lines 5 to 10, 10 excluded
‘#+INCLUDE: "~/.emacs" :lines "-10"’    Include lines 1 to 10, 10 excluded
‘#+INCLUDE: "~/.emacs" :lines "10-"’    Include lines from 10 to EOF

   Inclusions may specify a file-link to extract an object matched by
‘org-link-search’(1) (see *note Search Options::).  The ranges for
‘:lines’ keyword are relative to the requested element.  Therefore,

     #+INCLUDE: "./paper.org::*conclusion" :lines 1-20

includes the first 20 lines of the headline named ‘conclusion’.

   To extract only the contents of the matched object, set
‘:only-contents’ property to non-‘nil’.  This omits any planning lines
or property drawers.  For example, to include the body of the heading
with the custom ID ‘theory’, you can use

     #+INCLUDE: "./paper.org::#theory" :only-contents t

   The following command allows navigating to the included document:

‘C-c '’ (‘org-edit-special’)

     Visit the included file at point.

   ---------- Footnotes ----------

   (1) Note that ‘org-link-search-must-match-exact-headline’ is locally
bound to non-‘nil’.  Therefore, ‘org-link-search’ only matches headlines
and named elements.


File: org.info,  Node: Macro Replacement,  Next: Comment Lines,  Prev: Include Files,  Up: Exporting

13.5 Macro Replacement
======================

Macros replace text snippets during export.  Macros are defined globally
in ‘org-export-global-macros’, or document-wise with the following
syntax:

     #+MACRO: name   replacement text; $1, $2 are arguments

which can be referenced using ‘{{{name(arg1, arg2)}}}’(1).  For example

     #+MACRO: poem Rose is $1, violet's $2. Life's ordered: Org assists you.
     {{{poem(red,blue)}}}

becomes

     Rose is red, violet's blue.  Life's ordered: Org assists you.

   As a special case, Org parses any replacement text starting with
‘(eval’ as an Emacs Lisp expression and evaluates it accordingly.
Within such templates, arguments become strings.  Thus, the following
macro

     #+MACRO: gnustamp (eval (concat "GNU/" (capitalize $1)))

turns ‘{{{gnustamp(linux)}}}’ into ‘GNU/Linux’ during export.

   Org recognizes macro references in following Org markup areas:
paragraphs, headlines, verse blocks, tables cells and lists.  Org also
recognizes macro references in keywords, such as ‘CAPTION’, ‘TITLE’,
‘AUTHOR’, ‘DATE’, and for some backend specific export options.

   Org comes with following pre-defined macros:

‘{{{keyword(NAME)}}}’
‘{{{title}}}’
‘{{{author}}}’
‘{{{email}}}’
     The ‘keyword’ macro collects all values from NAME keywords
     throughout the buffer, separated with white space.  ‘title’,
     ‘author’ and ‘email’ macros are shortcuts for, respectively,
     ‘{{{keyword(TITLE)}}}’, ‘{{{keyword(AUTHOR)}}}’ and
     ‘{{{keyword(EMAIL)}}}’.

‘{{{date}}}’
‘{{{date(FORMAT)}}}’
     This macro refers to the ‘DATE’ keyword.  FORMAT is an optional
     argument to the ‘date’ macro that is used only if ‘DATE’ is a
     single timestamp.  FORMAT should be a format string understood by
     ‘format-time-string’.

‘{{{time(FORMAT)}}}’
‘{{{modification-time(FORMAT, VC)}}}’
     These macros refer to the document’s date and time of export and
     date and time of modification.  FORMAT is a string understood by
     ‘format-time-string’.  If the second argument to the
     ‘modification-time’ macro is non-‘nil’, Org uses ‘vc.el’ to
     retrieve the document’s modification time from the version control
     system.  Otherwise Org reads the file attributes.

‘{{{input-file}}}’
     This macro refers to the filename of the exported file.

‘{{{property(PROPERTY-NAME)}}}’
‘{{{property(PROPERTY-NAME, SEARCH OPTION)}}}’
     This macro returns the value of property PROPERTY-NAME in the
     current entry.  If SEARCH-OPTION (see *note Search Options::)
     refers to a remote entry, use it instead.

‘{{{n}}}’
‘{{{n(NAME)}}}’
‘{{{n(NAME, ACTION)}}}’
     This macro implements custom counters by returning the number of
     times the macro has been expanded so far while exporting the
     buffer.  You can create more than one counter using different NAME
     values.  If ACTION is ‘-’, previous value of the counter is held,
     i.e., the specified counter is not incremented.  If the value is a
     number, the specified counter is set to that value.  If it is any
     other non-empty string, the specified counter is reset to 1.  You
     may leave NAME empty to reset the default counter.

   Moreover, inline source blocks (see *note Structure of Code Blocks::)
use the special ‘results’ macro to mark their output.  As such, you are
advised against re-defining it, unless you know what you are doing.

   The surrounding brackets can be made invisible by setting
‘org-hide-macro-markers’ to a non-‘nil’ value.

   Org expands macros at the very beginning of the export process.

   ---------- Footnotes ----------

   (1) Since commas separate the arguments, commas within arguments have
to be escaped with the backslash character.  So only those backslash
characters before a comma need escaping with another backslash
character.


File: org.info,  Node: Comment Lines,  Next: ASCII/Latin-1/UTF-8 export,  Prev: Macro Replacement,  Up: Exporting

13.6 Comment Lines
==================

Lines starting with zero or more whitespace characters followed by one
‘#’ and a whitespace are treated as comments and, as such, are not
exported.

   Likewise, regions surrounded by ‘#+BEGIN_COMMENT’ ... ‘#+END_COMMENT’
are not exported.

   Finally, a ‘COMMENT’ keyword at the beginning of an entry, but after
any other keyword or priority cookie, comments out the entire subtree.
In this case, the subtree is not exported and no code block within it is
executed either(1).  The command below helps changing the comment status
of a headline.

‘C-c ;’ (‘org-toggle-comment’)

     Toggle the ‘COMMENT’ keyword at the beginning of an entry.

   ---------- Footnotes ----------

   (1) For a less drastic behavior, consider using a select tag (see
*note Export Settings::) instead.


File: org.info,  Node: ASCII/Latin-1/UTF-8 export,  Next: Beamer Export,  Prev: Comment Lines,  Up: Exporting

13.7 ASCII/Latin-1/UTF-8 export
===============================

ASCII export produces an output file containing only plain ASCII
characters.  This is the simplest and most direct text output.  It does
not contain any Org markup.  Latin-1 and UTF-8 export use additional
characters and symbols available in these encoding standards.  All three
of these export formats offer the most basic of text output for maximum
portability.

   On export, Org fills and justifies text according to the text width
set in ‘org-ascii-text-width’.

   Org exports links using a footnote-like style where the descriptive
part is in the text and the link is in a note before the next heading.
See the variable ‘org-ascii-links-to-notes’ for details.

ASCII export commands
---------------------

‘C-c C-e t a’ (‘org-ascii-export-to-ascii’)
‘C-c C-e t l’
‘C-c C-e t u’

     Export as an ASCII file with a ‘.txt’ extension.  For ‘myfile.org’,
     Org exports to ‘myfile.txt’, overwriting without warning.  For
     ‘myfile.txt’, Org exports to ‘myfile.txt.txt’ in order to prevent
     data loss.

‘C-c C-e t A’ (‘org-ascii-export-to-ascii’)
‘C-c C-e t L’
‘C-c C-e t U’

     Export to a temporary buffer.  Does not create a file.

ASCII specific export settings
------------------------------

The ASCII export backend has one extra keyword for customizing ASCII
output.  Setting this keyword works similar to the general options (see
*note Export Settings::).

‘SUBTITLE’
     The document subtitle.  For long subtitles, use multiple
     ‘#+SUBTITLE’ lines in the Org file.  Org prints them on one
     continuous line, wrapping into multiple lines if necessary.

Header and sectioning structure
-------------------------------

Org converts the first three outline levels into headlines for ASCII
export.  The remaining levels are turned into lists.  To change this
cut-off point where levels become lists, see *note Export Settings::.

Quoting ASCII text
------------------

To insert text within the Org file by the ASCII backend, use one the
following constructs, inline, keyword, or export block:

     Inline text @@ascii:and additional text@@ within a paragraph.

     #+ASCII: Some text

     #+BEGIN_EXPORT ascii
     Org exports text in this block only when using ASCII backend.
     #+END_EXPORT

ASCII specific attributes
-------------------------

ASCII backend recognizes only one attribute, ‘:width’, which specifies
the width of a horizontal rule in number of characters.  The keyword and
syntax for specifying widths is:

     #+ATTR_ASCII: :width 10
     -----

ASCII special blocks
--------------------

Besides ‘#+BEGIN_CENTER’ blocks (see *note Paragraphs::), ASCII backend
has these two left and right justification blocks:

     #+BEGIN_JUSTIFYLEFT
     It's just a jump to the left...
     #+END_JUSTIFYLEFT

     #+BEGIN_JUSTIFYRIGHT
     ...and then a step to the right.
     #+END_JUSTIFYRIGHT


File: org.info,  Node: Beamer Export,  Next: HTML Export,  Prev: ASCII/Latin-1/UTF-8 export,  Up: Exporting

13.8 Beamer Export
==================

Org uses Beamer export to convert an Org file tree structure into
high-quality interactive slides for presentations.  Beamer is a LaTeX
document class for creating presentations in PDF, HTML, and other
popular display formats.

* Menu:

* Beamer export commands::       For creating Beamer documents.
* Beamer specific export settings:: For customizing Beamer export.
* Frames and Blocks in Beamer::  For composing Beamer slides.
* Beamer specific syntax::       For using in Org documents.
* Editing support::              Editing support.
* A Beamer example::             A complete presentation.


File: org.info,  Node: Beamer export commands,  Next: Beamer specific export settings,  Up: Beamer Export

13.8.1 Beamer export commands
-----------------------------

‘C-c C-e l b’ (‘org-beamer-export-to-latex’)

     Export as LaTeX file with a ‘.tex’ extension.  For ‘myfile.org’,
     Org exports to ‘myfile.tex’, overwriting without warning.

‘C-c C-e l B’ (‘org-beamer-export-as-latex’)

     Export to a temporary buffer.  Does not create a file.

‘C-c C-e l P’ (‘org-beamer-export-to-pdf’)

     Export as LaTeX file and then convert it to PDF format.

‘C-c C-e l O’

     Export as LaTeX file, convert it to PDF format, and then open the
     PDF file.


File: org.info,  Node: Beamer specific export settings,  Next: Frames and Blocks in Beamer,  Prev: Beamer export commands,  Up: Beamer Export

13.8.2 Beamer specific export settings
--------------------------------------

Beamer export backend has several additional keywords for customizing
Beamer output.  These keywords work similar to the general options
settings (see *note Export Settings::).

‘BEAMER_THEME’
     The Beamer layout theme (‘org-beamer-theme’).  Use square brackets
     for options.  For example:

          #+BEAMER_THEME: Rochester [height=20pt]

‘BEAMER_FONT_THEME’
     The Beamer font theme.

‘BEAMER_INNER_THEME’
     The Beamer inner theme.

‘BEAMER_OUTER_THEME’
     The Beamer outer theme.

‘BEAMER_HEADER’
     Arbitrary lines inserted in the preamble, just before the
     ‘hyperref’ settings.

‘DESCRIPTION’
     The document description.  For long descriptions, use multiple
     ‘DESCRIPTION’ keywords.  By default, ‘hyperref’ inserts
     ‘DESCRIPTION’ as metadata.  Use ‘org-latex-hyperref-template’ to
     configure document metadata.  Use ‘org-latex-title-command’ to
     configure typesetting of description as part of front matter.

‘KEYWORDS’
     The keywords for defining the contents of the document.  Use
     multiple ‘KEYWORDS’ lines if necessary.  By default, ‘hyperref’
     inserts ‘KEYWORDS’ as metadata.  Use ‘org-latex-hyperref-template’
     to configure document metadata.  Use ‘org-latex-title-command’ to
     configure typesetting of keywords as part of front matter.

‘SUBTITLE’
     Document’s subtitle.  For typesetting, use
     ‘org-beamer-subtitle-format’ string.  Use
     ‘org-latex-hyperref-template’ to configure document metadata.  Use
     ‘org-latex-title-command’ to configure typesetting of subtitle as
     part of front matter.


File: org.info,  Node: Frames and Blocks in Beamer,  Next: Beamer specific syntax,  Prev: Beamer specific export settings,  Up: Beamer Export

13.8.3 Frames and Blocks in Beamer
----------------------------------

Org transforms heading levels into Beamer’s sectioning elements, frames
and blocks.  Any Org tree with a not-too-deep-level nesting should in
principle be exportable as a Beamer presentation.

   • Org headlines become Beamer frames when the heading level in Org is
     equal to ‘org-beamer-frame-level’ or ‘H’ value in a ‘OPTIONS’ line
     (see *note Export Settings::).

     Org overrides headlines to frames conversion for the current tree
     of an Org file if it encounters the ‘BEAMER_ENV’ property set to
     ‘frame’ or ‘fullframe’.  Org ignores whatever
     ‘org-beamer-frame-level’ happens to be for that headline level in
     the Org tree.  In Beamer terminology, a full frame is a frame
     without its title.

   • Org exports a Beamer frame’s objects as block environments.  Org
     can enforce wrapping in special block types when ‘BEAMER_ENV’
     property is set(1).  For valid values see
     ‘org-beamer-environments-default’.  To add more values, see
     ‘org-beamer-environments-extra’.

   • If ‘BEAMER_ENV’ is set to ‘appendix’, Org exports the entry as an
     appendix.  When set to ‘note’, Org exports the entry as a note
     within the frame or between frames, depending on the entry’s
     heading level.  When set to ‘noteNH’, Org exports the entry as a
     note without its title.  When set to ‘againframe’, Org exports the
     entry with ‘\againframe’ command, which makes setting the
     ‘BEAMER_REF’ property mandatory because ‘\againframe’ needs frame
     to resume.

     When ‘ignoreheading’ is set, Org export ignores the entry’s
     headline but not its content.  This is useful for inserting content
     between frames.  It is also useful for properly closing a ‘column’
     environment.

     When ‘BEAMER_ACT’ is set for a headline, Org export translates that
     headline as an overlay or action specification.  When enclosed in
     square brackets, Org export makes the overlay specification a
     default.  Use ‘BEAMER_OPT’ to set any options applicable to the
     current Beamer frame or block.  The Beamer export backend wraps
     with appropriate angular or square brackets.  It also adds the
     ‘fragile’ option for any code that may require a verbatim block.

     To create a column on the Beamer slide, use the ‘BEAMER_COL’
     property for its headline in the Org file.  Set the value of
     ‘BEAMER_COL’ to a decimal number representing the fraction of the
     total text width.  Beamer export uses this value to set the
     column’s width and fills the column with the contents of the Org
     entry.  If the Org entry has no specific environment defined,
     Beamer export ignores the heading.  If the Org entry has a defined
     environment, Beamer export uses the heading as title.  Behind the
     scenes, Beamer export automatically handles LaTeX column
     separations for contiguous headlines.  To manually adjust them for
     any unique configurations needs, use the ‘BEAMER_ENV’ property.

   ---------- Footnotes ----------

   (1) If ‘BEAMER_ENV’ is set, Org export adds ‘B_environment’ tag to
make it visible.  The tag serves as a visual aid and has no semantic
relevance.


File: org.info,  Node: Beamer specific syntax,  Next: Editing support,  Prev: Frames and Blocks in Beamer,  Up: Beamer Export

13.8.4 Beamer specific syntax
-----------------------------

Since Org’s Beamer export backend is an extension of the LaTeX backend,
it recognizes other LaTeX specific syntax—for example, ‘#+LATEX:’ or
‘#+ATTR_LATEX:’.  See *note LaTeX Export::, for details.

   Beamer export wraps the table of contents generated with ‘toc:t’
‘OPTION’ keyword in a ‘frame’ environment.  Beamer export does not wrap
the table of contents generated with ‘TOC’ keyword (see *note Table of
Contents::).  Use square brackets for specifying options.

     #+TOC: headlines [currentsection]

   Insert Beamer-specific code using the following constructs:

     #+BEAMER: \pause

     #+BEGIN_EXPORT beamer
       Only Beamer export backend exports this.
     #+END_EXPORT

     Text @@beamer:some code@@ within a paragraph.

   Inline constructs, such as the last one above, are useful for adding
overlay specifications to objects with ‘bold’, ‘item’, ‘link’,
‘radio-target’ and ‘target’ types.  Enclose the value in angular
brackets and place the specification at the beginning of the object as
shown in this example:

     A *@@beamer:<2->@@useful* feature

   Beamer export recognizes the ‘ATTR_BEAMER’ keyword with the following
attributes from Beamer configurations: ‘:environment’ for changing local
Beamer environment, ‘:overlay’ for specifying Beamer overlays in angular
or square brackets, and ‘:options’ for inserting optional arguments.

     #+ATTR_BEAMER: :environment nonindentlist
     - item 1, not indented
     - item 2, not indented
     - item 3, not indented

     #+ATTR_BEAMER: :overlay <+->
     - item 1
     - item 2

     #+ATTR_BEAMER: :options [Lagrange]
     Let $G$ be a finite group, and let $H$ be
     a subgroup of $G$.  Then the order of $H$ divides the order of $G$.


File: org.info,  Node: Editing support,  Next: A Beamer example,  Prev: Beamer specific syntax,  Up: Beamer Export

13.8.5 Editing support
----------------------

Org Beamer mode is a special minor mode for faster editing of Beamer
documents.

     #+STARTUP: beamer

‘C-c C-b’ (‘org-beamer-select-environment’)

     Org Beamer mode provides this key for quicker selections in Beamer
     normal environments, and for selecting the ‘BEAMER_COL’ property.


File: org.info,  Node: A Beamer example,  Prev: Editing support,  Up: Beamer Export

13.8.6 A Beamer example
-----------------------

Here is an example of an Org document ready for Beamer export.

     #+TITLE: Example Presentation
     #+AUTHOR: Carsten Dominik
     #+OPTIONS: H:2 toc:t num:t
     #+LATEX_CLASS: beamer
     #+LATEX_CLASS_OPTIONS: [presentation]
     #+BEAMER_THEME: Madrid
     #+COLUMNS: %45ITEM %10BEAMER_ENV(Env) %10BEAMER_ACT(Act) %4BEAMER_COL(Col)

     * This is the first structural section

     ** Frame 1
     *** Thanks to Eric Fraga                                           :B_block:
         :PROPERTIES:
         :BEAMER_COL: 0.48
         :BEAMER_ENV: block
         :END:
         for the first viable Beamer setup in Org
     *** Thanks to everyone else                                        :B_block:
         :PROPERTIES:
         :BEAMER_COL: 0.48
         :BEAMER_ACT: <2->
         :BEAMER_ENV: block
         :END:
         for contributing to the discussion
     **** This will be formatted as a beamer note                       :B_note:
          :PROPERTIES:
          :BEAMER_env: note
          :END:
     ** Frame 2 (where we will not use columns)
     *** Request
         Please test this stuff!


File: org.info,  Node: HTML Export,  Next: LaTeX Export,  Prev: Beamer Export,  Up: Exporting

13.9 HTML Export
================

Org mode contains an HTML exporter with extensive HTML formatting
compatible with XHTML 1.0 strict standard.

* Menu:

* HTML export commands::         Invoking HTML export.
* HTML specific export settings:: Settings for HTML export.
* HTML doctypes::                Exporting various (X)HTML flavors.
* HTML preamble and postamble::  Inserting preamble and postamble.
* Bare HTML::                    Exporting HTML without CSS, Javascript, etc.
* Quoting HTML tags::            Using direct HTML in Org files.
* Headlines in HTML export::     Formatting headlines.
* Links in HTML export::         Inserting and formatting links.
* Tables in HTML export::        How to modify the formatting of tables.
* Images in HTML export::        How to insert figures into HTML output.
* Math formatting in HTML export:: Beautiful math also on the web.
* Text areas in HTML export::    An alternate way to show an example.
* CSS support::                  Changing the appearance of the output.
* JavaScript support::           Info and folding in a web browser.


File: org.info,  Node: HTML export commands,  Next: HTML specific export settings,  Up: HTML Export

13.9.1 HTML export commands
---------------------------

‘C-c C-e h h’ (‘org-html-export-to-html’)

     Export as HTML file with a ‘.html’ extension.  For ‘myfile.org’,
     Org exports to ‘myfile.html’, overwriting without warning.  ‘C-c
     C-e h o’ exports to HTML and opens it in a web browser.

‘C-c C-e h H’ (‘org-html-export-as-html’)

     Exports to a temporary buffer.  Does not create a file.


File: org.info,  Node: HTML specific export settings,  Next: HTML doctypes,  Prev: HTML export commands,  Up: HTML Export

13.9.2 HTML specific export settings
------------------------------------

HTML export has a number of keywords, similar to the general options
settings described in *note Export Settings::.

‘DESCRIPTION’
     This is the document’s description, which the HTML exporter inserts
     it as a HTML meta tag in the HTML file.  For long descriptions, use
     multiple ‘DESCRIPTION’ lines.  The exporter takes care of wrapping
     the lines properly.

     The exporter includes a number of other meta tags, which can be
     customized by modifying ‘org-html-meta-tags’.

‘HTML_DOCTYPE’
     Specify the document type, for example: HTML5 (‘org-html-doctype’).

‘HTML_CONTAINER’
     Specify the HTML container, such as ‘div’, for wrapping sections
     and elements (‘org-html-container-element’).

‘HTML_LINK_HOME’
     The URL for home link (‘org-html-link-home’).

‘HTML_LINK_UP’
     The URL for the up link of exported HTML pages
     (‘org-html-link-up’).

‘HTML_MATHJAX’
     Options for MathJax (‘org-html-mathjax-options’).  MathJax is used
     to typeset LaTeX math in HTML documents.  See *note Math formatting
     in HTML export::, for an example.

‘HTML_HEAD’
     Arbitrary lines for appending to the HTML document’s head
     (‘org-html-head’).

‘HTML_HEAD_EXTRA’
     More arbitrary lines for appending to the HTML document’s head
     (‘org-html-head-extra’).

‘KEYWORDS’
     Keywords to describe the document’s content.  HTML exporter inserts
     these keywords as HTML meta tags.  For long keywords, use multiple
     ‘KEYWORDS’ lines.

‘LATEX_HEADER’
     Arbitrary lines for appending to the preamble; HTML exporter
     appends when transcoding LaTeX fragments to images (see *note Math
     formatting in HTML export::).

‘SUBTITLE’
     The document’s subtitle.  HTML exporter formats subtitle if
     document type is ‘HTML5’ and the CSS has a ‘subtitle’ class.

   Some of these keywords are explained in more detail in the following
sections of the manual.


File: org.info,  Node: HTML doctypes,  Next: HTML preamble and postamble,  Prev: HTML specific export settings,  Up: HTML Export

13.9.3 HTML doctypes
--------------------

Org can export to various (X)HTML flavors.

   Set the ‘org-html-doctype’ variable for different (X)HTML variants.
Depending on the variant, the HTML exporter adjusts the syntax of HTML
conversion accordingly.  Org includes the following ready-made variants:

   • ‘"html4-strict"’
   • ‘"html4-transitional"’
   • ‘"html4-frameset"’
   • ‘"xhtml-strict"’
   • ‘"xhtml-transitional"’
   • ‘"xhtml-frameset"’
   • ‘"xhtml-11"’
   • ‘"html5"’
   • ‘"xhtml5"’

See the variable ‘org-html-doctype-alist’ for details.  The default is
‘"xhtml-strict"’.

   Org’s HTML exporter does not by default enable new block elements
introduced with the HTML5 standard.  To enable them, set
‘org-html-html5-fancy’ to non-‘nil’.  Or use an ‘OPTIONS’ line in the
file to set ‘html5-fancy’.

   HTML5 documents can have arbitrary ‘#+BEGIN’ ... ‘#+END’ blocks.  For
example:

     #+BEGIN_aside
       Lorem ipsum
     #+END_aside

exports to:

     <aside>
       <p>Lorem ipsum</p>
     </aside>

while this:

     #+ATTR_HTML: :controls controls :width 350
     #+BEGIN_video
     #+HTML: <source src="movie.mp4" type="video/mp4">
     #+HTML: <source src="movie.ogg" type="video/ogg">
     Your browser does not support the video tag.
     #+END_video

exports to:

     <video controls="controls" width="350">
       <source src="movie.mp4" type="video/mp4">
       <source src="movie.ogg" type="video/ogg">
       <p>Your browser does not support the video tag.</p>
     </video>

   When special blocks do not have a corresponding HTML5 element, the
HTML exporter reverts to standard translation (see
‘org-html-html5-elements’).  For example, ‘#+BEGIN_lederhosen’ exports
to ‘<div class="lederhosen">’.

   Special blocks cannot have headlines.  For the HTML exporter to wrap
the headline and its contents in ‘<section>’ or ‘<article>’ tags, set
the ‘HTML_CONTAINER’ property for the headline.


File: org.info,  Node: HTML preamble and postamble,  Next: Bare HTML,  Prev: HTML doctypes,  Up: HTML Export

13.9.4 HTML preamble and postamble
----------------------------------

The HTML exporter has delineations for preamble and postamble.  The
default value for ‘org-html-preamble’ is ‘t’, which makes the HTML
exporter insert the preamble.  See the variable
‘org-html-preamble-format’ for the format string.

   Set ‘org-html-preamble’ to a string to override the default format
string.  If set to a function, the HTML exporter expects the function to
return a string upon execution.  The HTML exporter inserts this string
in the preamble.  The HTML exporter does not insert a preamble if
‘org-html-preamble’ is set ‘nil’.

   The above also applies to ‘org-html-postamble’ and
‘org-html-postamble-format’.  In addition, ‘org-html-postamble’ can be
set to ‘auto’ (its default value), which makes the HTML exporter build a
postamble from looking up author’s name, email address, creator’s name,
and date.


File: org.info,  Node: Bare HTML,  Next: Quoting HTML tags,  Prev: HTML preamble and postamble,  Up: HTML Export

13.9.5 Exporting to minimal HTML
--------------------------------

If you want to output a minimal HTML file, with no CSS, no Javascript,
no preamble or postamble, here are the variable you would need to set:

     (setq org-html-head ""
           org-html-head-extra ""
           org-html-head-include-default-style nil
           org-html-head-include-scripts nil
           org-html-preamble nil
           org-html-postamble nil
           org-html-use-infojs nil)


File: org.info,  Node: Quoting HTML tags,  Next: Headlines in HTML export,  Prev: Bare HTML,  Up: HTML Export

13.9.6 Quoting HTML tags
------------------------

The HTML export backend transforms ‘<’ and ‘>’ to ‘&lt;’ and ‘&gt;’.  To
include raw HTML code in the Org file so the HTML export backend can
insert that HTML code in the output, use this inline syntax:
‘@@html:...@@’.  For example:

     @@html:<b>@@bold text@@html:</b>@@

   For larger raw HTML code blocks, use these HTML export code blocks:

     #+HTML: Literal HTML code for export

     #+BEGIN_EXPORT html
       All lines between these markers are exported literally
     #+END_EXPORT


File: org.info,  Node: Headlines in HTML export,  Next: Links in HTML export,  Prev: Quoting HTML tags,  Up: HTML Export

13.9.7 Headlines in HTML export
-------------------------------

Headlines are exported to ‘<h1>’, ‘<h2>’, etc.  Each headline gets the
‘id’ attribute from ‘CUSTOM_ID’ property, or a unique generated value,
see *note Internal Links::.

   When ‘org-html-self-link-headlines’ is set to a non-‘nil’ value, the
text of the headlines is also wrapped in ‘<a>’ tags.  These tags have a
‘href’ attribute making the headlines link to themselves.


File: org.info,  Node: Links in HTML export,  Next: Tables in HTML export,  Prev: Headlines in HTML export,  Up: HTML Export

13.9.8 Links in HTML export
---------------------------

The HTML export backend transforms Org’s internal links (see *note
Internal Links::) to equivalent HTML links in the output.  The backend
similarly handles Org’s automatic links created by radio targets (see
*note Radio Targets::) similarly.  For Org links to external files, the
backend transforms the links to _relative_ paths.

   For Org links to other ‘.org’ files, the backend automatically
changes the file extension to ‘.html’ and makes file paths relative.  If
the ‘.org’ files have an equivalent ‘.html’ version at the same
location, then the converted links should work without any further
manual intervention.  However, to disable this automatic path
translation, set ‘org-html-link-org-files-as-html’ to ‘nil’.  When
disabled, the HTML export backend substitutes the ID-based links in the
HTML output.  For more about linking files when publishing to a
directory, see *note Publishing links::.

   Org files can also have special directives to the HTML export
backend.  For example, by using ‘#+ATTR_HTML’ lines to specify new
format attributes to ‘<a>’ or ‘<img>’ tags.  This example shows changing
the link’s title and style:

     #+ATTR_HTML: :title The Org mode website :style color:red;
     [[https://orgmode.org]]


File: org.info,  Node: Tables in HTML export,  Next: Images in HTML export,  Prev: Links in HTML export,  Up: HTML Export

13.9.9 Tables in HTML export
----------------------------

The HTML export backend uses ‘org-html-table-default-attributes’ when
exporting Org tables to HTML.  By default, the exporter does not draw
frames and cell borders.  To change for this for a table, use the
following lines before the table in the Org file:

     #+CAPTION: This is a table with lines around and between cells
     #+ATTR_HTML: :border 2 :rules all :frame border

   The HTML export backend preserves column groupings in Org tables (see
*note Column Groups::) when exporting to HTML.

   Additional options for customizing tables for HTML export.

‘org-html-table-align-individual-fields’
     Non-‘nil’ attaches style attributes for alignment to each table
     field.

‘org-html-table-caption-above’
     Non-‘nil’ places caption string at the beginning of the table.

‘org-html-table-data-tags’
     Opening and ending tags for table data fields.

‘org-html-table-default-attributes’
     Default attributes and values for table tags.

‘org-html-table-header-tags’
     Opening and ending tags for table’s header fields.

‘org-html-table-row-tags’
     Opening and ending tags for table rows.

‘org-html-table-use-header-tags-for-first-column’
     Non-‘nil’ formats column one in tables with header tags.


File: org.info,  Node: Images in HTML export,  Next: Math formatting in HTML export,  Prev: Tables in HTML export,  Up: HTML Export

13.9.10 Images in HTML export
-----------------------------

The HTML export backend has features to convert Org image links to HTML
inline images and HTML clickable image links.

   When the link in the Org file has no description, the HTML export
backend by default in-lines that image.  For example:
‘[[file:myimg.jpg]]’ is in-lined, while ‘[[file:myimg.jpg][the image]]’
links to the text, ‘the image’.  For more details, see the variable
‘org-html-inline-images’.

   On the other hand, if the description part of the Org link is itself
another link, such as ‘file:’ or ‘http:’ URL pointing to an image, the
HTML export backend in-lines this image and links to the main image.
This Org syntax enables the backend to link low-resolution thumbnail to
the high-resolution version of the image, as shown in this example:

     [[file:highres.jpg][file:thumb.jpg]]

   To change attributes of in-lined images, use ‘#+ATTR_HTML’ lines in
the Org file.  This example shows realignment to right, and adds ‘alt’
and ‘title’ attributes in support of text viewers and modern web
accessibility standards.

     #+CAPTION: A black cat stalking a spider
     #+ATTR_HTML: :alt cat/spider image :title Action! :align right
     [[./img/a.jpg]]

   The HTML export backend copies the ‘http’ links from the Org file
as-is.


File: org.info,  Node: Math formatting in HTML export,  Next: Text areas in HTML export,  Prev: Images in HTML export,  Up: HTML Export

13.9.11 Math formatting in HTML export
--------------------------------------

LaTeX math snippets (see *note LaTeX fragments::) can be displayed in
two different ways on HTML pages.  The default is to use the MathJax
(https://www.mathjax.org), which should work out of the box with
Org(1)(2).  Some MathJax display options can be configured via
‘org-html-mathjax-options’, or in the buffer.  For example, with the
following settings,

     #+HTML_MATHJAX: align: left indent: 5em tagside: left

equation labels are displayed on the left margin and equations are five
em from the left margin.

   See the docstring of ‘org-html-mathjax-options’ for all supported
variables.  The MathJax template can be configure via
‘org-html-mathjax-template’.

   If you prefer, you can also request that LaTeX fragments are
processed into small images that will be inserted into the browser page.
Before the availability of MathJax, this was the default method for Org
files.  This method requires that the dvipng program, dvisvgm or
ImageMagick suite is available on your system.  You can still get this
processing with

     #+OPTIONS: tex:dvipng

     #+OPTIONS: tex:dvisvgm

or

     #+OPTIONS: tex:imagemagick

   ---------- Footnotes ----------

   (1) By default, Org loads MathJax from jsDelivr
(https://www.jsdelivr.com/), as recommended in Getting Started with
MathJax Components (https://docs.mathjax.org/en/latest/web/start.html).

   (2) Please note that exported formulas are part of an HTML document,
and that signs such as ‘<’, ‘>’, or ‘&’ have special meanings.  See
MathJax TeX and LaTeX in HTML documents
(https://docs.mathjax.org/en/latest/input/tex/html.html#tex-and-latex-in-html-documents).


File: org.info,  Node: Text areas in HTML export,  Next: CSS support,  Prev: Math formatting in HTML export,  Up: HTML Export

13.9.12 Text areas in HTML export
---------------------------------

Before Org mode’s Babel, one popular approach to publishing code in HTML
was by using ‘:textarea’.  The advantage of this approach was that
copying and pasting was built into browsers with simple JavaScript
commands.  Even editing before pasting was made simple.

   The HTML export backend can create such text areas.  It requires an
‘#+ATTR_HTML’ line as shown in the example below with the ‘:textarea’
option.  This must be followed by either an example or a source code
block.  Other Org block types do not honor the ‘:textarea’ option.

   By default, the HTML export backend creates a text area 80 characters
wide and height just enough to fit the content.  Override these defaults
with ‘:width’ and ‘:height’ options on the ‘#+ATTR_HTML’ line.

     #+ATTR_HTML: :textarea t :width 40
     #+BEGIN_EXAMPLE
       (defun org-xor (a b)
          "Exclusive or."
          (if a (not b) b))
     #+END_EXAMPLE


File: org.info,  Node: CSS support,  Next: JavaScript support,  Prev: Text areas in HTML export,  Up: HTML Export

13.9.13 CSS support
-------------------

You can modify the CSS style definitions for the exported file.  The
HTML exporter assigns the following special CSS classes(1) to
appropriate parts of the document—your style specifications may change
these, in addition to any of the standard classes like for headlines,
tables, etc.

‘p.author’             author information, including email
‘p.date’               publishing date
‘p.creator’            creator info, about org mode version
‘.title’               document title
‘.subtitle’            document subtitle
‘.todo’                TODO keywords, all not-done states
‘.done’                the DONE keywords, all states that count as done
‘.WAITING’             each TODO keyword also uses a class named after itself
‘.timestamp’           timestamp
‘.timestamp-kwd’       keyword associated with a timestamp, like ‘SCHEDULED’
‘.timestamp-wrapper’   span around keyword plus timestamp
‘.tag’                 tag in a headline
‘._HOME’               each tag uses itself as a class, “@” replaced by “_”
‘.target’              target for links
‘.linenr’              the line number in a code example
‘.code-highlighted’    for highlighting referenced code lines
‘div.outline-N’        div for outline level N (headline plus text)
‘div.outline-text-N’   extra div for text at outline level N
‘.section-number-N’    section number in headlines, different for each level
‘.figure-number’       label like “Figure 1:”
‘.table-number’        label like “Table 1:”
‘.listing-number’      label like “Listing 1:”
‘div.figure’           how to format an in-lined image
‘pre.src’              formatted source code
‘pre.example’          normal example
‘p.verse’              verse paragraph
‘div.footnotes’        footnote section headline
‘p.footnote’           footnote definition paragraph, containing a footnote
‘.footref’             a footnote reference number (always a <sup>)
‘.footnum’             footnote number in footnote definition (always <sup>)
‘.org-svg’             default class for a linked ‘.svg’ image

   The HTML export backend includes a compact default style in each
exported HTML file.  To override the default style with another style,
use these keywords in the Org file.  They will replace the global
defaults the HTML exporter uses.

     #+HTML_HEAD: <link rel="stylesheet" type="text/css" href="style1.css" />
     #+HTML_HEAD_EXTRA: <link rel="alternate stylesheet" type="text/css" href="style2.css" />

   To just turn off the default style, customize
‘org-html-head-include-default-style’ variable, or use this option line
in the Org file.

     #+OPTIONS: html-style:nil

   For longer style definitions, either use several ‘HTML_HEAD’ and
‘HTML_HEAD_EXTRA’ keywords, or use ‘<style> ... </style>’ blocks around
them.  Both of these approaches can avoid referring to an external file.

   In order to add styles to a subtree, use the ‘HTML_CONTAINER_CLASS’
property to assign a class to the tree.  In order to specify CSS styles
for a particular headline, you can use the ID specified in a ‘CUSTOM_ID’
property.  You can also assign a specific class to a headline with the
‘HTML_HEADLINE_CLASS’ property.

   Never change the ‘org-html-style-default’ constant.  Instead use
other simpler ways of customizing as described above.

   ---------- Footnotes ----------

   (1) If the classes on TODO keywords and tags lead to conflicts, use
the variables ‘org-html-todo-kwd-class-prefix’ and
‘org-html-tag-class-prefix’ to make them unique.


File: org.info,  Node: JavaScript support,  Prev: CSS support,  Up: HTML Export

13.9.14 JavaScript supported display of web pages
-------------------------------------------------

Sebastian Rose has written a JavaScript program especially designed to
allow two different ways of viewing HTML files created with Org.  One is
an _Info_-like mode where each section is displayed separately and
navigation can be done with the ‘n’ and ‘p’ keys, and some other keys as
well, press ‘?’ for an overview of the available keys.  The second one
has a _folding_ view, much like Org provides inside Emacs.  The script
is available at <https://orgmode.org/org-info.js> and the documentation
at <https://orgmode.org/worg/code/org-info-js/>.  The script is hosted
on <https://orgmode.org>, but for reliability, prefer installing it on
your own web server.

   To use this program, just add this line to the Org file:

     #+INFOJS_OPT: view:info toc:nil

The HTML header now has the code needed to automatically invoke the
script.  For setting options, use the syntax from the above line for
options described below:

‘path:’
     The path to the script.  The default is to grab the script from
     <https://orgmode.org/org-info.js>, but you might want to have a
     local copy and use a path like ‘../scripts/org-info.js’.

‘view:’
     Initial view when the website is first shown.  Possible values are:

     ‘info’       Info-like interface with one section per page
     ‘overview’   Folding interface, initially showing only top-level
     ‘content’    Folding interface, starting with all headlines visible
     ‘showall’    Folding interface, all headlines and text visible

‘sdepth:’
     Maximum headline level still considered as an independent section
     for info and folding modes.  The default is taken from
     ‘org-export-headline-levels’, i.e., the ‘H’ switch in ‘OPTIONS’.
     If this is smaller than in ‘org-export-headline-levels’, each
     info/folding section can still contain child headlines.

‘toc:’
     Should the table of contents _initially_ be visible?  Even when
     ‘nil’, you can always get to the “toc” with ‘i’.

‘tdepth:’
     The depth of the table of contents.  The defaults are taken from
     the variables ‘org-export-headline-levels’ and
     ‘org-export-with-toc’.

‘ftoc:’
     Does the CSS of the page specify a fixed position for the “toc”?
     If yes, the toc is displayed as a section.

‘ltoc:’
     Should there be short contents (children) in each section?  Make
     this ‘above’ if the section should be above initial text.

‘mouse:’
     Headings are highlighted when the mouse is over them.  Should be
     ‘underline’ (default) or a background color like ‘#cccccc’.

‘buttons:’
     Should view-toggle buttons be everywhere?  When ‘nil’ (the
     default), only one such button is present.

   You can choose default values for these options by customizing the
variable ‘org-infojs-options’.  If you always want to apply the script
to your pages, configure the variable ‘org-export-html-use-infojs’.


File: org.info,  Node: LaTeX Export,  Next: Markdown Export,  Prev: HTML Export,  Up: Exporting

13.10 LaTeX Export
==================

The LaTeX export backend can handle complex documents, incorporate
standard or custom LaTeX document classes, generate documents using
alternate LaTeX engines, and produce fully linked PDF files with
indexes, bibliographies, and tables of contents, destined for
interactive online viewing or high-quality print publication.

   While the details are covered in-depth in this section, here are some
quick references to variables for the impatient: for engines, see
‘org-latex-compiler’; for build sequences, see ‘org-latex-pdf-process’;
for packages, see ‘org-latex-default-packages-alist’ and
‘org-latex-packages-alist’.

   An important note about the LaTeX export backend: it is sensitive to
blank lines in the Org document.  That’s because LaTeX itself depends on
blank lines to tell apart syntactical elements, such as paragraphs.

   The following sections expect users to be familiar with common LaTeX
terminology.  You may refer to <https://tug.org/begin.html> to get
familiar with LaTeX basics.  Users with LaTeX installed may also run
‘texdoc latex’ from terminal to open LaTeX introduction (1)

* Menu:

* LaTeX/PDF export commands:: For producing LaTeX and PDF documents.
* LaTeX specific export settings:: Unique to this LaTeX backend.
* LaTeX header and sectioning:: Setting up the export file structure.
* Quoting LaTeX code::        Incorporating literal LaTeX code.
* Tables in LaTeX export::    Options for exporting tables to LaTeX.
* Images in LaTeX export::    How to insert figures into LaTeX output.
* Plain lists in LaTeX export:: Attributes specific to lists.
* Source blocks in LaTeX export:: Attributes specific to source code blocks.
* Example blocks in LaTeX export:: Attributes specific to example blocks.
* Special blocks in LaTeX export:: Attributes specific to special blocks.
* Horizontal rules in LaTeX export:: Attributes specific to horizontal rules.
* Verse blocks in LaTeX export:: Attributes specific to special blocks.
* Quote blocks in LaTeX export:: Attributes specific to quote blocks.

   ---------- Footnotes ----------

   (1) The command will open a PDF file, which is also available for
download from
<http://mirrors.ctan.org/info/latex-doc-ptr/latex-doc-ptr.pdf>


File: org.info,  Node: LaTeX/PDF export commands,  Next: LaTeX specific export settings,  Up: LaTeX Export

13.10.1 LaTeX/PDF export commands
---------------------------------

‘C-c C-e l l’ (‘org-latex-export-to-latex’)
     Export to a LaTeX file with a ‘.tex’ extension.  For ‘myfile.org’,
     Org exports to ‘myfile.tex’, overwriting without warning.

‘C-c C-e l L’ (‘org-latex-export-as-latex’)
     Export to a temporary buffer.  Do not create a file.

‘C-c C-e l p’ (‘org-latex-export-to-pdf’)
     Export as LaTeX file and convert it to PDF file.

‘C-c C-e l o’
     Export as LaTeX file and convert it to PDF, then open the PDF using
     the default viewer.

‘M-x org-export-region-as-latex’
     Convert the region to LaTeX under the assumption that it was in Org
     mode syntax before.  This is a global command that can be invoked
     in any buffer.

   The LaTeX export backend can use any of these LaTeX engines:
‘pdflatex’, ‘xelatex’, and ‘lualatex’.  These engines compile LaTeX
files with different compilers, packages, and output options.  The LaTeX
export backend finds the compiler version to use from
‘org-latex-compiler’ variable or the ‘#+LATEX_COMPILER’ keyword in the
Org file.  See the docstring for the ‘org-latex-default-packages-alist’
for loading packages with certain compilers.  Also see
‘org-latex-bibtex-compiler’ to set the bibliography compiler(1).

   ---------- Footnotes ----------

   (1) This does not allow setting different bibliography compilers for
different files.  However, “smart” LaTeX compilation systems, such as
latexmk, can select the correct bibliography compiler.


File: org.info,  Node: LaTeX specific export settings,  Next: LaTeX header and sectioning,  Prev: LaTeX/PDF export commands,  Up: LaTeX Export

13.10.2 LaTeX specific export settings
--------------------------------------

The LaTeX export backend has several additional keywords for customizing
LaTeX output.  Setting these keywords works similar to the general
options (see *note Export Settings::).

‘DESCRIPTION’
     The document’s description.  The description along with author
     name, keywords, and related file metadata are inserted in the
     output file by the hyperref package.  See
     ‘org-latex-hyperref-template’ for customizing metadata items.  See
     ‘org-latex-title-command’ for typesetting description into the
     document’s front matter.  Use multiple ‘DESCRIPTION’ keywords for
     long descriptions.

‘LANGUAGE’

     Language code of the primary document language.

     The list of language codes supported by Org is stored in the
     variable ‘org-latex-language-alist’.

     In order to be effective, the ‘babel’ or ‘polyglossia’
     packages—according to the LaTeX compiler used—must be loaded with
     the appropriate language as argument.  This can be accomplished by
     modifying the ‘org-latex-packages-alist’ variable, e.g., with the
     following snippet (note that ‘polyglossia’ does not work with
     pdfLaTeX):

          (add-to-list 'org-latex-packages-alist
                       '("AUTO" "babel" t ("pdflatex" "xelatex" "lualatex")))
          (add-to-list 'org-latex-packages-alist
                       '("AUTO" "polyglossia" t ("xelatex" "lualatex")))

‘LATEX_CLASS’
     This is LaTeX document class, such as _article_, _report_, _book_,
     and so on, which contain predefined preamble and headline level
     mapping that the LaTeX export backend needs.  The backend reads the
     default class name from the ‘org-latex-default-class’ variable.
     Org has _article_ as the default class.  A valid default class must
     be an element of ‘org-latex-classes’.

‘LATEX_CLASS_OPTIONS’
     Options the LaTeX export backend uses when calling the LaTeX
     document class.

‘LATEX_COMPILER’
     The compiler, such as ‘pdflatex’, ‘xelatex’, ‘lualatex’, for
     producing the PDF.  See ‘org-latex-compiler’.

‘LATEX_HEADER’
‘LATEX_HEADER_EXTRA’
     Arbitrary lines to add to the document’s preamble, before the
     hyperref settings.  See ‘org-latex-classes’ for adjusting the
     structure and order of the LaTeX headers.

‘KEYWORDS’
     The keywords for the document.  The description along with author
     name, keywords, and related file metadata are inserted in the
     output file by the hyperref package.  See
     ‘org-latex-hyperref-template’ for customizing metadata items.  See
     ‘org-latex-title-command’ for typesetting description into the
     document’s front matter.  Use multiple ‘KEYWORDS’ lines if
     necessary.

‘SUBTITLE’
     The document’s subtitle.  It is typeset as per
     ‘org-latex-subtitle-format’.  If ‘org-latex-subtitle-separate’ is
     non-‘nil’, it is typed outside of the ‘\title’ macro.  See
     ‘org-latex-hyperref-template’ for customizing metadata items.  See
     ‘org-latex-title-command’ for typesetting description into the
     document’s front matter.

   The following sections have further details.


File: org.info,  Node: LaTeX header and sectioning,  Next: Quoting LaTeX code,  Prev: LaTeX specific export settings,  Up: LaTeX Export

13.10.3 LaTeX header and sectioning structure
---------------------------------------------

The LaTeX export backend converts the first three of Org’s outline
levels into LaTeX headlines.  The remaining Org levels are exported as
lists.  To change this globally for the cut-off point between levels and
lists, (see *note Export Settings::).

   By default, the LaTeX export backend uses the _article_ class.

   To change the default class globally, edit ‘org-latex-default-class’.
To change the default class locally in an Org file, add option lines
‘#+LATEX_CLASS: myclass’.  To change the default class for just a part
of the Org file, set a subtree property, ‘EXPORT_LATEX_CLASS’.  The
class name entered here must be valid member of ‘org-latex-classes’.
This variable defines a header template for each class into which the
exporter splices the values of ‘org-latex-default-packages-alist’ and
‘org-latex-packages-alist’.  Use the same three variables to define
custom sectioning or custom classes.

   The LaTeX export backend sends the ‘LATEX_CLASS_OPTIONS’ keyword and
‘EXPORT_LATEX_CLASS_OPTIONS’ property as options to the LaTeX
‘\documentclass’ macro.  The options and the syntax for specifying them,
including enclosing them in square brackets, follow LaTeX conventions.

     #+LATEX_CLASS_OPTIONS: [a4paper,11pt,twoside,twocolumn]

   The LaTeX export backend appends values from ‘LATEX_HEADER’ and
‘LATEX_HEADER_EXTRA’ keywords to the LaTeX header.  The docstring for
‘org-latex-classes’ explains in more detail.  Also note that LaTeX
export backend does not append ‘LATEX_HEADER_EXTRA’ to the header when
previewing LaTeX snippets (see *note Previewing LaTeX fragments::).

   A sample Org file with the above headers:

     #+LATEX_CLASS: article
     #+LATEX_CLASS_OPTIONS: [a4paper]
     #+LATEX_HEADER: \usepackage{xyz}

     * Headline 1
       some text
     * Headline 2
       some more text

   LaTeX packages ‘babel’ or ‘polyglossia’ can also be loaded in a
document.  The “AUTO” string will be replaced in both cases by the
appropriate value for the ‘LANGUAGE’ keyword, if present in the
document, or by the value of ‘org-export-default-language’.  Let’s see
some examples in one or another case.

   ‘Babel’ accepts the classic syntax and (in addition) the new syntax
with the ‘\babelprovide’ command to load the languages using the new
‘INI’ files procedure.  Keep in mind that there are a number of
languages that are only served in babel using ‘INI’ files, so they
cannot be declared using the classic syntax, but only using the
‘\babelprovide’ command (see
<https://mirrors.ctan.org/macros/latex/required/babel/base/babel.pdf>).
Valid usage examples could be:

     #+LATEX_HEADER: \usepackage[french,italian,AUTO]{babel}

   where “AUTO” is the main language.  But it can also be loaded using
the ‘\babelprovide’ command:

     #+LATEX_HEADER: \usepackage[french,italian]{babel}
     #+LATEX_HEADER: \babelprovide[import, main]{AUTO}

   ‘Polyglossia’, for this procedure to be effective, must be loaded
using the same ‘babel’ classic syntax (but note that _this is not_ the
actual polyglossia syntax).  For example, suppose a document declares
Polytonic Greek as the primary language, and French as the secondary
language.  In this case, it would be expressed as:

     #+LANGUAGE: el-polyton
     #+LATEX_HEADER: \usepackage[french,AUTO]{polyglossia}

   This would produce in LaTeX (with the actual ‘polyglossia’ syntax):

     \usepackage{polyglossia}
     \setmainlanguage[variant=polytonic]{greek}
     \setotherlanguage{french}


File: org.info,  Node: Quoting LaTeX code,  Next: Tables in LaTeX export,  Prev: LaTeX header and sectioning,  Up: LaTeX Export

13.10.4 Quoting LaTeX code
--------------------------

When the available LaTeX export customizations are not sufficient to
fine-tune the desired output, it is possible to insert any arbitrary
LaTeX code (see *note Embedded LaTeX::).  There are three ways to embed
such code in the Org file and they all use different quoting syntax.

   Inserting in-line quoted with @ symbols:

     Code embedded in-line @@latex:any arbitrary LaTeX code@@ in a paragraph.

   Inserting as one or more keyword lines in the Org file:

     #+LATEX: any arbitrary LaTeX code

   Inserting as an export block in the Org file, where the backend
exports any code between begin and end markers:

     #+BEGIN_EXPORT latex
       any arbitrary LaTeX code
     #+END_EXPORT


File: org.info,  Node: Tables in LaTeX export,  Next: Images in LaTeX export,  Prev: Quoting LaTeX code,  Up: LaTeX Export

13.10.5 Tables in LaTeX export
------------------------------

The LaTeX export backend can pass several LaTeX attributes for table
contents and layout.  Besides specifying a label (see *note Internal
Links::) and a caption (see *note Captions::), the other valid LaTeX
attributes include:

‘:mode’
     The LaTeX export backend wraps the table differently depending on
     the mode for accurate rendering of math symbols.  Mode is either
     ‘table’, ‘math’, ‘inline-math’, ‘verbatim’ or ‘tabbing’.

     For ‘math’ or ‘inline-math’ mode, LaTeX export backend wraps the
     table in a math environment, but every cell in it is exported
     as-is.  For ‘tabbing’ the LaTeX tabbing environment is used and the
     correct tabbing delimiters ‘\>’ are used.  The LaTeX export backend
     determines the default mode from ‘org-latex-default-table-mode’.
     The LaTeX export backend merges contiguous tables in the same mode
     into a single environment.

‘:environment’
     Set the default LaTeX table environment for the LaTeX export
     backend to use when exporting Org tables.  Common LaTeX table
     environments are provided by these packages: tabularx, longtable,
     array, tabu, and bmatrix.  For packages, such as tabularx and tabu,
     or any newer replacements, include them in the
     ‘org-latex-packages-alist’ variable so the LaTeX export backend can
     insert the appropriate load package headers in the converted LaTeX
     file.  Look in the docstring for the ‘org-latex-packages-alist’
     variable for configuring these packages for LaTeX snippet previews,
     if any.

‘:caption’
     Use ‘CAPTION’ keyword to set a simple caption for a table (see
     *note Captions::).  For custom captions, use ‘:caption’ attribute,
     which accepts raw LaTeX code.  ‘:caption’ value overrides ‘CAPTION’
     value.

‘:float’
‘:placement’
     The table environments by default are not floats in LaTeX.  To make
     them floating objects use ‘:float’ with one of the following
     options: ‘t’ (for a default ‘table’ environment), ‘sideways’ (for a
     ‘sidewaystable’ environment), ‘multicolumn’ (to span the table
     across multiple columns of a page in a ‘table*’ environment) and
     ‘nil’.  In addition to these three values, ‘:float’ can pass
     through any arbitrary value, for example a user-defined float type
     with the ‘float’ LaTeX package.

     LaTeX floats can also have additional layout ‘:placement’
     attributes.  These are the usual ‘[h t b p ! H]’ permissions
     specified in square brackets.  Note that for ‘:float sideways’
     tables, the LaTeX export backend ignores ‘:placement’ attributes.

‘:align’
‘:font’
‘:width’
     The LaTeX export backend uses these attributes for regular tables
     to set their alignments, fonts, and widths.

‘:options’
     The ‘:options’ attribute allows adding an optional argument with a
     list of various table options (between brackets in LaTeX export),
     since certain tabular environments, such as longtblr of the
     tabularray LaTeX package, provides this structure.  For example:
     ‘:options remark{Note}={note},remark{Source}={source}’.

‘:spread’
     When ‘:spread’ is non-‘nil’, the LaTeX export backend spreads or
     shrinks the table by the ‘:width’ for tabu and longtabu
     environments.  ‘:spread’ has no effect if ‘:width’ is not set.

‘:booktabs’
‘:center’
‘:rmlines’
     All three commands are toggles.  ‘:booktabs’ brings in modern
     typesetting enhancements to regular tables.  The booktabs package
     has to be loaded through ‘org-latex-packages-alist’.  ‘:center’ is
     for centering the table.  ‘:rmlines’ removes all but the very first
     horizontal line made of ASCII characters from “table.el” tables
     only.

‘:math-prefix’
‘:math-suffix’
‘:math-arguments’
     The LaTeX export backend inserts ‘:math-prefix’ string value in a
     math environment before the table.  The LaTeX export backend
     inserts ‘:math-suffix’ string value in a math environment after the
     table.  The LaTeX export backend inserts ‘:math-arguments’ string
     value between the macro name and the table’s contents.
     ‘:math-arguments’ comes in use for matrix macros that require more
     than one argument, such as ‘qbordermatrix’.

   LaTeX table attributes help formatting tables for a wide range of
situations, such as matrix product or spanning multiple pages:

     #+ATTR_LATEX: :environment longtable :align l|lp{3cm}r|l
     | ... | ... |
     | ... | ... |

     #+ATTR_LATEX: :mode math :environment bmatrix :math-suffix \times
     | a | b |
     | c | d |
     #+ATTR_LATEX: :mode math :environment bmatrix
     | 1 | 2 |
     | 3 | 4 |

   Set the caption with the LaTeX command
‘\bicaption{HeadingA}{HeadingB}’:

     #+ATTR_LATEX: :caption \bicaption{HeadingA}{HeadingB}
     | ... | ... |
     | ... | ... |


File: org.info,  Node: Images in LaTeX export,  Next: Plain lists in LaTeX export,  Prev: Tables in LaTeX export,  Up: LaTeX Export

13.10.6 Images in LaTeX export
------------------------------

The LaTeX export backend processes image links in Org files that do not
have descriptions, such as these links ‘[[file:img.jpg]]’ or
‘[[./img.jpg]]’, as direct image insertions in the final PDF output.  In
the PDF, they are no longer links but actual images embedded on the
page.  The LaTeX export backend uses ‘\includegraphics’ macro to insert
the image.  But for TikZ (<https://sourceforge.net/projects/pgf/>)
images, the backend uses an ‘\input’ macro wrapped within a
‘tikzpicture’ environment.

   For specifying image ‘:width’, ‘:height’, ‘:scale’ and other
‘:options’, use this syntax:

     #+ATTR_LATEX: :width 5cm :options angle=90
     [[./img/sed-hr4049.pdf]]

   A ‘:scale’ attribute overrides both ‘:width’ and ‘:height’
attributes.

   For custom commands for captions, use the ‘:caption’ attribute.  It
overrides the default ‘#+CAPTION’ value:

     #+ATTR_LATEX: :caption \bicaption{HeadingA}{HeadingB}
     [[./img/sed-hr4049.pdf]]

   When captions follow the method as described in *note Captions::, the
LaTeX export backend wraps the picture in a floating ‘figure’
environment.  To float an image without specifying a caption, set the
‘:float’ attribute to one of the following:

‘t’
     For a default ‘figure’ environment.

‘multicolumn’
     To span the image across multiple columns of a page; the backend
     wraps the image in a ‘figure*’ environment.

‘wrap’
     For text to flow around the image on the right; the figure occupies
     the left half of the page.

‘sideways’
     For a new page with the image sideways, rotated ninety degrees, in
     a ‘sidewaysfigure’ environment; overrides ‘:placement’ setting.

‘nil’
     To avoid a ‘:float’ even if using a caption.

Any arbitrary value
     For example, a user-defined float type with the ‘float’ LaTeX
     package.

   Use the ‘placement’ attribute to modify a floating environment’s
placement.

     #+ATTR_LATEX: :float wrap :width 0.38\textwidth :placement {r}{0.4\textwidth}
     [[./img/hst.png]]

   The LaTeX export backend centers all images by default.  Setting
‘:center’ to ‘nil’ disables centering.  To disable centering globally,
set ‘org-latex-images-centered’ to ‘nil’.

   Set the ‘:comment-include’ attribute to non-‘nil’ value for the LaTeX
export backend to comment out the ‘\includegraphics’ macro.


File: org.info,  Node: Plain lists in LaTeX export,  Next: Source blocks in LaTeX export,  Prev: Images in LaTeX export,  Up: LaTeX Export

13.10.7 Plain lists in LaTeX export
-----------------------------------

The LaTeX export backend accepts the ‘environment’ and ‘options’
attributes for plain lists.  Both attributes work together for
customizing lists, as shown in the examples:

     #+LATEX_HEADER: \usepackage[inline]{enumitem}
     Some ways to say "Hello":
     #+ATTR_LATEX: :environment itemize*
     #+ATTR_LATEX: :options [label={}, itemjoin={,}, itemjoin*={, and}]
     - Hola
     - Bonjour
     - Guten Tag.

   Since LaTeX supports only four levels of nesting for lists, use an
external package, such as ‘enumitem’ in LaTeX, for levels deeper than
four:

     #+LATEX_HEADER: \usepackage{enumitem}
     #+LATEX_HEADER: \renewlist{itemize}{itemize}{9}
     #+LATEX_HEADER: \setlist[itemize]{label=$\circ$}
     - One
       - Two
         - Three
           - Four
             - Five


File: org.info,  Node: Source blocks in LaTeX export,  Next: Example blocks in LaTeX export,  Prev: Plain lists in LaTeX export,  Up: LaTeX Export

13.10.8 Source blocks in LaTeX export
-------------------------------------

LaTeX export backend provides multiple ways to render src blocks in
LaTeX, according to the value of ‘org-latex-src-block-backend’.  The
default value ‘verbatim’ renders the src code verbatim, without any
extra styling.  Alternative values allow more colorful styling, but
require additional LaTeX (‘listings’, ‘minted’), system (‘minted’), or
Emacs (‘engraved’) packages.  See the ‘org-latex-src-block-backend’
docstring for more details.

   The LaTeX export backend can make source code blocks into floating
objects through the attributes ‘:float’ and ‘:options’.  For ‘:float’:

‘t’
     Makes a source block float; by default floats any source block with
     a caption.

‘multicolumn’
     Spans the source block across multiple columns of a page.

‘nil’
     Avoids a ‘:float’ even if using a caption; useful for source code
     blocks that may not fit on a page.

     #+ATTR_LATEX: :float nil
     #+BEGIN_SRC emacs-lisp
       Lisp code that may not fit in a single page.
     #+END_SRC

   The LaTeX export backend passes string values in ‘:options’ to LaTeX
packages for customization of that specific source block.  In the
example below, the ‘:options’ are set for Engraved or Minted.  Minted is
a source code highlighting LaTeX package with many configurable
options(1).  Both Minted and Engraved are built on fvextra
(https://www.ctan.org/pkg/fvextra), and so support many of the same
options.

     #+ATTR_LATEX: :options mathescape
     #+BEGIN_SRC emacs-lisp
       (defun Fib (n) ; $n_i = n_{i-2} + n_{i-1}$
         (if (< n 2) n (+ (Fib (- n 1)) (Fib (- n 2)))))
     #+END_SRC

   To apply similar configuration options for all source blocks in a
file, use the ‘org-latex-listings-options’,
‘org-latex-engraved-options’, and ‘org-latex-minted-options’ variables.

   ---------- Footnotes ----------

   (1) Minted uses an external Python package for code highlighting,
which requires the flag ‘-shell-escape’ to be added to
‘org-latex-pdf-process’.


File: org.info,  Node: Example blocks in LaTeX export,  Next: Special blocks in LaTeX export,  Prev: Source blocks in LaTeX export,  Up: LaTeX Export

13.10.9 Example blocks in LaTeX export
--------------------------------------

The LaTeX export backend wraps the contents of example blocks in a
‘verbatim’ environment.  To change this behavior to use another
environment globally, specify an appropriate export filter (see *note
Advanced Export Configuration::).  To change this behavior to use
another environment for each block, use the ‘:environment’ parameter to
specify a custom environment.

     #+ATTR_LATEX: :environment myverbatim
     #+BEGIN_EXAMPLE
       This sentence is false.
     #+END_EXAMPLE


File: org.info,  Node: Special blocks in LaTeX export,  Next: Horizontal rules in LaTeX export,  Prev: Example blocks in LaTeX export,  Up: LaTeX Export

13.10.10 Special blocks in LaTeX export
---------------------------------------

For other special blocks in the Org file, the LaTeX export backend makes
a special environment of the same name.  The backend also takes
‘:options’, if any, and appends as-is to that environment’s opening
string.  For example:

     #+BEGIN_abstract
       We demonstrate how to solve the Syracuse problem.
     #+END_abstract

     #+ATTR_LATEX: :options [Proof of important theorem]
     #+BEGIN_proof
       ...
       Therefore, any even number greater than 2 is the sum of two primes.
     #+END_proof

exports to

     \begin{abstract}
       We demonstrate how to solve the Syracuse problem.
     \end{abstract}

     \begin{proof}[Proof of important theorem]
       ...
       Therefore, any even number greater than 2 is the sum of two primes.
     \end{proof}

   If you need to insert a specific caption command, use ‘:caption’
attribute.  It overrides standard ‘CAPTION’ value, if any.  For example:

     #+ATTR_LATEX: :caption \MyCaption{HeadingA}
     #+BEGIN_proof
       ...
     #+END_proof


File: org.info,  Node: Horizontal rules in LaTeX export,  Next: Verse blocks in LaTeX export,  Prev: Special blocks in LaTeX export,  Up: LaTeX Export

13.10.11 Horizontal rules in LaTeX export
-----------------------------------------

The LaTeX export backend converts horizontal rules by the specified
‘:width’ and ‘:thickness’ attributes.  For example:

     #+ATTR_LATEX: :width .6\textwidth :thickness 0.8pt
     -----


File: org.info,  Node: Verse blocks in LaTeX export,  Next: Quote blocks in LaTeX export,  Prev: Horizontal rules in LaTeX export,  Up: LaTeX Export

13.10.12 Verse blocks in LaTeX export
-------------------------------------

The LaTeX export backend accepts five attributes for verse blocks:
‘:lines’, ‘:center’, ‘:versewidth’, ‘:latexcode’ and ‘:literal’.  The
three first require the external LaTeX package ‘verse.sty’, which is an
extension of the standard LaTeX environment.

‘:lines’
     To add marginal verse numbering.  Its value is an integer, the
     sequence in which the verses should be numbered.
‘:center’
     With value ‘t’ all the verses on the page are optically centered (a
     typographic convention for poetry), taking as a reference the
     longest verse, which must be indicated by the attribute
     ‘:versewidth’.
‘:versewidth’
     Its value is a literal text string with the longest verse.
‘:latexcode’
     It accepts any arbitrary LaTeX code that can be included within a
     LaTeX ‘verse’ environment.
‘:literal’
     With value t, all blank lines are preserved and exported as
     ‘\vspace*{\baselineskip}’, including the blank lines before or
     after contents.  Note that without the ‘:literal’ attribute, one or
     more blank lines between stanzas are exported as a single blank
     line, and any blank lines before or after the content are removed,
     which is more consistent with the syntax of the LaTeX ‘verse’
     environment, and the one provided by the ‘verse’ package.  If the
     ‘verse’ package is loaded, the vertical spacing between all stanzas
     can be controlled by the global length ‘\stanzaskip’ (see
     <https://www.ctan.org/pkg/verse>).

   A complete example with Shakespeare’s first sonnet:

     #+ATTR_LATEX: :center t :latexcode \color{red} :lines 5
     #+ATTR_LATEX: :versewidth Feed’st thy light’s flame with self-substantial fuel,
     #+BEGIN_VERSE
     From fairest creatures we desire increase,
     That thereby beauty’s rose might never die,
     But as the riper should by time decease
     His tender heir might bear his memory
     But thou, contracted to thine own bright eyes,
     Feed’st thy light’s flame with self-substantial fuel,
     Making a famine where abundance lies,
     Thyself thy foe, to thy sweet self too cruel.
     Thou that art now the world’s fresh ornament,
     And only herald to the gaudy spring,
     Within thine own bud buriest thy content,
     And, tender churl, mak’st waste in niggardly.
     Pity the world, or else this glutton be,
     To eat the world’s due, by the grave and thee.
     #+END_VERSE


File: org.info,  Node: Quote blocks in LaTeX export,  Prev: Verse blocks in LaTeX export,  Up: LaTeX Export

13.10.13 Quote blocks in LaTeX export
-------------------------------------

The LaTeX export backend accepts two attributes for quote blocks:
‘:environment’, for an arbitrary quoting environment (the default value
is that of ‘org-latex-default-quote-environment’: ‘"quote"’) and
‘:options’.  For example, to choose the environment ‘quotation’,
included as an alternative to ‘quote’ in standard LaTeX classes:

     #+ATTR_LATEX: :environment quotation
     #+BEGIN_QUOTE
     some text...
     #+END_QUOTE

   To choose the ‘foreigndisplayquote’ environment, included in the
LaTeX package ‘csquotes’, with the ‘german’ option, use this syntax:

     #+LATEX_HEADER:\usepackage[autostyle=true]{csquotes}
     #+ATTR_LATEX: :environment foreigndisplayquote :options {german}
     #+BEGIN_QUOTE
     some text in German...
     #+END_QUOTE

which is exported to LaTeX as

     \begin{foreigndisplayquote}{german}
     some text in German...
     \end{foreigndisplayquote}


File: org.info,  Node: Markdown Export,  Next: OpenDocument Text Export,  Prev: LaTeX Export,  Up: Exporting

13.11 Markdown Export
=====================

The Markdown export backend, “md”, converts an Org file to Markdown
format, as defined at <https://daringfireball.net/projects/markdown/>.
This is the original Markdown specification, developed by John Gruber
and Aaron Swartz.

   Since “md” backend is built on top of the HTML backend (see *note
HTML Export::), it converts every Org construct not defined in Markdown
syntax, such as tables, to HTML.

   Do note that the original markdown syntax has differences with other
commonly used Markdown flavors.  See
<https://en.wikipedia.org/wiki/Markdown> for more details.

Markdown export commands
------------------------

‘C-c C-e m m’ (‘org-md-export-to-markdown’)
     Export to a text file with Markdown syntax.  For ‘myfile.org’, Org
     exports to ‘myfile.md’, overwritten without warning.

‘C-c C-e m M’ (‘org-md-export-as-markdown’)
     Export to a temporary buffer.  Does not create a file.

‘C-c C-e m o’
     Export as a text file with Markdown syntax, then open it.

Header and sectioning structure
-------------------------------

Based on ‘org-md-headline-style’, Markdown export can generate headlines
of both _atx_ and _setext_ types.  _atx_ limits headline levels to two
whereas _setext_ limits headline levels to six.  Beyond these limits,
the export backend converts headlines to lists.  To set a limit to a
level before the absolute limit (see *note Export Settings::).


File: org.info,  Node: OpenDocument Text Export,  Next: Org Export,  Prev: Markdown Export,  Up: Exporting

13.12 OpenDocument Text Export
==============================

The ODT export backend handles creating of OpenDocument Text (ODT)
format.  Documents created by this exporter use the ‘OpenDocument-v1.2
specification’(1) and are compatible with LibreOffice 3.4.

* Menu:

* Pre-requisites for ODT export:: Required packages.
* ODT export commands::          Invoking export.
* ODT specific export settings:: Configuration options.
* Extending ODT export::         Producing DOC, PDF files.
* Applying custom styles::       Styling the output.
* Links in ODT export::          Handling and formatting links.
* Tables in ODT export::         Org tables conversions.
* Images in ODT export::         Inserting images.
* Math formatting in ODT export:: Formatting LaTeX fragments.
* Labels and captions in ODT export:: Rendering objects.
* Literal examples in ODT export:: For source code and example blocks.
* Advanced topics in ODT export:: For power users.

   ---------- Footnotes ----------

   (1) See Open Document Format for Office Applications (OpenDocument)
Version 1.2
(https://docs.oasis-open.org/office/v1.2/OpenDocument-v1.2.html).


File: org.info,  Node: Pre-requisites for ODT export,  Next: ODT export commands,  Up: OpenDocument Text Export

13.12.1 Pre-requisites for ODT export
-------------------------------------

The ODT export backend relies on the zip program to create the final
compressed ODT output.  Check if ‘zip’ is locally available and
executable.  Without it, export cannot finish.


File: org.info,  Node: ODT export commands,  Next: ODT specific export settings,  Prev: Pre-requisites for ODT export,  Up: OpenDocument Text Export

13.12.2 ODT export commands
---------------------------

‘C-c C-e o o’ (‘org-odt-export-to-odt’)
     Export as OpenDocument Text file.

     If ‘org-odt-preferred-output-format’ is specified, the ODT export
     backend automatically converts the exported file to that format.

     For ‘myfile.org’, Org exports to ‘myfile.odt’, overwriting without
     warning.  The ODT export backend exports a region only if a region
     was active.

     If the selected region is a single tree, the ODT export backend
     makes the tree head the document title.  Incidentally, ‘C-c @’
     selects the current subtree.  If the tree head entry has, or
     inherits, an ‘EXPORT_FILE_NAME’ property, the ODT export backend
     uses that for file name.

‘C-c C-e o O’
     Export as an OpenDocument Text file and open the resulting file.

     If ‘org-export-odt-preferred-output-format’ is specified, open the
     converted file instead.  See *note Automatically exporting to other
     formats::.


File: org.info,  Node: ODT specific export settings,  Next: Extending ODT export,  Prev: ODT export commands,  Up: OpenDocument Text Export

13.12.3 ODT specific export settings
------------------------------------

The ODT export backend has several additional keywords for customizing
ODT output.  Setting these keywords works similar to the general options
(see *note Export Settings::).

‘DESCRIPTION’
     This is the document’s description, which the ODT export backend
     inserts as document metadata.  For long descriptions, use multiple
     lines, prefixed with ‘DESCRIPTION’.

‘KEYWORDS’
     The keywords for the document.  The ODT export backend inserts the
     description along with author name, keywords, and related file
     metadata as metadata in the output file.  Use multiple ‘KEYWORDS’
     if necessary.

‘ODT_STYLES_FILE’
     The ODT export backend uses the ‘org-odt-styles-file’ by default.
     See *note Applying custom styles:: for details.

‘SUBTITLE’
     The document subtitle.


File: org.info,  Node: Extending ODT export,  Next: Applying custom styles,  Prev: ODT specific export settings,  Up: OpenDocument Text Export

13.12.4 Extending ODT export
----------------------------

The ODT export backend can produce documents in other formats besides
ODT using a specialized ODT converter process.  Its common interface
works with popular converters to produce formats such as ‘doc’, or
convert a document from one format, say ‘csv’, to another format, say
‘xls’.

   Customize ‘org-odt-convert-process’ variable to point to ‘unoconv’,
which is the ODT’s preferred converter.  Working installations of
LibreOffice would already have ‘unoconv’ installed.  Alternatively,
other converters may be substituted here.  See *note Configuring a
document converter::.

Automatically exporting to other formats
........................................

If ODT format is just an intermediate step to get to other formats, such
as ‘doc’, ‘docx’, ‘rtf’, or ‘pdf’, etc., then extend the ODT export
backend to directly produce that format.  Specify the final format in
the ‘org-odt-preferred-output-format’ variable.  This is one way to
extend (see *note ODT export commands::).

Converting between document formats
...................................

The Org export backend is made to be inter-operable with a wide range of
text document format converters.  Newer generation converters, such as
LibreOffice and Pandoc, can handle hundreds of formats at once.  Org
provides a consistent interaction with whatever converter is installed.
Here are some generic commands:

‘M-x org-odt-convert’
     Convert an existing document from one format to another.  With a
     prefix argument, opens the newly produced file.


File: org.info,  Node: Applying custom styles,  Next: Links in ODT export,  Prev: Extending ODT export,  Up: OpenDocument Text Export

13.12.5 Applying custom styles
------------------------------

The ODT export backend comes with many OpenDocument styles (see *note
Working with OpenDocument style files::).  To expand or further
customize these built-in style sheets, either edit the style sheets
directly or generate them using an application such as LibreOffice.  The
example here shows creating a style using LibreOffice.

Applying custom styles: the easy way
....................................

  1. Create a sample ‘example.org’ file with settings as shown below,
     and export it to ODT format.

          #+OPTIONS: H:10 num:t

  2. Open the above ‘example.odt’ using LibreOffice.  Use the _Stylist_
     to locate the target styles, which typically have the “Org” prefix.
     Open one, modify, and save as either OpenDocument Text (ODT) or
     OpenDocument Template (OTT) file.

  3. Customize the variable ‘org-odt-styles-file’ and point it to the
     newly created file.  For additional configuration options, see
     *note Overriding factory styles: x-overriding-factory-styles.

     To apply an ODT style to a particular file, use the
     ‘ODT_STYLES_FILE’ keyword as shown in the example below:

          #+ODT_STYLES_FILE: "/path/to/example.ott"

     or

          #+ODT_STYLES_FILE: ("/path/to/file.ott" ("styles.xml" "image/hdr.png"))

Using third-party styles and templates
......................................

The ODT export backend relies on many templates and style names.  Using
third-party styles and templates can lead to mismatches.  Templates
derived from built-in ODT templates and styles seem to have fewer
problems.


File: org.info,  Node: Links in ODT export,  Next: Tables in ODT export,  Prev: Applying custom styles,  Up: OpenDocument Text Export

13.12.6 Links in ODT export
---------------------------

ODT exporter creates native cross-references for internal links.  It
creates Internet-style links for all other links.

   A link with no description and pointing to a regular, un-itemized,
outline heading is replaced with a cross-reference and section number of
the heading.

   A ‘\ref{label}’-style reference to an image, table etc., is replaced
with a cross-reference and sequence number of the labeled entity.  See
*note Labels and captions in ODT export::.


File: org.info,  Node: Tables in ODT export,  Next: Images in ODT export,  Prev: Links in ODT export,  Up: OpenDocument Text Export

13.12.7 Tables in ODT export
----------------------------

The ODT export backend handles native Org mode tables (see *note
Tables::) and simple ‘table.el’ tables.  Complex ‘table.el’ tables
having column or row spans are not supported.  Such tables are stripped
from the exported document.

   By default, the ODT export backend exports a table with top and
bottom frames and with ruled lines separating row and column groups (see
*note Column Groups::).  All tables are typeset to occupy the same
width.  The ODT export backend honors any table alignments and relative
widths for columns (see *note Column Width and Alignment::).

   Note that the ODT export backend interprets column widths as weighted
ratios, the default weight being 1.

   Specifying ‘:rel-width’ property on an ‘ATTR_ODT’ line controls the
width of the table.  For example:

     #+ATTR_ODT: :rel-width 50
     | Area/Month    |   Jan |   Feb |   Mar |   Sum |
     |---------------+-------+-------+-------+-------|
     | /             |     < |       |       |     < |
     | <l13>         |  <r5> |  <r5> |  <r5> |  <r6> |
     | North America |     1 |    21 |   926 |   948 |
     | Middle East   |     6 |    75 |   844 |   925 |
     | Asia Pacific  |     9 |    27 |   790 |   826 |
     |---------------+-------+-------+-------+-------|
     | Sum           |    16 |   123 |  2560 |  2699 |

   On export, the above table takes 50% of text width area.  The
exporter sizes the columns in the ratio: 13:5:5:5:6.  The first column
is left-aligned and rest of the columns, right-aligned.  Vertical rules
separate the header and the last column.  Horizontal rules separate the
header and the last row.

   For even more customization, create custom table styles and associate
them with a table using the ‘ATTR_ODT’ keyword.  See *note Customizing
tables in ODT export::.


File: org.info,  Node: Images in ODT export,  Next: Math formatting in ODT export,  Prev: Tables in ODT export,  Up: OpenDocument Text Export

13.12.8 Images in ODT export
----------------------------

Embedding images
................

The ODT export backend processes image links in Org files that do not
have descriptions, such as these links ‘[[file:img.jpg]]’ or
‘[[./img.jpg]]’, as direct image insertions in the final output.  Either
of these examples works:

     [[file:img.png]]

     [[./img.png]]

Embedding clickable images
..........................

For clickable images, provide a link whose description is another link
to an image file.  For example, to embed an image ‘org-mode-unicorn.png’
which when clicked jumps to <https://orgmode.org> website, do the
following

     [[https://orgmode.org][./org-mode-unicorn.png]]

Sizing and scaling of embedded images
.....................................

Control the size and scale of the embedded images with the ‘ATTR_ODT’
attribute.

   The ODT export backend starts with establishing the size of the image
in the final document.  The dimensions of this size are measured in
centimeters.  The backend then queries the image file for its dimensions
measured in pixels.  For this measurement, the backend relies on
ImageMagick’s identify program or Emacs ‘create-image’ and ‘image-size’
API.  ImageMagick is the preferred choice for large file sizes or
frequent batch operations.  The backend then converts the pixel
dimensions using ‘org-odt-pixels-per-inch’ into the familiar 72 dpi or
96 dpi.  The default value for this is in ‘display-pixels-per-inch’,
which can be tweaked for better results based on the capabilities of the
output device.  Here are some common image scaling operations:

Explicitly size the image
     To embed ‘img.png’ as a 10 cm x 10 cm image, do the following:

          #+ATTR_ODT: :width 10 :height 10
          [[./img.png]]

Scale the image
     To embed ‘img.png’ at half its size, do the following:

          #+ATTR_ODT: :scale 0.5
          [[./img.png]]

Scale the image to a specific width
     To embed ‘img.png’ with a width of 10 cm while retaining the
     original height:width ratio, do the following:

          #+ATTR_ODT: :width 10
          [[./img.png]]

Scale the image to a specific height
     To embed ‘img.png’ with a height of 10 cm while retaining the
     original height:width ratio, do the following:

          #+ATTR_ODT: :height 10
          [[./img.png]]

Anchoring of images
...................

The ODT export backend can anchor images to ‘as-char’, ‘paragraph’, or
‘page’.  Set the preferred anchor using the ‘:anchor’ property of the
‘ATTR_ODT’ line.

   To create an image that is anchored to a page:

     #+ATTR_ODT: :anchor page
     [[./img.png]]


File: org.info,  Node: Math formatting in ODT export,  Next: Labels and captions in ODT export,  Prev: Images in ODT export,  Up: OpenDocument Text Export

13.12.9 Math formatting in ODT export
-------------------------------------

The ODT exporter has special support for handling math.

* Menu:

* LaTeX math snippets::       Embedding in LaTeX format.
* MathML and OpenDocument formula files:: Embedding in native format.


File: org.info,  Node: LaTeX math snippets,  Next: MathML and OpenDocument formula files,  Up: Math formatting in ODT export

13.12.9.1 LaTeX math snippets
.............................

LaTeX math snippets (see *note LaTeX fragments::) can be embedded in the
ODT document in one of the following ways:

MathML
     Add this line to the Org file.  This option is activated on a
     per-file basis.

          #+OPTIONS: tex:t

     With this option, LaTeX fragments are first converted into MathML
     fragments using an external LaTeX-to-MathML converter program.  The
     resulting MathML fragments are then embedded as an OpenDocument
     Formula in the exported document.

     You can specify the LaTeX-to-MathML converter by customizing the
     variables ‘org-latex-to-mathml-convert-command’ and
     ‘org-latex-to-mathml-jar-file’.

     If you prefer to use MathToWeb(1) as your converter, you can
     configure the above variables as shown below.

          (setq org-latex-to-mathml-convert-command
                "java -jar %j -unicode -force -df %o %I"
                org-latex-to-mathml-jar-file
                "/path/to/mathtoweb.jar")

     or, to use LaTeX​ML(2) instead,

          (setq org-latex-to-mathml-convert-command
                "latexmlmath \"%i\" --presentationmathml=%o")

     To quickly verify the reliability of the LaTeX-to-MathML converter,
     use the following commands:

     ‘M-x org-export-as-odf’
          Convert a LaTeX math snippet to an OpenDocument formula
          (‘.odf’) file.

     ‘M-x org-export-as-odf-and-open’
          Convert a LaTeX math snippet to an OpenDocument formula
          (‘.odf’) file and open the formula file with the
          system-registered application.

PNG images
     Add this line to the Org file.  This option is activated on a
     per-file basis.

          #+OPTIONS: tex:dvipng

          #+OPTIONS: tex:dvisvgm

     or

          #+OPTIONS: tex:imagemagick

     Under this option, LaTeX fragments are processed into PNG or SVG
     images and the resulting images are embedded in the exported
     document.  This method requires dvipng program, dvisvgm or
     ImageMagick programs.

   ---------- Footnotes ----------

   (1) See MathToWeb
(http://www.mathtoweb.com/cgi-bin/mathtoweb_home.pl).

   (2) See <https://dlmf.nist.gov/LaTeXML/>.


File: org.info,  Node: MathML and OpenDocument formula files,  Prev: LaTeX math snippets,  Up: Math formatting in ODT export

13.12.9.2 MathML and OpenDocument formula files
...............................................

When embedding LaTeX math snippets in ODT documents is not reliable,
there is one more option to try.  Embed an equation by linking to its
MathML (‘.mml’) source or its OpenDocument formula (‘.odf’) file as
shown below:

     [[./equation.mml]]

or

     [[./equation.odf]]


File: org.info,  Node: Labels and captions in ODT export,  Next: Literal examples in ODT export,  Prev: Math formatting in ODT export,  Up: OpenDocument Text Export

13.12.10 Labels and captions in ODT export
------------------------------------------

ODT format handles labeling and captioning of objects based on their
types.  Inline images, tables, LaTeX fragments, and Math formulas are
numbered and captioned separately.  Each object also gets a unique
sequence number based on its order of first appearance in the Org file.
Each category has its own sequence.  A caption is just a label applied
to these objects.

     #+CAPTION: Bell curve
     #+NAME:   fig:SED-HR4049
     [[./img/a.png]]

   When rendered, it may show as follows in the exported document:

     Figure 2: Bell curve

   To modify the category component of the caption, customize the option
‘org-odt-category-map-alist’.  For example, to tag embedded images with
the string “Illustration” instead of the default string “Figure”, use
the following setting:

     (setq org-odt-category-map-alist
           '(("__Figure__" "Illustration" "value" "Figure" org-odt--enumerable-image-p)))

   With the above modification, the previous example changes to:

     Illustration 2: Bell curve


File: org.info,  Node: Literal examples in ODT export,  Next: Advanced topics in ODT export,  Prev: Labels and captions in ODT export,  Up: OpenDocument Text Export

13.12.11 Literal examples in ODT export
---------------------------------------

The ODT export backend supports literal examples (see *note Literal
Examples::) with full fontification.  Internally, the ODT export backend
relies on ‘htmlfontify.el’ to generate the style definitions needed for
fancy listings.  The auto-generated styles get ‘OrgSrc’ prefix and
inherit colors from the faces used by Emacs Font Lock library for that
source language.

   For custom fontification styles, customize the
‘org-odt-create-custom-styles-for-srcblocks’ option.

   To turn off fontification of literal examples, customize the
‘org-odt-fontify-srcblocks’ option.


File: org.info,  Node: Advanced topics in ODT export,  Prev: Literal examples in ODT export,  Up: OpenDocument Text Export

13.12.12 Advanced topics in ODT export
--------------------------------------

The ODT export backend has extensive features useful for power users and
frequent uses of ODT formats.

Configuring a document converter
................................

The ODT export backend works with popular converters with little or no
extra configuration.  See *note Extending ODT export::.  The following
is for unsupported converters or tweaking existing defaults.

Register the converter
     Add the name of the converter to the ‘org-odt-convert-processes’
     variable.  Note that it also requires how the converter is invoked
     on the command line.  See the variable’s docstring for details.

Configure its capabilities
     Specify which formats the converter can handle by customizing the
     variable ‘org-odt-convert-capabilities’.  Use the entry for the
     default values in this variable for configuring the new converter.
     Also see its docstring for details.

Choose the converter
     Select the newly added converter as the preferred one by
     customizing the option ‘org-odt-convert-process’.

Working with OpenDocument style files
.....................................

This section explores the internals of the ODT exporter; the means by
which it produces styled documents; the use of automatic and custom
OpenDocument styles.

   The ODT exporter relies on two files for generating its output.
These files are bundled with the distribution under the directory
pointed to by the variable ‘org-odt-styles-dir’.  The two files are:

‘OrgOdtStyles.xml’ 
     This file contributes to the ‘styles.xml’ file of the final ODT
     document.  This file gets modified for the following purposes:

       1. To control outline numbering based on user settings;

       2. To add styles generated by ‘htmlfontify.el’ for fontification
          of code blocks.

‘OrgOdtContentTemplate.xml’ 
     This file contributes to the ‘content.xml’ file of the final ODT
     document.  The contents of the Org outline are inserted between the
     ‘<office:text>’ ... ‘</office:text>’ elements of this file.

     Apart from serving as a template file for the final ‘content.xml’,
     the file serves the following purposes:

       1. It contains automatic styles for formatting of tables which
          are referenced by the exporter;

       2. It contains ‘<text:sequence-decl>’ ... ‘</text:sequence-decl>’
          elements that control numbering of tables, images, equations,
          and similar entities.

   The following two variables control the location from where the ODT
exporter picks up the custom styles and content template files.
Customize these variables to override the factory styles used by the
exporter.

‘org-odt-styles-file’
     The ODT export backend uses the file pointed to by this variable,
     such as ‘styles.xml’, for the final output.  It can take one of the
     following values:

     ‘FILE.xml’
          Use this file instead of the default ‘styles.xml’

     ‘FILE.odt’ or ‘FILE.ott’
          Use the ‘styles.xml’ contained in the specified OpenDocument
          Text or Template file

     ‘FILE.odt’ or ‘FILE.ott’ and a subset of included files
          Use the ‘styles.xml’ contained in the specified OpenDocument
          Text or Template file.  Additionally extract the specified
          member files and embed those within the final ODT document.

          Use this option if the ‘styles.xml’ file references additional
          files like header and footer images.

     ‘nil’
          Use the default ‘styles.xml’.

‘org-odt-content-template-file’
     Use this variable to specify the blank ‘content.xml’ used in the
     final output.

Creating one-off styles
.......................

The ODT export backend can read embedded raw OpenDocument XML from the
Org file.  Such direct formatting is useful for one-off instances.

Embedding ODT tags as part of regular text
     Enclose OpenDocument syntax in ‘@@odt:...@@’ for inline markup.
     For example, to highlight a region of text do the following:

          @@odt:<text:span text:style-name="Highlight">This is highlighted
          text</text:span>@@.  But this is regular text.

     *Hint:* To see the above example in action, edit the ‘styles.xml’
     (see *note Factory styles: x-orgodtstyles-xml.) and add a custom
     _Highlight_ style as shown below:

          <style:style style:name="Highlight" style:family="text">
            <style:text-properties fo:background-color="#ff0000"/>
          </style:style>

Embedding a one-line OpenDocument XML
     The ODT export backend can read one-liner options with ‘#+ODT:’ in
     the Org file.  For example, to force a page break:

          #+ODT: <text:p text:style-name="PageBreak"/>

     *Hint:* To see the above example in action, edit your ‘styles.xml’
     (see *note Factory styles: x-orgodtstyles-xml.) and add a custom
     ‘PageBreak’ style as shown below.

          <style:style style:name="PageBreak" style:family="paragraph"
                       style:parent-style-name="Text_20_body">
            <style:paragraph-properties fo:break-before="page"/>
          </style:style>

Embedding a block of OpenDocument XML
     The ODT export backend can also read ODT export blocks for
     OpenDocument XML.  Such blocks use the ‘#+BEGIN_EXPORT odt’ ...
     ‘#+END_EXPORT’ constructs.

     For example, to create a one-off paragraph that uses bold text, do
     the following:

          #+BEGIN_EXPORT odt
            <text:p text:style-name="Text_20_body_20_bold">
            This paragraph is specially formatted and uses bold text.
            </text:p>
          #+END_EXPORT

Customizing tables in ODT export
................................

Override the default table format by specifying a custom table style
with the ‘#+ATTR_ODT’ line.  For a discussion on default formatting of
tables, see *note Tables in ODT export::.

   This feature closely mimics the way table templates are defined in
the OpenDocument-v1.2 specification(1).

   For quick preview of this feature, install the settings below and
export the table that follows:

     (setq org-export-odt-table-styles
           (append org-export-odt-table-styles
                   '(("TableWithHeaderRowAndColumn" "Custom"
                      ((use-first-row-styles . t)
                       (use-first-column-styles . t)))
                     ("TableWithFirstRowandLastRow" "Custom"
                      ((use-first-row-styles . t)
                       (use-last-row-styles . t))))))

     #+ATTR_ODT: :style TableWithHeaderRowAndColumn
     | Name  | Phone | Age |
     | Peter |  1234 |  17 |
     | Anna  |  4321 |  25 |

   The example above used ‘Custom’ template and installed two table
styles ‘TableWithHeaderRowAndColumn’ and ‘TableWithFirstRowandLastRow’.
*Important:* The OpenDocument styles needed for producing the above
template were pre-defined.  They are available in the section marked
‘Custom Table Template’ in ‘OrgOdtContentTemplate.xml’ (see *note
Factory styles: x-orgodtcontenttemplate-xml.).  For adding new
templates, define new styles there.

   To use this feature proceed as follows:

  1. Create a table template(2).

     A table template is set of ‘table-cell’ and ‘paragraph’ styles for
     each of the following table cell categories:

        • Body
        • First column
        • Last column
        • First row
        • Last row
        • Even row
        • Odd row
        • Even column
        • Odd Column

     The names for the above styles must be chosen based on the name of
     the table template using a well-defined convention.

     The naming convention is better illustrated with an example.  For a
     table template with the name ‘Custom’, the needed style names are
     listed in the following table.

     Cell type      Cell style                     Paragraph style
     ----------------------------------------------------------------------------------
     Body           ‘CustomTableCell’              ‘CustomTableParagraph’
     First column   ‘CustomFirstColumnTableCell’   ‘CustomFirstColumnTableParagraph’
     Last column    ‘CustomLastColumnTableCell’    ‘CustomLastColumnTableParagraph’
     First row      ‘CustomFirstRowTableCell’      ‘CustomFirstRowTableParagraph’
     Last row       ‘CustomLastRowTableCell’       ‘CustomLastRowTableParagraph’
     Even row       ‘CustomEvenRowTableCell’       ‘CustomEvenRowTableParagraph’
     Odd row        ‘CustomOddRowTableCell’        ‘CustomOddRowTableParagraph’
     Even column    ‘CustomEvenColumnTableCell’    ‘CustomEvenColumnTableParagraph’
     Odd column     ‘CustomOddColumnTableCell’     ‘CustomOddColumnTableParagraph’

     To create a table template with the name ‘Custom’, define the above
     styles in the ‘<office:automatic-styles>’ ...
     ‘</office:automatic-styles>’ element of the content template file
     (see *note Factory styles: x-orgodtcontenttemplate-xml.).

  2. Define a table style(3).

     To define a table style, create an entry for the style in the
     variable ‘org-odt-table-styles’ and specify the following:

        • the name of the table template created in step (1),
        • the set of cell styles in that template that are to be
          activated.

     For example, the entry below defines two different table styles
     ‘TableWithHeaderRowAndColumn’ and ‘TableWithFirstRowandLastRow’
     based on the same template ‘Custom’.  The styles achieve their
     intended effect by selectively activating the individual cell
     styles in that template.

          (setq org-export-odt-table-styles
                (append org-export-odt-table-styles
                        '(("TableWithHeaderRowAndColumn" "Custom"
                           ((use-first-row-styles . t)
                            (use-first-column-styles . t)))
                          ("TableWithFirstRowandLastRow" "Custom"
                           ((use-first-row-styles . t)
                            (use-last-row-styles . t))))))

  3. Associate a table with the table style.

     To do this, specify the table style created in step (2) as part of
     the ‘ATTR_ODT’ line as shown below.

          #+ATTR_ODT: :style TableWithHeaderRowAndColumn
          | Name  | Phone | Age |
          | Peter |  1234 |  17 |
          | Anna  |  4321 |  25 |

Validating OpenDocument XML
...........................

Sometimes ODT format files may not open due to ‘.odt’ file corruption.
To verify if such a file is corrupt, validate it against the
OpenDocument Relax NG Compact (RNC) syntax schema.  But first the ‘.odt’
files have to be decompressed using ‘zip’.  Note that ‘.odt’ files are
ZIP archives: *note (emacs)File Archives::.  The contents of ODT files
are in XML.  For general help with validation—and schema-sensitive
editing—of XML files: *note (nxml-mode)Introduction::.

   Customize ‘org-odt-schema-dir’ to point to a directory with
OpenDocument RNC files and the needed schema-locating rules.  The ODT
export backend takes care of updating the ‘rng-schema-locating-files’.

   ---------- Footnotes ----------

   (1) OpenDocument-v1.2 Specification
(https://docs.oasis-open.org/office/v1.2/OpenDocument-v1.2.html)

   (2) See the ‘<table:table-template>’ element of the OpenDocument-v1.2
specification.

   (3) See the attributes ‘table:template-name’,
‘table:use-first-row-styles’, ‘table:use-last-row-styles’,
‘table:use-first-column-styles’, ‘table:use-last-column-styles’,
‘table:use-banding-rows-styles’, and ‘table:use-banding-column-styles’
of the ‘<table:table>’ element in the OpenDocument-v1.2 specification.


File: org.info,  Node: Org Export,  Next: Texinfo Export,  Prev: OpenDocument Text Export,  Up: Exporting

13.13 Org Export
================

_org_ export backend creates a normalized version of the Org document in
current buffer.  The exporter evaluates Babel code (see *note Evaluating
Code Blocks::) and removes content specific to other backends.

Org export commands
-------------------

‘C-c C-e O o’ (‘org-org-export-to-org’)
     Export as an Org file with a ‘.org’ extension.  For ‘myfile.org’,
     Org exports to ‘myfile.org.org’, overwriting without warning.

‘C-c C-e O v’ (~~)
     Export to an Org file, then open it.


File: org.info,  Node: Texinfo Export,  Next: iCalendar Export,  Prev: Org Export,  Up: Exporting

13.14 Texinfo Export
====================

* Menu:

* Texinfo export commands::      Invoking commands.
* Texinfo specific export settings:: Setting the environment.
* Texinfo file header::          Generating the header.
* Texinfo title and copyright page:: Creating preamble pages.
* Info directory file::          Installing a manual in Info file hierarchy.
* Headings and sectioning structure:: Building document structure.
* Indices::                      Creating indices.
* Quoting Texinfo code::         Incorporating literal Texinfo code.
* Plain lists in Texinfo export:: List attributes.
* Tables in Texinfo export::     Table attributes.
* Images in Texinfo export::     Image attributes.
* Quotations in Texinfo export:: Quote block attributes.
* Key bindings in Texinfo export:: @kbd Texinfo command.
* Special blocks in Texinfo export:: Special block attributes.
* A Texinfo example::            Processing Org to Texinfo.


File: org.info,  Node: Texinfo export commands,  Next: Texinfo specific export settings,  Up: Texinfo Export

13.14.1 Texinfo export commands
-------------------------------

‘C-c C-e i t’ (‘org-texinfo-export-to-texinfo’)
     Export as a Texinfo file with ‘.texi’ extension.  For ‘myfile.org’,
     Org exports to ‘myfile.texi’, overwriting without warning.

‘C-c C-e i i’ (‘org-texinfo-export-to-info’)
     Export to Texinfo format first and then process it to make an Info
     file.  To generate other formats, such as DocBook, customize the
     ‘org-texinfo-info-process’ variable.


File: org.info,  Node: Texinfo specific export settings,  Next: Texinfo file header,  Prev: Texinfo export commands,  Up: Texinfo Export

13.14.2 Texinfo specific export settings
----------------------------------------

The Texinfo export backend has several additional keywords for
customizing Texinfo output.  Setting these keywords works similar to the
general options (see *note Export Settings::).

‘SUBTITLE’
     The document subtitle.

‘SUBAUTHOR’
     Additional authors for the document.

‘TEXINFO_FILENAME’
     The Texinfo filename.

‘TEXINFO_CLASS’
     The default document class (‘org-texinfo-default-class’), which
     must be a member of ‘org-texinfo-classes’.

‘TEXINFO_HEADER’
     Arbitrary lines inserted at the end of the header.

‘TEXINFO_POST_HEADER’
     Arbitrary lines inserted after the end of the header.

‘TEXINFO_DIR_CATEGORY’
     The directory category of the document.

‘TEXINFO_DIR_TITLE’
     The directory title of the document.

‘TEXINFO_DIR_DESC’
     The directory description of the document.

‘TEXINFO_PRINTED_TITLE’
     The printed title of the document.


File: org.info,  Node: Texinfo file header,  Next: Texinfo title and copyright page,  Prev: Texinfo specific export settings,  Up: Texinfo Export

13.14.3 Texinfo file header
---------------------------

After creating the header for a Texinfo file, the Texinfo backend
automatically generates a name and destination path for the Info file.
To override this default with a more sensible path and name, specify the
‘TEXINFO_FILENAME’ keyword.

   Along with the output’s file name, the Texinfo header also contains
language details (see *note Export Settings::) and encoding system as
set in the ‘org-texinfo-coding-system’ variable.  Insert
‘TEXINFO_HEADER’ keywords for each additional command in the header, for
example:

     #+TEXINFO_HEADER: @synindex

   Instead of repeatedly installing the same set of commands, define a
class in ‘org-texinfo-classes’ once, and then activate it in the
document by setting the ‘TEXINFO_CLASS’ keyword to that class.


File: org.info,  Node: Texinfo title and copyright page,  Next: Info directory file,  Prev: Texinfo file header,  Up: Texinfo Export

13.14.4 Texinfo title and copyright page
----------------------------------------

The default template for hard copy output has a title page with ‘TITLE’
and ‘AUTHOR’ keywords (see *note Export Settings::).  To replace the
regular title with something different for the printed version, use the
‘TEXINFO_PRINTED_TITLE’ and ‘SUBTITLE’ keywords.  Both expect raw
Texinfo code for setting their values.

   If one ‘AUTHOR’ line is not sufficient, add multiple ‘SUBAUTHOR’
keywords.  They have to be set in raw Texinfo code.

     #+AUTHOR: Jane Smith
     #+SUBAUTHOR: John Doe
     #+TEXINFO_PRINTED_TITLE: This Long Title@@inlinefmt{tex,@*} Is Broken in @TeX{}

   Copying material is defined in a dedicated headline with a non-‘nil’
‘COPYING’ property.  The backend inserts the contents within a
‘@copying’ command at the beginning of the document.  The heading itself
does not appear in the structure of the document.

   Copyright information is printed on the back of the title page.

     * Legalese
       :PROPERTIES:
       :COPYING: t
       :END:

       This is a short example of a complete Texinfo file, version 1.0.

       Copyright \copy 2016 Free Software Foundation, Inc.


File: org.info,  Node: Info directory file,  Next: Headings and sectioning structure,  Prev: Texinfo title and copyright page,  Up: Texinfo Export

13.14.5 Info directory file
---------------------------

The end result of the Texinfo export process is the creation of an Info
file.  This Info file’s metadata has variables for category, title, and
description: ‘TEXINFO_DIR_CATEGORY’, ‘TEXINFO_DIR_TITLE’, and
‘TEXINFO_DIR_DESC’ keywords that establish where in the Info hierarchy
the file fits.

   Here is an example that writes to the Info directory file:

     #+TEXINFO_DIR_CATEGORY: Emacs
     #+TEXINFO_DIR_TITLE: Org Mode: (org)
     #+TEXINFO_DIR_DESC: Outline-based notes management and organizer


File: org.info,  Node: Headings and sectioning structure,  Next: Indices,  Prev: Info directory file,  Up: Texinfo Export

13.14.6 Headings and sectioning structure
-----------------------------------------

The Texinfo export backend uses a pre-defined scheme to convert Org
headlines to equivalent Texinfo structuring commands.  A scheme like
this maps top-level headlines to numbered chapters tagged as ‘@chapter’
and lower-level headlines to unnumbered chapters tagged as
‘@unnumbered’.  To override such mappings to introduce ‘@part’ or other
Texinfo structuring commands, define a new class in
‘org-texinfo-classes’.  Activate the new class with the ‘TEXINFO_CLASS’
keyword.  When no new class is defined and activated, the Texinfo export
backend defaults to the ‘org-texinfo-default-class’.

   If an Org headline’s level has no associated Texinfo structuring
command, or is below a certain threshold (see *note Export Settings::),
then the Texinfo export backend makes it into a list item.

   The Texinfo export backend makes any headline with a non-‘nil’
‘APPENDIX’ property into an appendix.  This happens independent of the
Org headline level or the ‘TEXINFO_CLASS’ keyword.

   The Texinfo export backend creates a menu entry after the Org
headline for each regular sectioning structure.  To override this with a
shorter menu entry, use the ‘ALT_TITLE’ property (see *note Table of
Contents::).  Texinfo menu entries also have an option for a longer
‘DESCRIPTION’ property.  Here’s an example that uses both to override
the default menu entry:

     * Controlling Screen Display
       :PROPERTIES:
       :ALT_TITLE: Display
       :DESCRIPTION: Controlling Screen Display
       :END:

   The text before the first headline belongs to the _Top_ node, i.e.,
the node in which a reader enters an Info manual.  As such, it is
expected not to appear in printed output generated from the ‘.texi’
file.  See *note (texinfo)The Top Node::, for more information.


File: org.info,  Node: Indices,  Next: Quoting Texinfo code,  Prev: Headings and sectioning structure,  Up: Texinfo Export

13.14.7 Indices
---------------

The Texinfo export backend recognizes these indexing keywords if used in
the Org file: ‘CINDEX’, ‘FINDEX’, ‘KINDEX’, ‘PINDEX’, ‘TINDEX’ and
‘VINDEX’.  Write their value as verbatim Texinfo code; in particular,
‘{’, ‘}’ and ‘@’ characters need to be escaped with ‘@’ if they do not
belong to a Texinfo command.

     #+CINDEX: Defining indexing entries

   For the backend to generate an index entry for a headline, set the
‘INDEX’ property to ‘cp’ or ‘vr’.  These abbreviations come from Texinfo
that stand for concept index and variable index.  The Texinfo manual has
abbreviations for all other kinds of indexes.  The backend exports the
headline as an unnumbered chapter or section command, and then inserts
the index after its contents.

     * Concept Index
       :PROPERTIES:
       :INDEX: cp
       :END:


File: org.info,  Node: Quoting Texinfo code,  Next: Plain lists in Texinfo export,  Prev: Indices,  Up: Texinfo Export

13.14.8 Quoting Texinfo code
----------------------------

Use any of the following three methods to insert or escape raw Texinfo
code:

     Richard @@texinfo:@sc{@@Stallman@@texinfo:}@@ commence' GNU.

     #+TEXINFO: @need800
     This paragraph is preceded by...

     #+BEGIN_EXPORT texinfo
       @auindex Johnson, Mark
       @auindex Lakoff, George
     #+END_EXPORT


File: org.info,  Node: Plain lists in Texinfo export,  Next: Tables in Texinfo export,  Prev: Quoting Texinfo code,  Up: Texinfo Export

13.14.9 Plain lists in Texinfo export
-------------------------------------

The Texinfo export backend converts unordered and ordered lists in the
Org file using the default command ‘@itemize’.

   Ordered lists are numbered when exported to Texinfo format.  Such
numbering obeys any counter (see *note Plain Lists::) in the first item
of the list.  The ‘:enum’ attribute also let you start the list at a
specific number, or switch to a lettered list, as illustrated here:

     #+ATTR_TEXINFO: :enum A
     1. Alpha
     2. Bravo
     3. Charlie

   The Texinfo export backend by default converts description lists in
the Org file using the default command ‘@table’, which results in a
table with two columns.  To change this behavior, set ‘:table-type’
attribute to either ‘ftable’ or ‘vtable’ value.  For more information,
see *note (texinfo)Two-column Tables::.

   The Texinfo export backend by default also applies a text highlight
based on the defaults stored in ‘org-texinfo-table-default-markup’.  To
override the default highlight command, specify another one with the
‘:indic’ attribute.

   Org syntax is limited to one entry per list item.  Nevertheless, the
Texinfo export backend can split that entry according to any text
provided through the ‘:sep’ attribute.  Each part then becomes a new
entry in the first column of the table.

   The following example illustrates all the attributes above:

     #+ATTR_TEXINFO: :table-type vtable :sep , :indic asis
     - foo, bar :: This is the common text for variables foo and bar.

becomes

     @vtable @asis
     @item foo
     @itemx bar
     This is the common text for variables foo and bar.
     @end table

   The ‘:compact’ attribute is an alternative to the ‘:sep’ attribute,
which allows writing each entry on its own line.  If this attribute is
non-‘nil’ and an item in a description list has no body but is followed
by another item, then the second item is transcoded to ‘@itemx’.  This
example is transcoded to the same output as above.

     #+ATTR_TEXINFO: :table-type vtable :indic asis :compact t
     - foo ::
     - bar ::
       This is the common text for variables foo and bar.

   Support for this compact syntax can also be enabled for all lists in
a file using the ‘compact-itemx’ export option, or globally using the
variable ‘org-texinfo-compact-itemx’.

   The Texinfo export backend also supports two approaches to writing
Texinfo definition commands (see *note (texinfo)Definition Commands::).
One of them uses description lists and is described below, the other
relies on special blocks (see *note Special blocks in Texinfo export::).

   Items in a description list in an Org file that begin with
‘Function:’ or certain other prefixes are converted using Texinfo
definition commands.  This works even if other items in the same list do
not have such a prefix; if necessary a single description list is
converted using multiple tables (such as ‘@vtable’) and definition
commands (such as ‘@defun’).

     - Function: org-texinfo-drawer drawer contents info ::
       Transcode a DRAWER element from Org to Texinfo.

becomes

     @defun org-texinfo-drawer drawer contents info ::
       Transcode a DRAWER element from Org to Texinfo.
     @end defun

   The recognized prefixes are ‘Command:’, ‘Function:’, ‘Macro:’,
‘Special Form:’, ‘Variable:’ and ‘User Option:’.  These are the same
prefixes that appear in the Info file for the respective definition
commands.  For example a ‘Function:’ item in the Org file is converted
to a ‘@defun’ command in the Texinfo file, which in turn is converted to
a definition prefixed with ‘-- Function:’ in the Info file.

   As a special case the prefix ‘Key:’ is also recognized.  No Texinfo
definition command exists for key bindings and the output in Info files
also lacks the ‘Key:’ prefix.  Even so this special case is supported
because it provides a convenient shorthand, as illustrated here:

     - Key: C-c C-c (do-something) ::
       This command does something.

     - User Option: do-something-somehow ::
       This option controls how exactly ~do-something~ does its thing.

becomes

     @table @asis
     @item @kbd{C-c C-c} (@code{do-something})
     @kindex C-c C-c
     @findex do-something
     This command does something.
     @end table

     @defopt do-something-somehow
     This option controls how exactly @code{do-something} does its thing.
     @end defopt

Command in parenthesis, as done above, is optional.


File: org.info,  Node: Tables in Texinfo export,  Next: Images in Texinfo export,  Prev: Plain lists in Texinfo export,  Up: Texinfo Export

13.14.10 Tables in Texinfo export
---------------------------------

When exporting tables, the Texinfo export backend uses the widest cell
width in each column.  To override this and instead specify as fractions
of line length, use the ‘:columns’ attribute.  See example below.

     #+ATTR_TEXINFO: :columns .5 .5
     | a cell | another cell |


File: org.info,  Node: Images in Texinfo export,  Next: Quotations in Texinfo export,  Prev: Tables in Texinfo export,  Up: Texinfo Export

13.14.11 Images in Texinfo export
---------------------------------

Insert a file link to the image in the Org file, and the Texinfo export
backend inserts the image.  These links must have the usual supported
image extensions and no descriptions.  To scale the image, use ‘:width’
and ‘:height’ attributes.  For alternate text, use ‘:alt’ and specify
the text using Texinfo code, as shown in the example:

     #+ATTR_TEXINFO: :width 1in :alt Alternate @i{text}
     [[ridt.pdf]]


File: org.info,  Node: Quotations in Texinfo export,  Next: Key bindings in Texinfo export,  Prev: Images in Texinfo export,  Up: Texinfo Export

13.14.12 Quotations in Texinfo export
-------------------------------------

You can write the text of a quotation within a quote block (see *note
Paragraphs::).  You may also emphasize some text at the beginning of the
quotation with the ‘:tag’ attribute.

     #+ATTR_TEXINFO: :tag Warning
     #+BEGIN_QUOTE
     Striking your thumb with a hammer may cause severe pain and discomfort.
     #+END_QUOTE

   To specify the author of the quotation, use the ‘:author’ attribute.

     #+ATTR_TEXINFO: :author King Arthur
     #+BEGIN_QUOTE
     The Lady of the Lake, her arm clad in the purest shimmering samite,
     held aloft Excalibur from the bosom of the water, signifying by divine
     providence that I, Arthur, was to carry Excalibur.  That is why I am
     your king.
     #+END_QUOTE


File: org.info,  Node: Key bindings in Texinfo export,  Next: Special blocks in Texinfo export,  Prev: Quotations in Texinfo export,  Up: Texinfo Export

13.14.13 Key bindings in Texinfo export
---------------------------------------

Org does not provide any markup for key bindings that corresponds to
Texinfo’s ‘@kbd’ and ‘@key’ commands.  One way to deal with this is to
fall back to code syntax.  ‘~C-x SPC~’, for example, is transcoded to
‘@code{C-x SPC}’.

   A better approach is to define and use an Org macro named ‘kbd’.  To
make that easier the function ‘org-texinfo-kbd-macro’ is provided, which
is intended to be used like this:

     #+macro: kbd (eval (org-texinfo-kbd-macro $1))

     Type {{{kbd(C-c SPC)}}}.

which becomes

     Type @kbd{C-c @key{SPC}}.


File: org.info,  Node: Special blocks in Texinfo export,  Next: A Texinfo example,  Prev: Key bindings in Texinfo export,  Up: Texinfo Export

13.14.14 Special blocks in Texinfo export
-----------------------------------------

The Texinfo export backend supports two approaches to writing Texinfo
definition commands.  One of them is described here, the other in *note
Plain lists in Texinfo export::.

   The Texinfo export backend converts special blocks to commands with
the same name.  It also adds any ‘:options’ attributes to the end of the
command, as shown in this example:

     #+ATTR_TEXINFO: :options org-org-export-to-org ...
     #+BEGIN_defun
       A somewhat obsessive function name.
     #+END_defun

becomes

     @defun org-org-export-to-org ...
       A somewhat obsessive function name.
     @end defun


File: org.info,  Node: A Texinfo example,  Prev: Special blocks in Texinfo export,  Up: Texinfo Export

13.14.15 A Texinfo example
--------------------------

Here is a more detailed example Org file.  See *note (texinfo)GNU Sample
Texts:: for an equivalent example using Texinfo code.

     #+TITLE: GNU Sample {{{version}}}
     #+SUBTITLE: for version {{{version}}}, {{{updated}}}
     #+AUTHOR: A.U. Thor
     #+EMAIL: bug-sample@gnu.org

     #+OPTIONS: ':t toc:t author:t email:t
     #+LANGUAGE: en

     #+MACRO: version 2.0
     #+MACRO: updated last updated 4 March 2014

     #+TEXINFO_FILENAME: sample.info
     #+TEXINFO_HEADER: @syncodeindex pg cp

     #+TEXINFO_DIR_CATEGORY: Texinfo documentation system
     #+TEXINFO_DIR_TITLE: sample: (sample)
     #+TEXINFO_DIR_DESC: Invoking sample

     #+TEXINFO_PRINTED_TITLE: GNU Sample

     This manual is for GNU Sample (version {{{version}}},
     {{{updated}}}).

     * Copying
       :PROPERTIES:
       :COPYING:  t
       :END:

       This manual is for GNU Sample (version {{{version}}},
       {{{updated}}}), which is an example in the Texinfo documentation.

       Copyright \copy 2016 Free Software Foundation, Inc.

       #+BEGIN_QUOTE
       Permission is granted to copy, distribute and/or modify this
       document under the terms of the GNU Free Documentation License,
       Version 1.3 or any later version published by the Free Software
       Foundation; with no Invariant Sections, with no Front-Cover Texts,
       and with no Back-Cover Texts.  A copy of the license is included in
       the section entitled "GNU Free Documentation License".
       #+END_QUOTE

     * Invoking sample

       #+PINDEX: sample
       #+CINDEX: invoking @command{sample}

       This is a sample manual.  There is no sample program to invoke, but
       if there were, you could see its basic usage and command line
       options here.

     * GNU Free Documentation License
       :PROPERTIES:
       :APPENDIX: t
       :END:

       #+INCLUDE: fdl.org

     * Index
       :PROPERTIES:
       :INDEX:    cp
       :END:


File: org.info,  Node: iCalendar Export,  Next: Other Built-in Backends,  Prev: Texinfo Export,  Up: Exporting

13.15 iCalendar Export
======================

A large part of Org mode’s interoperability success is its ability to
easily export to or import from external applications.  The iCalendar
export backend takes calendar data from Org files and exports to the
standard iCalendar format.

   By default, iCalendar export only includes headings that contain
active timestamps or diary sexps(1).

   The iCalendar export backend can also incorporate TODO entries based
on the configuration of the ‘org-icalendar-include-todo’ variable.  The
backend exports plain timestamps as ‘VEVENT’, TODO items as ‘VTODO’, and
also create events from deadlines that are in non-TODO items.

   The backend uses the deadlines and scheduling dates in Org TODO items
for setting the start and due dates for the iCalendar TODO entry.
Consult the ‘org-icalendar-use-deadline’, ‘org-icalendar-use-scheduled’,
and ‘org-icalendar-todo-unscheduled-start’ variables for more details.

   For tags on the headline, the iCalendar export backend makes them
into iCalendar categories.  To tweak the inheritance of tags and TODO
states, configure the variable ‘org-icalendar-categories’.  To assign
clock alarms based on time, configure the ‘org-icalendar-alarm-time’
variable.

   The iCalendar format standard requires globally unique identifier—or
UID—for each entry.  The iCalendar export backend creates UIDs during
export.  To save a copy of the UID in the Org file set the variable
‘org-icalendar-store-UID’.  The backend looks for the ‘ID’ property of
the entry for re-using the same UID for subsequent exports.

   Since a single Org entry can result in multiple iCalendar
entries—timestamp, deadline, scheduled item, or TODO item—Org adds
prefixes to the UID, depending on which part of the Org entry triggered
the creation of the iCalendar entry.  Prefixing ensures UIDs remains
unique, yet enable synchronization programs trace the connections.

‘C-c C-e c f’ (‘org-icalendar-export-to-ics’)
     Create iCalendar entries from the current Org buffer and store them
     in the same directory, using a file extension ‘.ics’.

‘C-c C-e c a’ (‘org-icalendar-export-agenda-files’)
     Create iCalendar entries from Org files in ‘org-agenda-files’ and
     store in a separate iCalendar file for each Org file.

‘C-c C-e c c’ (‘org-icalendar-combine-agenda-files’)
     Create a combined iCalendar file from Org files in
     ‘org-agenda-files’ and write it to
     ‘org-icalendar-combined-agenda-file’ file name.

   The iCalendar export backend includes ‘SUMMARY’, ‘DESCRIPTION’,
‘LOCATION’, ‘TIMEZONE’ and ‘CLASS’ properties from the Org entries when
exporting.  To force the backend to inherit the ‘LOCATION’, ‘TIMEZONE’
and ‘CLASS’ properties, configure the ‘org-use-property-inheritance’
variable.

   When Org entries do not have ‘SUMMARY’, ‘DESCRIPTION’, ‘LOCATION’ and
‘CLASS’ properties, the iCalendar export backend derives the summary
from the headline, and derives the description from the body of the Org
item.  The ‘org-icalendar-include-body’ variable limits the maximum
number of characters of the content are turned into its description.

   The ‘TIMEZONE’ property can be used to specify a per-entry time zone,
and is applied to any entry with timestamp information.  Time zones
should be specified as per the IANA time zone database format, e.g.,
‘Asia/Almaty’.  Alternately, the property value can be ‘UTC’, to force
UTC time for this entry only.

   The ‘CLASS’ property can be used to specify a per-entry visibility
class or access restrictions, and is applied to any entry with class
information.  The iCalendar standard defines three visibility classes:
‘PUBLIC’
     The entry is publicly visible (this is the default).
‘CONFIDENTIAL’
     Only a limited group of clients get access to the event.
‘PRIVATE’
     The entry can be retrieved only by its owner.
   The server should treat unknown class properties the same as
‘PRIVATE’.

   Exporting to iCalendar format depends in large part on the
capabilities of the destination application.  Some are more lenient than
others.  Consult the Org mode FAQ for advice on specific applications.

   ---------- Footnotes ----------

   (1) Diary sexp events, except certain built-in types (see
‘icalendar-export-sexp-enumerate-all’), are exported up to
‘icalendar-export-sexp-enumeration-days’ into future.


File: org.info,  Node: Other Built-in Backends,  Next: Advanced Export Configuration,  Prev: iCalendar Export,  Up: Exporting

13.16 Other Built-in Backends
=============================

Other export backends included with Org are:

   • ‘ox-man.el’: Export to a man page.

   To activate such backends, either customize ‘org-export-backends’ or
load directly with ‘(require 'ox-man)’.  On successful load, the backend
adds new keys in the export dispatcher (see *note The Export
Dispatcher::).

   Follow the comment section of such files, for example, ‘ox-man.el’,
for usage and configuration details.


File: org.info,  Node: Advanced Export Configuration,  Next: Export Region,  Prev: Other Built-in Backends,  Up: Exporting

13.17 Advanced Export Configuration
===================================

Export hooks
------------

The export process executes two hooks before the actual exporting
begins.  The first hook, ‘org-export-before-processing-hook’, runs
before any expansions of macros, Babel code, and include keywords in the
buffer.  The second hook, ‘org-export-before-parsing-hook’, runs before
the buffer is parsed.

   Functions added to these hooks are called with a single argument: the
export backend actually used, as a symbol.  You may use them for heavy
duty structural modifications of the document.  For example, you can
remove every headline in the buffer during export like this:

     (defun my-headline-removal (backend)
       "Remove all headlines in the current buffer.
     BACKEND is the export backend being used, as a symbol."
       (org-map-entries
        (lambda ()
          (delete-region (point) (line-beginning-position 2))
          ;; We need to tell `org-map-entries' to not skip over heading at
          ;; point. Otherwise, it would continue from _next_ heading. See
          ;; the docstring of `org-map-entries' for details.
          (setq org-map-continue-from (point)))))

     (add-hook 'org-export-before-parsing-hook #'my-headline-removal)

Filters
-------

Filters are lists of functions to be applied to certain parts for a
given backend.  The output from the first function in the filter is
passed on to the next function in the filter.  The final output is the
output from the final function in the filter.

   The Org export process has many filter sets applicable to different
types of objects, plain text, parse trees, export options, and final
output formats.  The filters are named after the element type or object
type: ‘org-export-filter-TYPE-functions’, where TYPE is the type
targeted by the filter.  Valid types are:

body                     bold                     babel-call
center-block             clock                    code
diary-sexp               drawer                   dynamic-block
entity                   example-block            export-block
export-snippet           final-output             fixed-width
footnote-definition      footnote-reference       headline
horizontal-rule          inline-babel-call        inline-src-block
inlinetask               italic                   item
keyword                  latex-environment        latex-fragment
line-break               link                     node-property
options                  paragraph                parse-tree
plain-list               plain-text               planning
property-drawer          quote-block              radio-target
section                  special-block            src-block
statistics-cookie        strike-through           subscript
superscript              table                    table-cell
table-row                target                   timestamp
underline                verbatim                 verse-block

   Here is an example filter that replaces non-breaking spaces ~ ~ in
the Org buffer with ‘~’ for the LaTeX backend.

     (defun my-latex-filter-nobreaks (text backend info)
       "Ensure \" \" are properly handled in LaTeX export."
       (when (org-export-derived-backend-p backend 'latex)
         (replace-regexp-in-string " " "~" text)))

     (add-to-list 'org-export-filter-plain-text-functions
                  'my-latex-filter-nobreaks)

   A filter requires three arguments: the code to be transformed, the
name of the backend, and some optional information about the export
process.  The third argument can be safely ignored.  Note the use of
‘org-export-derived-backend-p’ predicate that tests for _latex_ backend
or any other backend, such as _beamer_, derived from _latex_.

Defining filters for individual files
-------------------------------------

The Org export can filter not just for backends, but also for specific
files through the ‘BIND’ keyword.  Here is an example with two filters;
one removes brackets from time stamps, and the other removes
strike-through text.  The filter functions are defined in a code block
in the same Org file, which is a handy location for debugging.

     #+BIND: org-export-filter-timestamp-functions (tmp-f-timestamp)
     #+BIND: org-export-filter-strike-through-functions (tmp-f-strike-through)
     #+BEGIN_SRC emacs-lisp :exports results :results none
       (defun tmp-f-timestamp (s backend info)
         (replace-regexp-in-string "&[lg]t;\\|[][]" "" s))
       (defun tmp-f-strike-through (s backend info) "")
     #+END_SRC

Extending an existing backend
-----------------------------

Some parts of the conversion process can be extended for certain
elements so as to introduce a new or revised translation.  That is how
the HTML export backend was extended to handle Markdown format.  The
extensions work seamlessly so any aspect of filtering not done by the
extended backend is handled by the original backend.  Of all the export
customization in Org, extending is very powerful as it operates at the
parser level.

   For this example, make the _ascii_ backend display the language used
in a source code block.  Also make it display only when some attribute
is non-‘nil’, like the following:

     #+ATTR_ASCII: :language t

   Then extend ASCII backend with a custom “my-ascii” backend.

     (defun my-ascii-src-block (src-block contents info)
       "Transcode a SRC-BLOCK element from Org to ASCII.
     CONTENTS is nil.  INFO is a plist used as a communication
     channel."
       (if (not (org-export-read-attribute :attr_ascii src-block :language))
           (org-export-with-backend 'ascii src-block contents info)
         (concat
          (format ",--[ %s ]--\n%s`----"
                  (org-element-property :language src-block)
                  (replace-regexp-in-string
                   "^" "| "
                   (org-element-normalize-string
                    (org-export-format-code-default src-block info)))))))

     (org-export-define-derived-backend 'my-ascii 'ascii
       :translate-alist '((src-block . my-ascii-src-block)))

   The ‘my-ascii-src-block’ function looks at the attribute above the
current element.  If not true, hands over to _ascii_ backend.  If true,
which it is in this example, it creates a box around the code and leaves
room for the inserting a string for language.  The last form creates the
new backend that springs to action only when translating ‘src-block’
type elements.

   To use the newly defined backend, evaluate the following from an Org
buffer:

     (org-export-to-buffer 'my-ascii "*Org MY-ASCII Export*")

   Further steps to consider would be an interactive function,
self-installing an item in the export dispatcher menu, and other
user-friendly improvements.

